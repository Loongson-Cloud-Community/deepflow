// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alarm.proto

package alarm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceType int32

const (
	DeviceType_VM          DeviceType = 1
	DeviceType_THIRD_PARTY DeviceType = 3
	DeviceType_VGATEWAY    DeviceType = 5
	DeviceType_HOST        DeviceType = 6
	DeviceType_NETWORK     DeviceType = 7
	DeviceType_FLOATING_IP DeviceType = 8
	DeviceType_DHCP        DeviceType = 9
)

var DeviceType_name = map[int32]string{
	1: "VM",
	3: "THIRD_PARTY",
	5: "VGATEWAY",
	6: "HOST",
	7: "NETWORK",
	8: "FLOATING_IP",
	9: "DHCP",
}

var DeviceType_value = map[string]int32{
	"VM":          1,
	"THIRD_PARTY": 3,
	"VGATEWAY":    5,
	"HOST":        6,
	"NETWORK":     7,
	"FLOATING_IP": 8,
	"DHCP":        9,
}

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}

func (x *DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceType_value, data, "DeviceType")
	if err != nil {
		return err
	}
	*x = DeviceType(value)
	return nil
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a4142572412ce8e, []int{0}
}

type AlarmInfo struct {
	Timestamp            *uint32     `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Type                 *string     `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	AclId                *uint32     `protobuf:"varint,3,opt,name=acl_id,json=aclId" json:"acl_id,omitempty"`
	PolicyId             *uint32     `protobuf:"varint,4,opt,name=policy_id,json=policyId" json:"policy_id,omitempty"`
	ServerPort           *uint32     `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	Protocol             *uint32     `protobuf:"varint,6,opt,name=protocol" json:"protocol,omitempty"`
	L3EpcId              *int32      `protobuf:"varint,7,opt,name=l3_epc_id,json=l3EpcId" json:"l3_epc_id,omitempty"`
	L3EpcId_0            *int32      `protobuf:"varint,8,opt,name=l3_epc_id_0,json=l3EpcId0" json:"l3_epc_id_0,omitempty"`
	L3EpcId_1            *int32      `protobuf:"varint,9,opt,name=l3_epc_id_1,json=l3EpcId1" json:"l3_epc_id_1,omitempty"`
	GroupId              *int32      `protobuf:"varint,10,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	GroupId_0            *int32      `protobuf:"varint,11,opt,name=group_id_0,json=groupId0" json:"group_id_0,omitempty"`
	GroupId_1            *int32      `protobuf:"varint,12,opt,name=group_id_1,json=groupId1" json:"group_id_1,omitempty"`
	Ip                   *uint32     `protobuf:"varint,13,opt,name=ip" json:"ip,omitempty"`
	Ip_0                 *uint32     `protobuf:"varint,14,opt,name=ip_0,json=ip0" json:"ip_0,omitempty"`
	Ip_1                 *uint32     `protobuf:"varint,15,opt,name=ip_1,json=ip1" json:"ip_1,omitempty"`
	L3DeviceId           *uint32     `protobuf:"varint,16,opt,name=l3_device_id,json=l3DeviceId" json:"l3_device_id,omitempty"`
	L3DeviceType         *DeviceType `protobuf:"varint,17,opt,name=l3_device_type,json=l3DeviceType,enum=Alarm.DeviceType" json:"l3_device_type,omitempty"`
	L3DeviceId_0         *uint32     `protobuf:"varint,18,opt,name=l3_device_id_0,json=l3DeviceId0" json:"l3_device_id_0,omitempty"`
	L3DeviceType_0       *DeviceType `protobuf:"varint,19,opt,name=l3_device_type_0,json=l3DeviceType0,enum=Alarm.DeviceType" json:"l3_device_type_0,omitempty"`
	L3DeviceId_1         *uint32     `protobuf:"varint,20,opt,name=l3_device_id_1,json=l3DeviceId1" json:"l3_device_id_1,omitempty"`
	L3DeviceType_1       *DeviceType `protobuf:"varint,21,opt,name=l3_device_type_1,json=l3DeviceType1,enum=Alarm.DeviceType" json:"l3_device_type_1,omitempty"`
	SumBit               *uint64     `protobuf:"varint,22,opt,name=sum_bit,json=sumBit" json:"sum_bit,omitempty"`
	MaxRx                *uint64     `protobuf:"varint,23,opt,name=max_rx,json=maxRx" json:"max_rx,omitempty"`
	MaxTx                *uint64     `protobuf:"varint,24,opt,name=max_tx,json=maxTx" json:"max_tx,omitempty"`
	RttAvg               *uint32     `protobuf:"varint,25,opt,name=rtt_avg,json=rttAvg" json:"rtt_avg,omitempty"`
	FlowCount            *uint64     `protobuf:"varint,26,opt,name=flow_count,json=flowCount" json:"flow_count,omitempty"`
	TapType              *uint32     `protobuf:"varint,27,opt,name=tap_type,json=tapType" json:"tap_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AlarmInfo) Reset()         { *m = AlarmInfo{} }
func (m *AlarmInfo) String() string { return proto.CompactTextString(m) }
func (*AlarmInfo) ProtoMessage()    {}
func (*AlarmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a4142572412ce8e, []int{0}
}
func (m *AlarmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlarmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlarmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlarmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlarmInfo.Merge(m, src)
}
func (m *AlarmInfo) XXX_Size() int {
	return m.Size()
}
func (m *AlarmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AlarmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AlarmInfo proto.InternalMessageInfo

func (m *AlarmInfo) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AlarmInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *AlarmInfo) GetAclId() uint32 {
	if m != nil && m.AclId != nil {
		return *m.AclId
	}
	return 0
}

func (m *AlarmInfo) GetPolicyId() uint32 {
	if m != nil && m.PolicyId != nil {
		return *m.PolicyId
	}
	return 0
}

func (m *AlarmInfo) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *AlarmInfo) GetProtocol() uint32 {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return 0
}

func (m *AlarmInfo) GetL3EpcId() int32 {
	if m != nil && m.L3EpcId != nil {
		return *m.L3EpcId
	}
	return 0
}

func (m *AlarmInfo) GetL3EpcId_0() int32 {
	if m != nil && m.L3EpcId_0 != nil {
		return *m.L3EpcId_0
	}
	return 0
}

func (m *AlarmInfo) GetL3EpcId_1() int32 {
	if m != nil && m.L3EpcId_1 != nil {
		return *m.L3EpcId_1
	}
	return 0
}

func (m *AlarmInfo) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *AlarmInfo) GetGroupId_0() int32 {
	if m != nil && m.GroupId_0 != nil {
		return *m.GroupId_0
	}
	return 0
}

func (m *AlarmInfo) GetGroupId_1() int32 {
	if m != nil && m.GroupId_1 != nil {
		return *m.GroupId_1
	}
	return 0
}

func (m *AlarmInfo) GetIp() uint32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *AlarmInfo) GetIp_0() uint32 {
	if m != nil && m.Ip_0 != nil {
		return *m.Ip_0
	}
	return 0
}

func (m *AlarmInfo) GetIp_1() uint32 {
	if m != nil && m.Ip_1 != nil {
		return *m.Ip_1
	}
	return 0
}

func (m *AlarmInfo) GetL3DeviceId() uint32 {
	if m != nil && m.L3DeviceId != nil {
		return *m.L3DeviceId
	}
	return 0
}

func (m *AlarmInfo) GetL3DeviceType() DeviceType {
	if m != nil && m.L3DeviceType != nil {
		return *m.L3DeviceType
	}
	return DeviceType_VM
}

func (m *AlarmInfo) GetL3DeviceId_0() uint32 {
	if m != nil && m.L3DeviceId_0 != nil {
		return *m.L3DeviceId_0
	}
	return 0
}

func (m *AlarmInfo) GetL3DeviceType_0() DeviceType {
	if m != nil && m.L3DeviceType_0 != nil {
		return *m.L3DeviceType_0
	}
	return DeviceType_VM
}

func (m *AlarmInfo) GetL3DeviceId_1() uint32 {
	if m != nil && m.L3DeviceId_1 != nil {
		return *m.L3DeviceId_1
	}
	return 0
}

func (m *AlarmInfo) GetL3DeviceType_1() DeviceType {
	if m != nil && m.L3DeviceType_1 != nil {
		return *m.L3DeviceType_1
	}
	return DeviceType_VM
}

func (m *AlarmInfo) GetSumBit() uint64 {
	if m != nil && m.SumBit != nil {
		return *m.SumBit
	}
	return 0
}

func (m *AlarmInfo) GetMaxRx() uint64 {
	if m != nil && m.MaxRx != nil {
		return *m.MaxRx
	}
	return 0
}

func (m *AlarmInfo) GetMaxTx() uint64 {
	if m != nil && m.MaxTx != nil {
		return *m.MaxTx
	}
	return 0
}

func (m *AlarmInfo) GetRttAvg() uint32 {
	if m != nil && m.RttAvg != nil {
		return *m.RttAvg
	}
	return 0
}

func (m *AlarmInfo) GetFlowCount() uint64 {
	if m != nil && m.FlowCount != nil {
		return *m.FlowCount
	}
	return 0
}

func (m *AlarmInfo) GetTapType() uint32 {
	if m != nil && m.TapType != nil {
		return *m.TapType
	}
	return 0
}

func init() {
	proto.RegisterEnum("Alarm.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterType((*AlarmInfo)(nil), "Alarm.AlarmInfo")
}

func init() { proto.RegisterFile("alarm.proto", fileDescriptor_4a4142572412ce8e) }

var fileDescriptor_4a4142572412ce8e = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcb, 0x6e, 0x9b, 0x4e,
	0x14, 0xc6, 0xff, 0x38, 0x06, 0xc3, 0xc1, 0x71, 0xc8, 0xf9, 0x37, 0xcd, 0xe4, 0xe6, 0xa2, 0x76,
	0x63, 0x75, 0x11, 0x41, 0xbd, 0xa8, 0xd4, 0x1d, 0xb9, 0x34, 0x41, 0x6d, 0x13, 0x8b, 0xa2, 0x44,
	0xe9, 0x66, 0x44, 0x81, 0x44, 0x48, 0x10, 0x46, 0x78, 0xec, 0x92, 0x37, 0xe9, 0x23, 0x75, 0xd1,
	0x45, 0x1f, 0xa1, 0x4a, 0x5f, 0xa4, 0x9a, 0xc1, 0x4e, 0xe2, 0x5e, 0xa4, 0xee, 0x38, 0xdf, 0xef,
	0x7c, 0xdf, 0x39, 0x0c, 0x03, 0x98, 0x51, 0x1e, 0x55, 0xc5, 0x2e, 0xab, 0x4a, 0x5e, 0xa2, 0xea,
	0x89, 0xe2, 0xe9, 0x57, 0x0d, 0x0c, 0xf9, 0xe4, 0x5f, 0x5f, 0x96, 0xb8, 0x0d, 0x06, 0xcf, 0x8a,
	0x74, 0xcc, 0xa3, 0x82, 0x11, 0xc5, 0x56, 0x06, 0xcb, 0xc1, 0xbd, 0x80, 0x08, 0x6d, 0x7e, 0xc3,
	0x52, 0xd2, 0xb2, 0x95, 0x81, 0x11, 0xc8, 0x67, 0x5c, 0x03, 0x2d, 0x8a, 0x73, 0x9a, 0x25, 0x64,
	0x49, 0xb6, 0xab, 0x51, 0x9c, 0xfb, 0x09, 0x6e, 0x81, 0xc1, 0xca, 0x3c, 0x8b, 0x6f, 0x04, 0x69,
	0x4b, 0xa2, 0x37, 0x82, 0x9f, 0xe0, 0x13, 0x30, 0xc7, 0x69, 0x35, 0x4d, 0x2b, 0xca, 0xca, 0x8a,
	0x13, 0x55, 0x62, 0x68, 0xa4, 0x51, 0x59, 0x71, 0xdc, 0x04, 0x5d, 0x2e, 0x19, 0x97, 0x39, 0xd1,
	0x66, 0xe6, 0x59, 0x8d, 0x9b, 0x60, 0xe4, 0x43, 0x9a, 0xb2, 0x58, 0x24, 0x77, 0x6c, 0x65, 0xa0,
	0x06, 0x9d, 0x7c, 0x78, 0xc8, 0x62, 0x3f, 0xc1, 0x1d, 0x30, 0xef, 0x18, 0x75, 0x88, 0x2e, 0xa9,
	0x3e, 0xa3, 0xce, 0x22, 0x76, 0x89, 0xb1, 0x80, 0x5d, 0xdc, 0x00, 0xfd, 0xaa, 0x2a, 0x27, 0x4c,
	0x04, 0x43, 0x13, 0x2c, 0x6b, 0x3f, 0xc1, 0x6d, 0x80, 0x39, 0xa2, 0x0e, 0x31, 0x1b, 0xe3, 0x0c,
	0x3a, 0x0b, 0xd4, 0x25, 0xdd, 0x05, 0xea, 0x62, 0x0f, 0x5a, 0x19, 0x23, 0xcb, 0xf2, 0x35, 0x5a,
	0x19, 0xc3, 0x55, 0x68, 0x67, 0x8c, 0x3a, 0xa4, 0x27, 0x95, 0xa5, 0x8c, 0x39, 0x33, 0xc9, 0x25,
	0x2b, 0x73, 0xc9, 0x45, 0x1b, 0xba, 0xf9, 0x90, 0x26, 0xe9, 0x34, 0x8b, 0x53, 0xb1, 0x90, 0xd5,
	0x1c, 0x52, 0x3e, 0x3c, 0x90, 0x92, 0x9f, 0xe0, 0x4b, 0xe8, 0xdd, 0x77, 0xc8, 0xef, 0xb2, 0x6a,
	0x2b, 0x83, 0xde, 0x8b, 0xd5, 0x5d, 0xf9, 0x3d, 0x77, 0x9b, 0xc6, 0xf0, 0x86, 0xa5, 0x41, 0x77,
	0x6e, 0x13, 0x15, 0x3e, 0x7b, 0x68, 0x94, 0x2f, 0x84, 0x32, 0xdc, 0xbc, 0x0f, 0x77, 0xf0, 0x15,
	0x58, 0x8b, 0xe9, 0xd4, 0x21, 0xff, 0xff, 0x2d, 0x7f, 0xf9, 0x61, 0xbe, 0xf3, 0xdb, 0x00, 0x97,
	0x3c, 0xfa, 0x75, 0x80, 0xfb, 0x87, 0x01, 0x2e, 0x59, 0xfb, 0xa7, 0x01, 0x2e, 0xae, 0x43, 0x67,
	0x3c, 0x29, 0xe8, 0xc7, 0x8c, 0x93, 0xc7, 0xb6, 0x32, 0x68, 0x07, 0xda, 0x78, 0x52, 0xec, 0x65,
	0x5c, 0xdc, 0xc6, 0x22, 0xaa, 0x69, 0x55, 0x93, 0x75, 0xa9, 0xab, 0x45, 0x54, 0x07, 0xf5, 0x5c,
	0xe6, 0x35, 0x21, 0x77, 0x72, 0x58, 0x8b, 0x98, 0x8a, 0x73, 0x1a, 0x4d, 0xaf, 0xc8, 0x86, 0x5c,
	0x50, 0xab, 0x38, 0xf7, 0xa6, 0x57, 0xb8, 0x03, 0x70, 0x99, 0x97, 0x9f, 0x68, 0x5c, 0x4e, 0xae,
	0x39, 0xd9, 0x94, 0x1e, 0x43, 0x28, 0xfb, 0x42, 0x10, 0x17, 0x85, 0x47, 0xac, 0x39, 0xf3, 0x2d,
	0x69, 0xec, 0xf0, 0x88, 0x89, 0xd5, 0x9e, 0xa7, 0x00, 0x0f, 0x4e, 0x5a, 0x83, 0xd6, 0xd9, 0x3b,
	0x4b, 0xc1, 0x15, 0x30, 0xc3, 0x63, 0x3f, 0x38, 0xa0, 0x23, 0x2f, 0x08, 0x2f, 0xac, 0x25, 0xec,
	0x82, 0x7e, 0x76, 0xe4, 0x85, 0x87, 0xe7, 0xde, 0x85, 0xa5, 0xa2, 0x0e, 0xed, 0xe3, 0xd3, 0xf7,
	0xa1, 0xa5, 0xa1, 0x09, 0x9d, 0x93, 0xc3, 0xf0, 0xfc, 0x34, 0x78, 0x63, 0x75, 0x84, 0xeb, 0xf5,
	0xdb, 0x53, 0x2f, 0xf4, 0x4f, 0x8e, 0xa8, 0x3f, 0xb2, 0x74, 0xd1, 0x77, 0x70, 0xbc, 0x3f, 0xb2,
	0x8c, 0xbd, 0xf5, 0x2f, 0xb7, 0x7d, 0xe5, 0xdb, 0x6d, 0x5f, 0xf9, 0x7e, 0xdb, 0x57, 0x3e, 0xff,
	0xe8, 0xff, 0xf7, 0x41, 0x95, 0xff, 0xf6, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x03, 0xd7,
	0x1e, 0xe3, 0x03, 0x00, 0x00,
}

func (m *AlarmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlarmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlarmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TapType != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.TapType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.FlowCount != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.FlowCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.RttAvg != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.RttAvg))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.MaxTx != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.MaxTx))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.MaxRx != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.MaxRx))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.SumBit != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.SumBit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.L3DeviceType_1 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3DeviceType_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.L3DeviceId_1 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3DeviceId_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.L3DeviceType_0 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3DeviceType_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.L3DeviceId_0 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3DeviceId_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.L3DeviceType != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3DeviceType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.L3DeviceId != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3DeviceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Ip_1 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.Ip_1))
		i--
		dAtA[i] = 0x78
	}
	if m.Ip_0 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.Ip_0))
		i--
		dAtA[i] = 0x70
	}
	if m.Ip != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.Ip))
		i--
		dAtA[i] = 0x68
	}
	if m.GroupId_1 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.GroupId_1))
		i--
		dAtA[i] = 0x60
	}
	if m.GroupId_0 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.GroupId_0))
		i--
		dAtA[i] = 0x58
	}
	if m.GroupId != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.GroupId))
		i--
		dAtA[i] = 0x50
	}
	if m.L3EpcId_1 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3EpcId_1))
		i--
		dAtA[i] = 0x48
	}
	if m.L3EpcId_0 != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3EpcId_0))
		i--
		dAtA[i] = 0x40
	}
	if m.L3EpcId != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.L3EpcId))
		i--
		dAtA[i] = 0x38
	}
	if m.Protocol != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.Protocol))
		i--
		dAtA[i] = 0x30
	}
	if m.ServerPort != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.ServerPort))
		i--
		dAtA[i] = 0x28
	}
	if m.PolicyId != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.PolicyId))
		i--
		dAtA[i] = 0x20
	}
	if m.AclId != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.AclId))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintAlarm(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		i = encodeVarintAlarm(dAtA, i, uint64(*m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlarm(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlarm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlarmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		n += 1 + sovAlarm(uint64(*m.Timestamp))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovAlarm(uint64(l))
	}
	if m.AclId != nil {
		n += 1 + sovAlarm(uint64(*m.AclId))
	}
	if m.PolicyId != nil {
		n += 1 + sovAlarm(uint64(*m.PolicyId))
	}
	if m.ServerPort != nil {
		n += 1 + sovAlarm(uint64(*m.ServerPort))
	}
	if m.Protocol != nil {
		n += 1 + sovAlarm(uint64(*m.Protocol))
	}
	if m.L3EpcId != nil {
		n += 1 + sovAlarm(uint64(*m.L3EpcId))
	}
	if m.L3EpcId_0 != nil {
		n += 1 + sovAlarm(uint64(*m.L3EpcId_0))
	}
	if m.L3EpcId_1 != nil {
		n += 1 + sovAlarm(uint64(*m.L3EpcId_1))
	}
	if m.GroupId != nil {
		n += 1 + sovAlarm(uint64(*m.GroupId))
	}
	if m.GroupId_0 != nil {
		n += 1 + sovAlarm(uint64(*m.GroupId_0))
	}
	if m.GroupId_1 != nil {
		n += 1 + sovAlarm(uint64(*m.GroupId_1))
	}
	if m.Ip != nil {
		n += 1 + sovAlarm(uint64(*m.Ip))
	}
	if m.Ip_0 != nil {
		n += 1 + sovAlarm(uint64(*m.Ip_0))
	}
	if m.Ip_1 != nil {
		n += 1 + sovAlarm(uint64(*m.Ip_1))
	}
	if m.L3DeviceId != nil {
		n += 2 + sovAlarm(uint64(*m.L3DeviceId))
	}
	if m.L3DeviceType != nil {
		n += 2 + sovAlarm(uint64(*m.L3DeviceType))
	}
	if m.L3DeviceId_0 != nil {
		n += 2 + sovAlarm(uint64(*m.L3DeviceId_0))
	}
	if m.L3DeviceType_0 != nil {
		n += 2 + sovAlarm(uint64(*m.L3DeviceType_0))
	}
	if m.L3DeviceId_1 != nil {
		n += 2 + sovAlarm(uint64(*m.L3DeviceId_1))
	}
	if m.L3DeviceType_1 != nil {
		n += 2 + sovAlarm(uint64(*m.L3DeviceType_1))
	}
	if m.SumBit != nil {
		n += 2 + sovAlarm(uint64(*m.SumBit))
	}
	if m.MaxRx != nil {
		n += 2 + sovAlarm(uint64(*m.MaxRx))
	}
	if m.MaxTx != nil {
		n += 2 + sovAlarm(uint64(*m.MaxTx))
	}
	if m.RttAvg != nil {
		n += 2 + sovAlarm(uint64(*m.RttAvg))
	}
	if m.FlowCount != nil {
		n += 2 + sovAlarm(uint64(*m.FlowCount))
	}
	if m.TapType != nil {
		n += 2 + sovAlarm(uint64(*m.TapType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlarm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlarm(x uint64) (n int) {
	return sovAlarm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlarmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AclId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicyId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerPort = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Protocol = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3EpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3EpcId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3EpcId_0", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3EpcId_0 = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3EpcId_1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3EpcId_1 = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId_0", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId_0 = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId_1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId_1 = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip_0", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip_0 = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip_1", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip_1 = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceId = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceType", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceType = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceId_0", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceId_0 = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceType_0", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceType_0 = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceId_1", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceId_1 = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceType_1", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceType_1 = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumBit = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxRx = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTx = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttAvg", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttAvg = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowCount = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAlarm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlarm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlarm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlarm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlarm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlarm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlarm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlarm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlarm = fmt.Errorf("proto: unexpected end of group")
)
