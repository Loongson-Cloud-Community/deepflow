// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: voucher.proto

package voucher

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Voucher struct {
	Customer             *string  `protobuf:"bytes,1,opt,name=customer" json:"customer,omitempty"`
	ContractNo           *string  `protobuf:"bytes,2,opt,name=contract_no,json=contractNo" json:"contract_no,omitempty"`
	CrmId                *uint32  `protobuf:"varint,3,opt,name=crm_id,json=crmId" json:"crm_id,omitempty"`
	ProductVersion       *string  `protobuf:"bytes,4,opt,name=product_version,json=productVersion" json:"product_version,omitempty"`
	ControllerHostname   []string `protobuf:"bytes,5,rep,name=controller_hostname,json=controllerHostname" json:"controller_hostname,omitempty"`
	ControllerPublicIp   []string `protobuf:"bytes,6,rep,name=controller_public_ip,json=controllerPublicIp" json:"controller_public_ip,omitempty"`
	RechargeAmount       *uint32  `protobuf:"varint,7,opt,name=recharge_amount,json=rechargeAmount" json:"recharge_amount,omitempty"`
	ActivationTime       *string  `protobuf:"bytes,8,opt,name=activation_time,json=activationTime" json:"activation_time,omitempty"`
	ExpirationDays       *uint32  `protobuf:"varint,9,opt,name=expiration_days,json=expirationDays" json:"expiration_days,omitempty"`
	TmCloudServerPrice   *float32 `protobuf:"fixed32,10,opt,name=tm_cloud_server_price,json=tmCloudServerPrice" json:"tm_cloud_server_price,omitempty"`
	TmContainerNodePrice *float32 `protobuf:"fixed32,11,opt,name=tm_container_node_price,json=tmContainerNodePrice" json:"tm_container_node_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Voucher) Reset()         { *m = Voucher{} }
func (m *Voucher) String() string { return proto.CompactTextString(m) }
func (*Voucher) ProtoMessage()    {}
func (*Voucher) Descriptor() ([]byte, []int) {
	return fileDescriptor_a22a9b0d3335ba25, []int{0}
}
func (m *Voucher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Voucher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Voucher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Voucher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voucher.Merge(m, src)
}
func (m *Voucher) XXX_Size() int {
	return m.Size()
}
func (m *Voucher) XXX_DiscardUnknown() {
	xxx_messageInfo_Voucher.DiscardUnknown(m)
}

var xxx_messageInfo_Voucher proto.InternalMessageInfo

func (m *Voucher) GetCustomer() string {
	if m != nil && m.Customer != nil {
		return *m.Customer
	}
	return ""
}

func (m *Voucher) GetContractNo() string {
	if m != nil && m.ContractNo != nil {
		return *m.ContractNo
	}
	return ""
}

func (m *Voucher) GetCrmId() uint32 {
	if m != nil && m.CrmId != nil {
		return *m.CrmId
	}
	return 0
}

func (m *Voucher) GetProductVersion() string {
	if m != nil && m.ProductVersion != nil {
		return *m.ProductVersion
	}
	return ""
}

func (m *Voucher) GetControllerHostname() []string {
	if m != nil {
		return m.ControllerHostname
	}
	return nil
}

func (m *Voucher) GetControllerPublicIp() []string {
	if m != nil {
		return m.ControllerPublicIp
	}
	return nil
}

func (m *Voucher) GetRechargeAmount() uint32 {
	if m != nil && m.RechargeAmount != nil {
		return *m.RechargeAmount
	}
	return 0
}

func (m *Voucher) GetActivationTime() string {
	if m != nil && m.ActivationTime != nil {
		return *m.ActivationTime
	}
	return ""
}

func (m *Voucher) GetExpirationDays() uint32 {
	if m != nil && m.ExpirationDays != nil {
		return *m.ExpirationDays
	}
	return 0
}

func (m *Voucher) GetTmCloudServerPrice() float32 {
	if m != nil && m.TmCloudServerPrice != nil {
		return *m.TmCloudServerPrice
	}
	return 0
}

func (m *Voucher) GetTmContainerNodePrice() float32 {
	if m != nil && m.TmContainerNodePrice != nil {
		return *m.TmContainerNodePrice
	}
	return 0
}

func init() {
	proto.RegisterType((*Voucher)(nil), "voucher.Voucher")
}

func init() { proto.RegisterFile("voucher.proto", fileDescriptor_a22a9b0d3335ba25) }

var fileDescriptor_a22a9b0d3335ba25 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xbf, 0xb4, 0x5f, 0xff, 0x5c, 0xb5, 0x48, 0xa6, 0x15, 0x86, 0x21, 0x44, 0x2c, 0x64,
	0xe2, 0x67, 0xe0, 0x02, 0xa0, 0x0c, 0x74, 0xa9, 0xaa, 0x80, 0x3a, 0xb0, 0x58, 0xc6, 0xb1, 0xa8,
	0xa5, 0xd8, 0x27, 0x72, 0x9c, 0x88, 0xde, 0x09, 0x97, 0xc4, 0x84, 0xb8, 0x04, 0x54, 0x6e, 0x04,
	0xc5, 0x49, 0x28, 0x62, 0xf3, 0x79, 0x9f, 0xf3, 0x1c, 0xbd, 0x92, 0xd1, 0xa8, 0x80, 0x9c, 0xaf,
	0x85, 0x39, 0x4b, 0x0d, 0x58, 0xc0, 0xbd, 0x7a, 0x3c, 0x79, 0x6f, 0xa3, 0xde, 0xaa, 0x7a, 0xe3,
	0x23, 0xd4, 0xe7, 0x79, 0x66, 0x41, 0x09, 0x43, 0xbc, 0xc0, 0x0b, 0x07, 0xd1, 0xcf, 0x8c, 0x8f,
	0xd1, 0x90, 0x83, 0xb6, 0x86, 0x71, 0x4b, 0x35, 0x90, 0x96, 0xc3, 0xa8, 0x89, 0x16, 0x80, 0xa7,
	0xa8, 0xcb, 0x8d, 0xa2, 0x32, 0x26, 0xed, 0xc0, 0x0b, 0x47, 0x51, 0x87, 0x1b, 0x35, 0x8f, 0xf1,
	0x29, 0xda, 0x4b, 0x0d, 0xc4, 0x39, 0xb7, 0xb4, 0x10, 0x26, 0x93, 0xa0, 0xc9, 0x7f, 0xe7, 0x8e,
	0xeb, 0x78, 0x55, 0xa5, 0xf8, 0x1c, 0xed, 0xbb, 0x6b, 0x90, 0x24, 0xc2, 0xd0, 0x35, 0x64, 0x56,
	0x33, 0x25, 0x48, 0x27, 0x68, 0x87, 0x83, 0x08, 0xef, 0xd0, 0x5d, 0x4d, 0xf0, 0x05, 0x9a, 0xfc,
	0x12, 0xd2, 0xfc, 0x29, 0x91, 0x9c, 0xca, 0x94, 0x74, 0xff, 0x1a, 0x4b, 0x87, 0xe6, 0x69, 0xd9,
	0xc5, 0x08, 0xbe, 0x66, 0xe6, 0x59, 0x50, 0xa6, 0x20, 0xd7, 0x96, 0xf4, 0x5c, 0xd7, 0x71, 0x13,
	0x5f, 0xbb, 0xb4, 0x5c, 0x64, 0xdc, 0xca, 0x82, 0x59, 0x09, 0x9a, 0x5a, 0xa9, 0x04, 0xe9, 0x57,
	0xa5, 0x77, 0xf1, 0x83, 0x54, 0xa2, 0x5c, 0x14, 0x2f, 0xa9, 0x34, 0xd5, 0x62, 0xcc, 0x36, 0x19,
	0x19, 0x54, 0x17, 0x77, 0xf1, 0x2d, 0xdb, 0x64, 0xf8, 0x12, 0x4d, 0xad, 0xa2, 0x3c, 0x81, 0x3c,
	0xa6, 0x99, 0x30, 0x45, 0xd9, 0xd8, 0x48, 0x2e, 0x08, 0x0a, 0xbc, 0xb0, 0x15, 0x61, 0xab, 0x66,
	0x25, 0xbb, 0x77, 0x68, 0x59, 0x12, 0x7c, 0x85, 0x0e, 0x4a, 0x05, 0xb4, 0x65, 0x52, 0x0b, 0x43,
	0x35, 0xc4, 0xa2, 0x96, 0x86, 0x4e, 0x9a, 0x58, 0x35, 0x6b, 0xe8, 0x02, 0x62, 0xe1, 0xb4, 0x9b,
	0xc3, 0xb7, 0xad, 0xef, 0x7d, 0x6c, 0x7d, 0xef, 0x73, 0xeb, 0x7b, 0xaf, 0x5f, 0xfe, 0xbf, 0xc7,
	0xe6, 0xaf, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x29, 0x72, 0x24, 0x04, 0x02, 0x00, 0x00,
}

func (m *Voucher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Voucher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Voucher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TmContainerNodePrice != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.TmContainerNodePrice))))
		i--
		dAtA[i] = 0x5d
	}
	if m.TmCloudServerPrice != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.TmCloudServerPrice))))
		i--
		dAtA[i] = 0x55
	}
	if m.ExpirationDays != nil {
		i = encodeVarintVoucher(dAtA, i, uint64(*m.ExpirationDays))
		i--
		dAtA[i] = 0x48
	}
	if m.ActivationTime != nil {
		i -= len(*m.ActivationTime)
		copy(dAtA[i:], *m.ActivationTime)
		i = encodeVarintVoucher(dAtA, i, uint64(len(*m.ActivationTime)))
		i--
		dAtA[i] = 0x42
	}
	if m.RechargeAmount != nil {
		i = encodeVarintVoucher(dAtA, i, uint64(*m.RechargeAmount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ControllerPublicIp) > 0 {
		for iNdEx := len(m.ControllerPublicIp) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ControllerPublicIp[iNdEx])
			copy(dAtA[i:], m.ControllerPublicIp[iNdEx])
			i = encodeVarintVoucher(dAtA, i, uint64(len(m.ControllerPublicIp[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ControllerHostname) > 0 {
		for iNdEx := len(m.ControllerHostname) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ControllerHostname[iNdEx])
			copy(dAtA[i:], m.ControllerHostname[iNdEx])
			i = encodeVarintVoucher(dAtA, i, uint64(len(m.ControllerHostname[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ProductVersion != nil {
		i -= len(*m.ProductVersion)
		copy(dAtA[i:], *m.ProductVersion)
		i = encodeVarintVoucher(dAtA, i, uint64(len(*m.ProductVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.CrmId != nil {
		i = encodeVarintVoucher(dAtA, i, uint64(*m.CrmId))
		i--
		dAtA[i] = 0x18
	}
	if m.ContractNo != nil {
		i -= len(*m.ContractNo)
		copy(dAtA[i:], *m.ContractNo)
		i = encodeVarintVoucher(dAtA, i, uint64(len(*m.ContractNo)))
		i--
		dAtA[i] = 0x12
	}
	if m.Customer != nil {
		i -= len(*m.Customer)
		copy(dAtA[i:], *m.Customer)
		i = encodeVarintVoucher(dAtA, i, uint64(len(*m.Customer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoucher(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoucher(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Voucher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Customer != nil {
		l = len(*m.Customer)
		n += 1 + l + sovVoucher(uint64(l))
	}
	if m.ContractNo != nil {
		l = len(*m.ContractNo)
		n += 1 + l + sovVoucher(uint64(l))
	}
	if m.CrmId != nil {
		n += 1 + sovVoucher(uint64(*m.CrmId))
	}
	if m.ProductVersion != nil {
		l = len(*m.ProductVersion)
		n += 1 + l + sovVoucher(uint64(l))
	}
	if len(m.ControllerHostname) > 0 {
		for _, s := range m.ControllerHostname {
			l = len(s)
			n += 1 + l + sovVoucher(uint64(l))
		}
	}
	if len(m.ControllerPublicIp) > 0 {
		for _, s := range m.ControllerPublicIp {
			l = len(s)
			n += 1 + l + sovVoucher(uint64(l))
		}
	}
	if m.RechargeAmount != nil {
		n += 1 + sovVoucher(uint64(*m.RechargeAmount))
	}
	if m.ActivationTime != nil {
		l = len(*m.ActivationTime)
		n += 1 + l + sovVoucher(uint64(l))
	}
	if m.ExpirationDays != nil {
		n += 1 + sovVoucher(uint64(*m.ExpirationDays))
	}
	if m.TmCloudServerPrice != nil {
		n += 5
	}
	if m.TmContainerNodePrice != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVoucher(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoucher(x uint64) (n int) {
	return sovVoucher(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Voucher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voucher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voucher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoucher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Customer = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoucher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContractNo = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrmId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoucher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductVersion = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoucher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerHostname = append(m.ControllerHostname, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerPublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoucher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerPublicIp = append(m.ControllerPublicIp, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeAmount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeAmount = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoucher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ActivationTime = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDays", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpirationDays = &v
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmCloudServerPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.TmCloudServerPrice = &v2
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmContainerNodePrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.TmContainerNodePrice = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipVoucher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoucher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoucher(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoucher
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoucher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoucher
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoucher
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoucher
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoucher        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoucher          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoucher = fmt.Errorf("proto: unexpected end of group")
)
