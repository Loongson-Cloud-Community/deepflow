// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zero.proto

package zero

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceType int32

const (
	DeviceType_VM          DeviceType = 1
	DeviceType_THIRD_PARTY DeviceType = 3
	DeviceType_VGATEWAY    DeviceType = 5
	DeviceType_HOST        DeviceType = 6
	DeviceType_NETWORK     DeviceType = 7
	DeviceType_FLOATING_IP DeviceType = 8
	DeviceType_DHCP        DeviceType = 9
)

var DeviceType_name = map[int32]string{
	1: "VM",
	3: "THIRD_PARTY",
	5: "VGATEWAY",
	6: "HOST",
	7: "NETWORK",
	8: "FLOATING_IP",
	9: "DHCP",
}

var DeviceType_value = map[string]int32{
	"VM":          1,
	"THIRD_PARTY": 3,
	"VGATEWAY":    5,
	"HOST":        6,
	"NETWORK":     7,
	"FLOATING_IP": 8,
	"DHCP":        9,
}

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}

func (x *DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceType_value, data, "DeviceType")
	if err != nil {
		return err
	}
	*x = DeviceType(value)
	return nil
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{0}
}

type Direction int32

const (
	Direction_CLIENT_TO_SERVER Direction = 1
	Direction_SERVER_TO_CLIENT Direction = 2
)

var Direction_name = map[int32]string{
	1: "CLIENT_TO_SERVER",
	2: "SERVER_TO_CLIENT",
}

var Direction_value = map[string]int32{
	"CLIENT_TO_SERVER": 1,
	"SERVER_TO_CLIENT": 2,
}

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (x *Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Direction_value, data, "Direction")
	if err != nil {
		return err
	}
	*x = Direction(value)
	return nil
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{1}
}

type AclDirection int32

const (
	AclDirection_FORWARD  AclDirection = 1
	AclDirection_BACKWARD AclDirection = 2
)

var AclDirection_name = map[int32]string{
	1: "FORWARD",
	2: "BACKWARD",
}

var AclDirection_value = map[string]int32{
	"FORWARD":  1,
	"BACKWARD": 2,
}

func (x AclDirection) Enum() *AclDirection {
	p := new(AclDirection)
	*p = x
	return p
}

func (x AclDirection) String() string {
	return proto.EnumName(AclDirection_name, int32(x))
}

func (x *AclDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AclDirection_value, data, "AclDirection")
	if err != nil {
		return err
	}
	*x = AclDirection(value)
	return nil
}

func (AclDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{2}
}

type Tag struct {
	Id                   *string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code                 *uint64       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Ip                   *uint32       `protobuf:"varint,4,opt,name=ip" json:"ip,omitempty"`
	Mac                  *uint64       `protobuf:"varint,5,opt,name=mac" json:"mac,omitempty"`
	GroupId              *int32        `protobuf:"varint,6,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	L2EpcId              *int32        `protobuf:"varint,7,opt,name=l2_epc_id,json=l2EpcId" json:"l2_epc_id,omitempty"`
	L3EpcId              *int32        `protobuf:"varint,8,opt,name=l3_epc_id,json=l3EpcId" json:"l3_epc_id,omitempty"`
	L2DeviceId           *uint32       `protobuf:"varint,9,opt,name=l2_device_id,json=l2DeviceId" json:"l2_device_id,omitempty"`
	L2DeviceType         *DeviceType   `protobuf:"varint,10,opt,name=l2_device_type,json=l2DeviceType,enum=Zero.DeviceType" json:"l2_device_type,omitempty"`
	L3DeviceId           *uint32       `protobuf:"varint,11,opt,name=l3_device_id,json=l3DeviceId" json:"l3_device_id,omitempty"`
	L3DeviceType         *DeviceType   `protobuf:"varint,12,opt,name=l3_device_type,json=l3DeviceType,enum=Zero.DeviceType" json:"l3_device_type,omitempty"`
	HostId               *uint32       `protobuf:"varint,13,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	IsIpv6               *uint32       `protobuf:"varint,14,opt,name=is_ipv6,json=isIpv6" json:"is_ipv6,omitempty"`
	Ip6                  *string       `protobuf:"bytes,15,opt,name=ip6" json:"ip6,omitempty"`
	Ip_0                 *uint32       `protobuf:"varint,16,opt,name=ip_0,json=ip0" json:"ip_0,omitempty"`
	Ip_1                 *uint32       `protobuf:"varint,17,opt,name=ip_1,json=ip1" json:"ip_1,omitempty"`
	Mac_0                *uint64       `protobuf:"varint,18,opt,name=mac_0,json=mac0" json:"mac_0,omitempty"`
	Mac_1                *uint64       `protobuf:"varint,19,opt,name=mac_1,json=mac1" json:"mac_1,omitempty"`
	GroupId_0            *int32        `protobuf:"varint,20,opt,name=group_id_0,json=groupId0" json:"group_id_0,omitempty"`
	GroupId_1            *int32        `protobuf:"varint,21,opt,name=group_id_1,json=groupId1" json:"group_id_1,omitempty"`
	L2EpcId_0            *int32        `protobuf:"varint,22,opt,name=l2_epc_id_0,json=l2EpcId0" json:"l2_epc_id_0,omitempty"`
	L2EpcId_1            *int32        `protobuf:"varint,23,opt,name=l2_epc_id_1,json=l2EpcId1" json:"l2_epc_id_1,omitempty"`
	L3EpcId_0            *int32        `protobuf:"varint,24,opt,name=l3_epc_id_0,json=l3EpcId0" json:"l3_epc_id_0,omitempty"`
	L3EpcId_1            *int32        `protobuf:"varint,25,opt,name=l3_epc_id_1,json=l3EpcId1" json:"l3_epc_id_1,omitempty"`
	L2DeviceId_0         *uint32       `protobuf:"varint,26,opt,name=l2_device_id_0,json=l2DeviceId0" json:"l2_device_id_0,omitempty"`
	L2DeviceType_0       *DeviceType   `protobuf:"varint,27,opt,name=l2_device_type_0,json=l2DeviceType0,enum=Zero.DeviceType" json:"l2_device_type_0,omitempty"`
	L2DeviceId_1         *uint32       `protobuf:"varint,28,opt,name=l2_device_id_1,json=l2DeviceId1" json:"l2_device_id_1,omitempty"`
	L2DeviceType_1       *DeviceType   `protobuf:"varint,29,opt,name=l2_device_type_1,json=l2DeviceType1,enum=Zero.DeviceType" json:"l2_device_type_1,omitempty"`
	L3DeviceId_0         *uint32       `protobuf:"varint,30,opt,name=l3_device_id_0,json=l3DeviceId0" json:"l3_device_id_0,omitempty"`
	L3DeviceType_0       *DeviceType   `protobuf:"varint,31,opt,name=l3_device_type_0,json=l3DeviceType0,enum=Zero.DeviceType" json:"l3_device_type_0,omitempty"`
	L3DeviceId_1         *uint32       `protobuf:"varint,32,opt,name=l3_device_id_1,json=l3DeviceId1" json:"l3_device_id_1,omitempty"`
	L3DeviceType_1       *DeviceType   `protobuf:"varint,33,opt,name=l3_device_type_1,json=l3DeviceType1,enum=Zero.DeviceType" json:"l3_device_type_1,omitempty"`
	HostId_0             *uint32       `protobuf:"varint,34,opt,name=host_id_0,json=hostId0" json:"host_id_0,omitempty"`
	HostId_1             *uint32       `protobuf:"varint,35,opt,name=host_id_1,json=hostId1" json:"host_id_1,omitempty"`
	Ip6_0                *string       `protobuf:"bytes,36,opt,name=ip6_0,json=ip60" json:"ip6_0,omitempty"`
	Ip6_1                *string       `protobuf:"bytes,37,opt,name=ip6_1,json=ip61" json:"ip6_1,omitempty"`
	Direction            *Direction    `protobuf:"varint,40,opt,name=direction,enum=Zero.Direction" json:"direction,omitempty"`
	AclGid               *uint32       `protobuf:"varint,41,opt,name=acl_gid,json=aclGid" json:"acl_gid,omitempty"`
	VlanId               *uint32       `protobuf:"varint,43,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	Protocol             *uint32       `protobuf:"varint,44,opt,name=protocol" json:"protocol,omitempty"`
	ServerPort           *uint32       `protobuf:"varint,45,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	AclDirection         *AclDirection `protobuf:"varint,46,opt,name=acl_direction,json=aclDirection,enum=Zero.AclDirection" json:"acl_direction,omitempty"`
	Vtap                 *uint32       `protobuf:"varint,47,opt,name=vtap" json:"vtap,omitempty"`
	TapType              *uint32       `protobuf:"varint,48,opt,name=tap_type,json=tapType" json:"tap_type,omitempty"`
	SubnetId             *uint32       `protobuf:"varint,49,opt,name=subnet_id,json=subnetId" json:"subnet_id,omitempty"`
	AclId                *uint32       `protobuf:"varint,50,opt,name=acl_id,json=aclId" json:"acl_id,omitempty"`
	PodNodeId            *uint32       `protobuf:"varint,52,opt,name=pod_node_id,json=podNodeId" json:"pod_node_id,omitempty"`
	Side                 *uint32       `protobuf:"varint,53,opt,name=side" json:"side,omitempty"`
	Country              *string       `protobuf:"bytes,60,opt,name=country" json:"country,omitempty"`
	Region               *string       `protobuf:"bytes,61,opt,name=region" json:"region,omitempty"`
	Isp                  *string       `protobuf:"bytes,62,opt,name=isp" json:"isp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{0}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Tag) GetCode() uint64 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Tag) GetIp() uint32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *Tag) GetMac() uint64 {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return 0
}

func (m *Tag) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *Tag) GetL2EpcId() int32 {
	if m != nil && m.L2EpcId != nil {
		return *m.L2EpcId
	}
	return 0
}

func (m *Tag) GetL3EpcId() int32 {
	if m != nil && m.L3EpcId != nil {
		return *m.L3EpcId
	}
	return 0
}

func (m *Tag) GetL2DeviceId() uint32 {
	if m != nil && m.L2DeviceId != nil {
		return *m.L2DeviceId
	}
	return 0
}

func (m *Tag) GetL2DeviceType() DeviceType {
	if m != nil && m.L2DeviceType != nil {
		return *m.L2DeviceType
	}
	return DeviceType_VM
}

func (m *Tag) GetL3DeviceId() uint32 {
	if m != nil && m.L3DeviceId != nil {
		return *m.L3DeviceId
	}
	return 0
}

func (m *Tag) GetL3DeviceType() DeviceType {
	if m != nil && m.L3DeviceType != nil {
		return *m.L3DeviceType
	}
	return DeviceType_VM
}

func (m *Tag) GetHostId() uint32 {
	if m != nil && m.HostId != nil {
		return *m.HostId
	}
	return 0
}

func (m *Tag) GetIsIpv6() uint32 {
	if m != nil && m.IsIpv6 != nil {
		return *m.IsIpv6
	}
	return 0
}

func (m *Tag) GetIp6() string {
	if m != nil && m.Ip6 != nil {
		return *m.Ip6
	}
	return ""
}

func (m *Tag) GetIp_0() uint32 {
	if m != nil && m.Ip_0 != nil {
		return *m.Ip_0
	}
	return 0
}

func (m *Tag) GetIp_1() uint32 {
	if m != nil && m.Ip_1 != nil {
		return *m.Ip_1
	}
	return 0
}

func (m *Tag) GetMac_0() uint64 {
	if m != nil && m.Mac_0 != nil {
		return *m.Mac_0
	}
	return 0
}

func (m *Tag) GetMac_1() uint64 {
	if m != nil && m.Mac_1 != nil {
		return *m.Mac_1
	}
	return 0
}

func (m *Tag) GetGroupId_0() int32 {
	if m != nil && m.GroupId_0 != nil {
		return *m.GroupId_0
	}
	return 0
}

func (m *Tag) GetGroupId_1() int32 {
	if m != nil && m.GroupId_1 != nil {
		return *m.GroupId_1
	}
	return 0
}

func (m *Tag) GetL2EpcId_0() int32 {
	if m != nil && m.L2EpcId_0 != nil {
		return *m.L2EpcId_0
	}
	return 0
}

func (m *Tag) GetL2EpcId_1() int32 {
	if m != nil && m.L2EpcId_1 != nil {
		return *m.L2EpcId_1
	}
	return 0
}

func (m *Tag) GetL3EpcId_0() int32 {
	if m != nil && m.L3EpcId_0 != nil {
		return *m.L3EpcId_0
	}
	return 0
}

func (m *Tag) GetL3EpcId_1() int32 {
	if m != nil && m.L3EpcId_1 != nil {
		return *m.L3EpcId_1
	}
	return 0
}

func (m *Tag) GetL2DeviceId_0() uint32 {
	if m != nil && m.L2DeviceId_0 != nil {
		return *m.L2DeviceId_0
	}
	return 0
}

func (m *Tag) GetL2DeviceType_0() DeviceType {
	if m != nil && m.L2DeviceType_0 != nil {
		return *m.L2DeviceType_0
	}
	return DeviceType_VM
}

func (m *Tag) GetL2DeviceId_1() uint32 {
	if m != nil && m.L2DeviceId_1 != nil {
		return *m.L2DeviceId_1
	}
	return 0
}

func (m *Tag) GetL2DeviceType_1() DeviceType {
	if m != nil && m.L2DeviceType_1 != nil {
		return *m.L2DeviceType_1
	}
	return DeviceType_VM
}

func (m *Tag) GetL3DeviceId_0() uint32 {
	if m != nil && m.L3DeviceId_0 != nil {
		return *m.L3DeviceId_0
	}
	return 0
}

func (m *Tag) GetL3DeviceType_0() DeviceType {
	if m != nil && m.L3DeviceType_0 != nil {
		return *m.L3DeviceType_0
	}
	return DeviceType_VM
}

func (m *Tag) GetL3DeviceId_1() uint32 {
	if m != nil && m.L3DeviceId_1 != nil {
		return *m.L3DeviceId_1
	}
	return 0
}

func (m *Tag) GetL3DeviceType_1() DeviceType {
	if m != nil && m.L3DeviceType_1 != nil {
		return *m.L3DeviceType_1
	}
	return DeviceType_VM
}

func (m *Tag) GetHostId_0() uint32 {
	if m != nil && m.HostId_0 != nil {
		return *m.HostId_0
	}
	return 0
}

func (m *Tag) GetHostId_1() uint32 {
	if m != nil && m.HostId_1 != nil {
		return *m.HostId_1
	}
	return 0
}

func (m *Tag) GetIp6_0() string {
	if m != nil && m.Ip6_0 != nil {
		return *m.Ip6_0
	}
	return ""
}

func (m *Tag) GetIp6_1() string {
	if m != nil && m.Ip6_1 != nil {
		return *m.Ip6_1
	}
	return ""
}

func (m *Tag) GetDirection() Direction {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return Direction_CLIENT_TO_SERVER
}

func (m *Tag) GetAclGid() uint32 {
	if m != nil && m.AclGid != nil {
		return *m.AclGid
	}
	return 0
}

func (m *Tag) GetVlanId() uint32 {
	if m != nil && m.VlanId != nil {
		return *m.VlanId
	}
	return 0
}

func (m *Tag) GetProtocol() uint32 {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return 0
}

func (m *Tag) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *Tag) GetAclDirection() AclDirection {
	if m != nil && m.AclDirection != nil {
		return *m.AclDirection
	}
	return AclDirection_FORWARD
}

func (m *Tag) GetVtap() uint32 {
	if m != nil && m.Vtap != nil {
		return *m.Vtap
	}
	return 0
}

func (m *Tag) GetTapType() uint32 {
	if m != nil && m.TapType != nil {
		return *m.TapType
	}
	return 0
}

func (m *Tag) GetSubnetId() uint32 {
	if m != nil && m.SubnetId != nil {
		return *m.SubnetId
	}
	return 0
}

func (m *Tag) GetAclId() uint32 {
	if m != nil && m.AclId != nil {
		return *m.AclId
	}
	return 0
}

func (m *Tag) GetPodNodeId() uint32 {
	if m != nil && m.PodNodeId != nil {
		return *m.PodNodeId
	}
	return 0
}

func (m *Tag) GetSide() uint32 {
	if m != nil && m.Side != nil {
		return *m.Side
	}
	return 0
}

func (m *Tag) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *Tag) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *Tag) GetIsp() string {
	if m != nil && m.Isp != nil {
		return *m.Isp
	}
	return ""
}

type UsageStats struct {
	PacketTx             *uint64  `protobuf:"varint,1,opt,name=packet_tx,json=packetTx" json:"packet_tx,omitempty"`
	PacketRx             *uint64  `protobuf:"varint,2,opt,name=packet_rx,json=packetRx" json:"packet_rx,omitempty"`
	Packet               *uint64  `protobuf:"varint,3,opt,name=packet" json:"packet,omitempty"`
	BitTx                *uint64  `protobuf:"varint,4,opt,name=bit_tx,json=bitTx" json:"bit_tx,omitempty"`
	BitRx                *uint64  `protobuf:"varint,5,opt,name=bit_rx,json=bitRx" json:"bit_rx,omitempty"`
	Bit                  *uint64  `protobuf:"varint,6,opt,name=bit" json:"bit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsageStats) Reset()         { *m = UsageStats{} }
func (m *UsageStats) String() string { return proto.CompactTextString(m) }
func (*UsageStats) ProtoMessage()    {}
func (*UsageStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{1}
}
func (m *UsageStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageStats.Merge(m, src)
}
func (m *UsageStats) XXX_Size() int {
	return m.Size()
}
func (m *UsageStats) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageStats.DiscardUnknown(m)
}

var xxx_messageInfo_UsageStats proto.InternalMessageInfo

func (m *UsageStats) GetPacketTx() uint64 {
	if m != nil && m.PacketTx != nil {
		return *m.PacketTx
	}
	return 0
}

func (m *UsageStats) GetPacketRx() uint64 {
	if m != nil && m.PacketRx != nil {
		return *m.PacketRx
	}
	return 0
}

func (m *UsageStats) GetPacket() uint64 {
	if m != nil && m.Packet != nil {
		return *m.Packet
	}
	return 0
}

func (m *UsageStats) GetBitTx() uint64 {
	if m != nil && m.BitTx != nil {
		return *m.BitTx
	}
	return 0
}

func (m *UsageStats) GetBitRx() uint64 {
	if m != nil && m.BitRx != nil {
		return *m.BitRx
	}
	return 0
}

func (m *UsageStats) GetBit() uint64 {
	if m != nil && m.Bit != nil {
		return *m.Bit
	}
	return 0
}

type UsageMeter struct {
	Sum                  *UsageStats `protobuf:"bytes,1,opt,name=sum" json:"sum,omitempty"`
	Max                  *UsageStats `protobuf:"bytes,2,opt,name=max" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UsageMeter) Reset()         { *m = UsageMeter{} }
func (m *UsageMeter) String() string { return proto.CompactTextString(m) }
func (*UsageMeter) ProtoMessage()    {}
func (*UsageMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{2}
}
func (m *UsageMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageMeter.Merge(m, src)
}
func (m *UsageMeter) XXX_Size() int {
	return m.Size()
}
func (m *UsageMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageMeter.DiscardUnknown(m)
}

var xxx_messageInfo_UsageMeter proto.InternalMessageInfo

func (m *UsageMeter) GetSum() *UsageStats {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *UsageMeter) GetMax() *UsageStats {
	if m != nil {
		return m.Max
	}
	return nil
}

type PerfStats struct {
	FlowCount            *uint64  `protobuf:"varint,1,opt,name=flow_count,json=flowCount" json:"flow_count,omitempty"`
	NewFlowCount         *uint64  `protobuf:"varint,2,opt,name=new_flow_count,json=newFlowCount" json:"new_flow_count,omitempty"`
	ClosedFlowCount      *uint64  `protobuf:"varint,3,opt,name=closed_flow_count,json=closedFlowCount" json:"closed_flow_count,omitempty"`
	RetransFlowCount     *uint64  `protobuf:"varint,4,opt,name=retrans_flow_count,json=retransFlowCount" json:"retrans_flow_count,omitempty"`
	HalfOpenFlowCount    *uint64  `protobuf:"varint,5,opt,name=half_open_flow_count,json=halfOpenFlowCount" json:"half_open_flow_count,omitempty"`
	PacketTx             *uint64  `protobuf:"varint,6,opt,name=packet_tx,json=packetTx" json:"packet_tx,omitempty"`
	PacketRx             *uint64  `protobuf:"varint,7,opt,name=packet_rx,json=packetRx" json:"packet_rx,omitempty"`
	RetransCntTx         *uint64  `protobuf:"varint,8,opt,name=retrans_cnt_tx,json=retransCntTx" json:"retrans_cnt_tx,omitempty"`
	RetransCntRx         *uint64  `protobuf:"varint,9,opt,name=retrans_cnt_rx,json=retransCntRx" json:"retrans_cnt_rx,omitempty"`
	RttSyn               *uint64  `protobuf:"varint,11,opt,name=rtt_syn,json=rttSyn" json:"rtt_syn,omitempty"`
	RttSynFlow           *uint64  `protobuf:"varint,12,opt,name=rtt_syn_flow,json=rttSynFlow" json:"rtt_syn_flow,omitempty"`
	RttAvg               *uint64  `protobuf:"varint,13,opt,name=rtt_avg,json=rttAvg" json:"rtt_avg,omitempty"`
	RttAvgFlow           *uint64  `protobuf:"varint,14,opt,name=rtt_avg_flow,json=rttAvgFlow" json:"rtt_avg_flow,omitempty"`
	ArtAvg               *uint64  `protobuf:"varint,15,opt,name=art_avg,json=artAvg" json:"art_avg,omitempty"`
	ArtAvgFlow           *uint64  `protobuf:"varint,16,opt,name=art_avg_flow,json=artAvgFlow" json:"art_avg_flow,omitempty"`
	ZeroWndCntTx         *uint64  `protobuf:"varint,21,opt,name=zero_wnd_cnt_tx,json=zeroWndCntTx" json:"zero_wnd_cnt_tx,omitempty"`
	ZeroWndCntRx         *uint64  `protobuf:"varint,22,opt,name=zero_wnd_cnt_rx,json=zeroWndCntRx" json:"zero_wnd_cnt_rx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PerfStats) Reset()         { *m = PerfStats{} }
func (m *PerfStats) String() string { return proto.CompactTextString(m) }
func (*PerfStats) ProtoMessage()    {}
func (*PerfStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{3}
}
func (m *PerfStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerfStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerfStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerfStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerfStats.Merge(m, src)
}
func (m *PerfStats) XXX_Size() int {
	return m.Size()
}
func (m *PerfStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PerfStats.DiscardUnknown(m)
}

var xxx_messageInfo_PerfStats proto.InternalMessageInfo

func (m *PerfStats) GetFlowCount() uint64 {
	if m != nil && m.FlowCount != nil {
		return *m.FlowCount
	}
	return 0
}

func (m *PerfStats) GetNewFlowCount() uint64 {
	if m != nil && m.NewFlowCount != nil {
		return *m.NewFlowCount
	}
	return 0
}

func (m *PerfStats) GetClosedFlowCount() uint64 {
	if m != nil && m.ClosedFlowCount != nil {
		return *m.ClosedFlowCount
	}
	return 0
}

func (m *PerfStats) GetRetransFlowCount() uint64 {
	if m != nil && m.RetransFlowCount != nil {
		return *m.RetransFlowCount
	}
	return 0
}

func (m *PerfStats) GetHalfOpenFlowCount() uint64 {
	if m != nil && m.HalfOpenFlowCount != nil {
		return *m.HalfOpenFlowCount
	}
	return 0
}

func (m *PerfStats) GetPacketTx() uint64 {
	if m != nil && m.PacketTx != nil {
		return *m.PacketTx
	}
	return 0
}

func (m *PerfStats) GetPacketRx() uint64 {
	if m != nil && m.PacketRx != nil {
		return *m.PacketRx
	}
	return 0
}

func (m *PerfStats) GetRetransCntTx() uint64 {
	if m != nil && m.RetransCntTx != nil {
		return *m.RetransCntTx
	}
	return 0
}

func (m *PerfStats) GetRetransCntRx() uint64 {
	if m != nil && m.RetransCntRx != nil {
		return *m.RetransCntRx
	}
	return 0
}

func (m *PerfStats) GetRttSyn() uint64 {
	if m != nil && m.RttSyn != nil {
		return *m.RttSyn
	}
	return 0
}

func (m *PerfStats) GetRttSynFlow() uint64 {
	if m != nil && m.RttSynFlow != nil {
		return *m.RttSynFlow
	}
	return 0
}

func (m *PerfStats) GetRttAvg() uint64 {
	if m != nil && m.RttAvg != nil {
		return *m.RttAvg
	}
	return 0
}

func (m *PerfStats) GetRttAvgFlow() uint64 {
	if m != nil && m.RttAvgFlow != nil {
		return *m.RttAvgFlow
	}
	return 0
}

func (m *PerfStats) GetArtAvg() uint64 {
	if m != nil && m.ArtAvg != nil {
		return *m.ArtAvg
	}
	return 0
}

func (m *PerfStats) GetArtAvgFlow() uint64 {
	if m != nil && m.ArtAvgFlow != nil {
		return *m.ArtAvgFlow
	}
	return 0
}

func (m *PerfStats) GetZeroWndCntTx() uint64 {
	if m != nil && m.ZeroWndCntTx != nil {
		return *m.ZeroWndCntTx
	}
	return 0
}

func (m *PerfStats) GetZeroWndCntRx() uint64 {
	if m != nil && m.ZeroWndCntRx != nil {
		return *m.ZeroWndCntRx
	}
	return 0
}

type RttStats struct {
	RttSyn               *uint64  `protobuf:"varint,1,opt,name=rtt_syn,json=rttSyn" json:"rtt_syn,omitempty"`
	RttAvg               *uint64  `protobuf:"varint,2,opt,name=rtt_avg,json=rttAvg" json:"rtt_avg,omitempty"`
	ArtAvg               *uint64  `protobuf:"varint,3,opt,name=art_avg,json=artAvg" json:"art_avg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RttStats) Reset()         { *m = RttStats{} }
func (m *RttStats) String() string { return proto.CompactTextString(m) }
func (*RttStats) ProtoMessage()    {}
func (*RttStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{4}
}
func (m *RttStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RttStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RttStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RttStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RttStats.Merge(m, src)
}
func (m *RttStats) XXX_Size() int {
	return m.Size()
}
func (m *RttStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RttStats.DiscardUnknown(m)
}

var xxx_messageInfo_RttStats proto.InternalMessageInfo

func (m *RttStats) GetRttSyn() uint64 {
	if m != nil && m.RttSyn != nil {
		return *m.RttSyn
	}
	return 0
}

func (m *RttStats) GetRttAvg() uint64 {
	if m != nil && m.RttAvg != nil {
		return *m.RttAvg
	}
	return 0
}

func (m *RttStats) GetArtAvg() uint64 {
	if m != nil && m.ArtAvg != nil {
		return *m.ArtAvg
	}
	return 0
}

type PerfMeter struct {
	Sum                  *PerfStats `protobuf:"bytes,1,opt,name=sum" json:"sum,omitempty"`
	Max                  *RttStats  `protobuf:"bytes,2,opt,name=max" json:"max,omitempty"`
	Min                  *RttStats  `protobuf:"bytes,3,opt,name=min" json:"min,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PerfMeter) Reset()         { *m = PerfMeter{} }
func (m *PerfMeter) String() string { return proto.CompactTextString(m) }
func (*PerfMeter) ProtoMessage()    {}
func (*PerfMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{5}
}
func (m *PerfMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerfMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerfMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerfMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerfMeter.Merge(m, src)
}
func (m *PerfMeter) XXX_Size() int {
	return m.Size()
}
func (m *PerfMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_PerfMeter.DiscardUnknown(m)
}

var xxx_messageInfo_PerfMeter proto.InternalMessageInfo

func (m *PerfMeter) GetSum() *PerfStats {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *PerfMeter) GetMax() *RttStats {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *PerfMeter) GetMin() *RttStats {
	if m != nil {
		return m.Min
	}
	return nil
}

type GeoMeter struct {
	SumClosedFlowCount      *uint64  `protobuf:"varint,1,opt,name=sum_closed_flow_count,json=sumClosedFlowCount" json:"sum_closed_flow_count,omitempty"`
	SumAbnormalFlowCount    *uint64  `protobuf:"varint,2,opt,name=sum_abnormal_flow_count,json=sumAbnormalFlowCount" json:"sum_abnormal_flow_count,omitempty"`
	SumClosedFlowDurationUs *uint64  `protobuf:"varint,3,opt,name=sum_closed_flow_duration_us,json=sumClosedFlowDurationUs" json:"sum_closed_flow_duration_us,omitempty"`
	SumPacketTx             *uint64  `protobuf:"varint,5,opt,name=sum_packet_tx,json=sumPacketTx" json:"sum_packet_tx,omitempty"`
	SumPacketRx             *uint64  `protobuf:"varint,6,opt,name=sum_packet_rx,json=sumPacketRx" json:"sum_packet_rx,omitempty"`
	SumBitTx                *uint64  `protobuf:"varint,7,opt,name=sum_bit_tx,json=sumBitTx" json:"sum_bit_tx,omitempty"`
	SumBitRx                *uint64  `protobuf:"varint,8,opt,name=sum_bit_rx,json=sumBitRx" json:"sum_bit_rx,omitempty"`
	SumRttSynClient         *uint64  `protobuf:"varint,11,opt,name=sum_rtt_syn_client,json=sumRttSynClient" json:"sum_rtt_syn_client,omitempty"`
	SumRttSynClientFlow     *uint64  `protobuf:"varint,12,opt,name=sum_rtt_syn_client_flow,json=sumRttSynClientFlow" json:"sum_rtt_syn_client_flow,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *GeoMeter) Reset()         { *m = GeoMeter{} }
func (m *GeoMeter) String() string { return proto.CompactTextString(m) }
func (*GeoMeter) ProtoMessage()    {}
func (*GeoMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{6}
}
func (m *GeoMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoMeter.Merge(m, src)
}
func (m *GeoMeter) XXX_Size() int {
	return m.Size()
}
func (m *GeoMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoMeter.DiscardUnknown(m)
}

var xxx_messageInfo_GeoMeter proto.InternalMessageInfo

func (m *GeoMeter) GetSumClosedFlowCount() uint64 {
	if m != nil && m.SumClosedFlowCount != nil {
		return *m.SumClosedFlowCount
	}
	return 0
}

func (m *GeoMeter) GetSumAbnormalFlowCount() uint64 {
	if m != nil && m.SumAbnormalFlowCount != nil {
		return *m.SumAbnormalFlowCount
	}
	return 0
}

func (m *GeoMeter) GetSumClosedFlowDurationUs() uint64 {
	if m != nil && m.SumClosedFlowDurationUs != nil {
		return *m.SumClosedFlowDurationUs
	}
	return 0
}

func (m *GeoMeter) GetSumPacketTx() uint64 {
	if m != nil && m.SumPacketTx != nil {
		return *m.SumPacketTx
	}
	return 0
}

func (m *GeoMeter) GetSumPacketRx() uint64 {
	if m != nil && m.SumPacketRx != nil {
		return *m.SumPacketRx
	}
	return 0
}

func (m *GeoMeter) GetSumBitTx() uint64 {
	if m != nil && m.SumBitTx != nil {
		return *m.SumBitTx
	}
	return 0
}

func (m *GeoMeter) GetSumBitRx() uint64 {
	if m != nil && m.SumBitRx != nil {
		return *m.SumBitRx
	}
	return 0
}

func (m *GeoMeter) GetSumRttSynClient() uint64 {
	if m != nil && m.SumRttSynClient != nil {
		return *m.SumRttSynClient
	}
	return 0
}

func (m *GeoMeter) GetSumRttSynClientFlow() uint64 {
	if m != nil && m.SumRttSynClientFlow != nil {
		return *m.SumRttSynClientFlow
	}
	return 0
}

type FpsMeter struct {
	SumFlowCount         *uint64  `protobuf:"varint,1,opt,name=sum_flow_count,json=sumFlowCount" json:"sum_flow_count,omitempty"`
	SumNewFlowCount      *uint64  `protobuf:"varint,2,opt,name=sum_new_flow_count,json=sumNewFlowCount" json:"sum_new_flow_count,omitempty"`
	SumClosedFlowCount   *uint64  `protobuf:"varint,3,opt,name=sum_closed_flow_count,json=sumClosedFlowCount" json:"sum_closed_flow_count,omitempty"`
	MaxFlowCount         *uint64  `protobuf:"varint,11,opt,name=max_flow_count,json=maxFlowCount" json:"max_flow_count,omitempty"`
	MaxNewFlowCount      *uint64  `protobuf:"varint,12,opt,name=max_new_flow_count,json=maxNewFlowCount" json:"max_new_flow_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FpsMeter) Reset()         { *m = FpsMeter{} }
func (m *FpsMeter) String() string { return proto.CompactTextString(m) }
func (*FpsMeter) ProtoMessage()    {}
func (*FpsMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{7}
}
func (m *FpsMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FpsMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FpsMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FpsMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FpsMeter.Merge(m, src)
}
func (m *FpsMeter) XXX_Size() int {
	return m.Size()
}
func (m *FpsMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_FpsMeter.DiscardUnknown(m)
}

var xxx_messageInfo_FpsMeter proto.InternalMessageInfo

func (m *FpsMeter) GetSumFlowCount() uint64 {
	if m != nil && m.SumFlowCount != nil {
		return *m.SumFlowCount
	}
	return 0
}

func (m *FpsMeter) GetSumNewFlowCount() uint64 {
	if m != nil && m.SumNewFlowCount != nil {
		return *m.SumNewFlowCount
	}
	return 0
}

func (m *FpsMeter) GetSumClosedFlowCount() uint64 {
	if m != nil && m.SumClosedFlowCount != nil {
		return *m.SumClosedFlowCount
	}
	return 0
}

func (m *FpsMeter) GetMaxFlowCount() uint64 {
	if m != nil && m.MaxFlowCount != nil {
		return *m.MaxFlowCount
	}
	return 0
}

func (m *FpsMeter) GetMaxNewFlowCount() uint64 {
	if m != nil && m.MaxNewFlowCount != nil {
		return *m.MaxNewFlowCount
	}
	return 0
}

type FlowMeter struct {
	SumFlowCount         *uint64  `protobuf:"varint,1,opt,name=sum_flow_count,json=sumFlowCount" json:"sum_flow_count,omitempty"`
	SumNewFlowCount      *uint64  `protobuf:"varint,2,opt,name=sum_new_flow_count,json=sumNewFlowCount" json:"sum_new_flow_count,omitempty"`
	SumClosedFlowCount   *uint64  `protobuf:"varint,3,opt,name=sum_closed_flow_count,json=sumClosedFlowCount" json:"sum_closed_flow_count,omitempty"`
	SumPacketTx          *uint64  `protobuf:"varint,4,opt,name=sum_packet_tx,json=sumPacketTx" json:"sum_packet_tx,omitempty"`
	SumPacketRx          *uint64  `protobuf:"varint,5,opt,name=sum_packet_rx,json=sumPacketRx" json:"sum_packet_rx,omitempty"`
	SumPacket            *uint64  `protobuf:"varint,6,opt,name=sum_packet,json=sumPacket" json:"sum_packet,omitempty"`
	SumBitTx             *uint64  `protobuf:"varint,7,opt,name=sum_bit_tx,json=sumBitTx" json:"sum_bit_tx,omitempty"`
	SumBitRx             *uint64  `protobuf:"varint,8,opt,name=sum_bit_rx,json=sumBitRx" json:"sum_bit_rx,omitempty"`
	SumBit               *uint64  `protobuf:"varint,9,opt,name=sum_bit,json=sumBit" json:"sum_bit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowMeter) Reset()         { *m = FlowMeter{} }
func (m *FlowMeter) String() string { return proto.CompactTextString(m) }
func (*FlowMeter) ProtoMessage()    {}
func (*FlowMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{8}
}
func (m *FlowMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowMeter.Merge(m, src)
}
func (m *FlowMeter) XXX_Size() int {
	return m.Size()
}
func (m *FlowMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowMeter.DiscardUnknown(m)
}

var xxx_messageInfo_FlowMeter proto.InternalMessageInfo

func (m *FlowMeter) GetSumFlowCount() uint64 {
	if m != nil && m.SumFlowCount != nil {
		return *m.SumFlowCount
	}
	return 0
}

func (m *FlowMeter) GetSumNewFlowCount() uint64 {
	if m != nil && m.SumNewFlowCount != nil {
		return *m.SumNewFlowCount
	}
	return 0
}

func (m *FlowMeter) GetSumClosedFlowCount() uint64 {
	if m != nil && m.SumClosedFlowCount != nil {
		return *m.SumClosedFlowCount
	}
	return 0
}

func (m *FlowMeter) GetSumPacketTx() uint64 {
	if m != nil && m.SumPacketTx != nil {
		return *m.SumPacketTx
	}
	return 0
}

func (m *FlowMeter) GetSumPacketRx() uint64 {
	if m != nil && m.SumPacketRx != nil {
		return *m.SumPacketRx
	}
	return 0
}

func (m *FlowMeter) GetSumPacket() uint64 {
	if m != nil && m.SumPacket != nil {
		return *m.SumPacket
	}
	return 0
}

func (m *FlowMeter) GetSumBitTx() uint64 {
	if m != nil && m.SumBitTx != nil {
		return *m.SumBitTx
	}
	return 0
}

func (m *FlowMeter) GetSumBitRx() uint64 {
	if m != nil && m.SumBitRx != nil {
		return *m.SumBitRx
	}
	return 0
}

func (m *FlowMeter) GetSumBit() uint64 {
	if m != nil && m.SumBit != nil {
		return *m.SumBit
	}
	return 0
}

type ConsoleLogMeter struct {
	SumPacketTx             *uint64  `protobuf:"varint,1,opt,name=sum_packet_tx,json=sumPacketTx" json:"sum_packet_tx,omitempty"`
	SumPacketRx             *uint64  `protobuf:"varint,2,opt,name=sum_packet_rx,json=sumPacketRx" json:"sum_packet_rx,omitempty"`
	SumClosedFlowCount      *uint64  `protobuf:"varint,3,opt,name=sum_closed_flow_count,json=sumClosedFlowCount" json:"sum_closed_flow_count,omitempty"`
	SumClosedFlowDurationUs *uint64  `protobuf:"varint,4,opt,name=sum_closed_flow_duration_us,json=sumClosedFlowDurationUs" json:"sum_closed_flow_duration_us,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ConsoleLogMeter) Reset()         { *m = ConsoleLogMeter{} }
func (m *ConsoleLogMeter) String() string { return proto.CompactTextString(m) }
func (*ConsoleLogMeter) ProtoMessage()    {}
func (*ConsoleLogMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{9}
}
func (m *ConsoleLogMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsoleLogMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsoleLogMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsoleLogMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsoleLogMeter.Merge(m, src)
}
func (m *ConsoleLogMeter) XXX_Size() int {
	return m.Size()
}
func (m *ConsoleLogMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsoleLogMeter.DiscardUnknown(m)
}

var xxx_messageInfo_ConsoleLogMeter proto.InternalMessageInfo

func (m *ConsoleLogMeter) GetSumPacketTx() uint64 {
	if m != nil && m.SumPacketTx != nil {
		return *m.SumPacketTx
	}
	return 0
}

func (m *ConsoleLogMeter) GetSumPacketRx() uint64 {
	if m != nil && m.SumPacketRx != nil {
		return *m.SumPacketRx
	}
	return 0
}

func (m *ConsoleLogMeter) GetSumClosedFlowCount() uint64 {
	if m != nil && m.SumClosedFlowCount != nil {
		return *m.SumClosedFlowCount
	}
	return 0
}

func (m *ConsoleLogMeter) GetSumClosedFlowDurationUs() uint64 {
	if m != nil && m.SumClosedFlowDurationUs != nil {
		return *m.SumClosedFlowDurationUs
	}
	return 0
}

type TypeMeter struct {
	SumCountL_0S1S       *uint64  `protobuf:"varint,11,opt,name=sum_count_l_0s1s,json=sumCountL0s1s" json:"sum_count_l_0s1s,omitempty"`
	SumCountL_1S5S       *uint64  `protobuf:"varint,12,opt,name=sum_count_l_1s5s,json=sumCountL1s5s" json:"sum_count_l_1s5s,omitempty"`
	SumCountL_5S10S      *uint64  `protobuf:"varint,13,opt,name=sum_count_l_5s10s,json=sumCountL5s10s" json:"sum_count_l_5s10s,omitempty"`
	SumCountL_10S1M      *uint64  `protobuf:"varint,14,opt,name=sum_count_l_10s1m,json=sumCountL10s1m" json:"sum_count_l_10s1m,omitempty"`
	SumCountL_1M1H       *uint64  `protobuf:"varint,15,opt,name=sum_count_l_1m1h,json=sumCountL1m1h" json:"sum_count_l_1m1h,omitempty"`
	SumCountL_1H         *uint64  `protobuf:"varint,16,opt,name=sum_count_l_1h,json=sumCountL1h" json:"sum_count_l_1h,omitempty"`
	SumCountE_0K10K      *uint64  `protobuf:"varint,21,opt,name=sum_count_e_0k10k,json=sumCountE0k10k" json:"sum_count_e_0k10k,omitempty"`
	SumCountE_10K100K    *uint64  `protobuf:"varint,22,opt,name=sum_count_e_10k100k,json=sumCountE10k100k" json:"sum_count_e_10k100k,omitempty"`
	SumCountE_100K1M     *uint64  `protobuf:"varint,23,opt,name=sum_count_e_100k1m,json=sumCountE100k1m" json:"sum_count_e_100k1m,omitempty"`
	SumCountE_1M100M     *uint64  `protobuf:"varint,24,opt,name=sum_count_e_1m100m,json=sumCountE1m100m" json:"sum_count_e_1m100m,omitempty"`
	SumCountE_100M1G     *uint64  `protobuf:"varint,25,opt,name=sum_count_e_100m1g,json=sumCountE100m1g" json:"sum_count_e_100m1g,omitempty"`
	SumCountE_1G         *uint64  `protobuf:"varint,26,opt,name=sum_count_e_1g,json=sumCountE1g" json:"sum_count_e_1g,omitempty"`
	SumCountTCRst        *uint64  `protobuf:"varint,31,opt,name=sum_count_t_c_rst,json=sumCountTCRst" json:"sum_count_t_c_rst,omitempty"`
	SumCountTCHalfOpen   *uint64  `protobuf:"varint,32,opt,name=sum_count_t_c_half_open,json=sumCountTCHalfOpen" json:"sum_count_t_c_half_open,omitempty"`
	SumCountTCHalfClose  *uint64  `protobuf:"varint,33,opt,name=sum_count_t_c_half_close,json=sumCountTCHalfClose" json:"sum_count_t_c_half_close,omitempty"`
	SumCountTSRst        *uint64  `protobuf:"varint,34,opt,name=sum_count_t_s_rst,json=sumCountTSRst" json:"sum_count_t_s_rst,omitempty"`
	SumCountTSHalfOpen   *uint64  `protobuf:"varint,35,opt,name=sum_count_t_s_half_open,json=sumCountTSHalfOpen" json:"sum_count_t_s_half_open,omitempty"`
	SumCountTSHalfClose  *uint64  `protobuf:"varint,36,opt,name=sum_count_t_s_half_close,json=sumCountTSHalfClose" json:"sum_count_t_s_half_close,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeMeter) Reset()         { *m = TypeMeter{} }
func (m *TypeMeter) String() string { return proto.CompactTextString(m) }
func (*TypeMeter) ProtoMessage()    {}
func (*TypeMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{10}
}
func (m *TypeMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeMeter.Merge(m, src)
}
func (m *TypeMeter) XXX_Size() int {
	return m.Size()
}
func (m *TypeMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeMeter.DiscardUnknown(m)
}

var xxx_messageInfo_TypeMeter proto.InternalMessageInfo

func (m *TypeMeter) GetSumCountL_0S1S() uint64 {
	if m != nil && m.SumCountL_0S1S != nil {
		return *m.SumCountL_0S1S
	}
	return 0
}

func (m *TypeMeter) GetSumCountL_1S5S() uint64 {
	if m != nil && m.SumCountL_1S5S != nil {
		return *m.SumCountL_1S5S
	}
	return 0
}

func (m *TypeMeter) GetSumCountL_5S10S() uint64 {
	if m != nil && m.SumCountL_5S10S != nil {
		return *m.SumCountL_5S10S
	}
	return 0
}

func (m *TypeMeter) GetSumCountL_10S1M() uint64 {
	if m != nil && m.SumCountL_10S1M != nil {
		return *m.SumCountL_10S1M
	}
	return 0
}

func (m *TypeMeter) GetSumCountL_1M1H() uint64 {
	if m != nil && m.SumCountL_1M1H != nil {
		return *m.SumCountL_1M1H
	}
	return 0
}

func (m *TypeMeter) GetSumCountL_1H() uint64 {
	if m != nil && m.SumCountL_1H != nil {
		return *m.SumCountL_1H
	}
	return 0
}

func (m *TypeMeter) GetSumCountE_0K10K() uint64 {
	if m != nil && m.SumCountE_0K10K != nil {
		return *m.SumCountE_0K10K
	}
	return 0
}

func (m *TypeMeter) GetSumCountE_10K100K() uint64 {
	if m != nil && m.SumCountE_10K100K != nil {
		return *m.SumCountE_10K100K
	}
	return 0
}

func (m *TypeMeter) GetSumCountE_100K1M() uint64 {
	if m != nil && m.SumCountE_100K1M != nil {
		return *m.SumCountE_100K1M
	}
	return 0
}

func (m *TypeMeter) GetSumCountE_1M100M() uint64 {
	if m != nil && m.SumCountE_1M100M != nil {
		return *m.SumCountE_1M100M
	}
	return 0
}

func (m *TypeMeter) GetSumCountE_100M1G() uint64 {
	if m != nil && m.SumCountE_100M1G != nil {
		return *m.SumCountE_100M1G
	}
	return 0
}

func (m *TypeMeter) GetSumCountE_1G() uint64 {
	if m != nil && m.SumCountE_1G != nil {
		return *m.SumCountE_1G
	}
	return 0
}

func (m *TypeMeter) GetSumCountTCRst() uint64 {
	if m != nil && m.SumCountTCRst != nil {
		return *m.SumCountTCRst
	}
	return 0
}

func (m *TypeMeter) GetSumCountTCHalfOpen() uint64 {
	if m != nil && m.SumCountTCHalfOpen != nil {
		return *m.SumCountTCHalfOpen
	}
	return 0
}

func (m *TypeMeter) GetSumCountTCHalfClose() uint64 {
	if m != nil && m.SumCountTCHalfClose != nil {
		return *m.SumCountTCHalfClose
	}
	return 0
}

func (m *TypeMeter) GetSumCountTSRst() uint64 {
	if m != nil && m.SumCountTSRst != nil {
		return *m.SumCountTSRst
	}
	return 0
}

func (m *TypeMeter) GetSumCountTSHalfOpen() uint64 {
	if m != nil && m.SumCountTSHalfOpen != nil {
		return *m.SumCountTSHalfOpen
	}
	return 0
}

func (m *TypeMeter) GetSumCountTSHalfClose() uint64 {
	if m != nil && m.SumCountTSHalfClose != nil {
		return *m.SumCountTSHalfClose
	}
	return 0
}

type VTAPUsageMeter struct {
	TxBytes              *uint64  `protobuf:"varint,1,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	RxBytes              *uint64  `protobuf:"varint,2,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	Bytes                *uint64  `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	TxPackets            *uint64  `protobuf:"varint,4,opt,name=tx_packets,json=txPackets" json:"tx_packets,omitempty"`
	RxPackets            *uint64  `protobuf:"varint,5,opt,name=rx_packets,json=rxPackets" json:"rx_packets,omitempty"`
	Packets              *uint64  `protobuf:"varint,6,opt,name=packets" json:"packets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VTAPUsageMeter) Reset()         { *m = VTAPUsageMeter{} }
func (m *VTAPUsageMeter) String() string { return proto.CompactTextString(m) }
func (*VTAPUsageMeter) ProtoMessage()    {}
func (*VTAPUsageMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{11}
}
func (m *VTAPUsageMeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VTAPUsageMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VTAPUsageMeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VTAPUsageMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VTAPUsageMeter.Merge(m, src)
}
func (m *VTAPUsageMeter) XXX_Size() int {
	return m.Size()
}
func (m *VTAPUsageMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_VTAPUsageMeter.DiscardUnknown(m)
}

var xxx_messageInfo_VTAPUsageMeter proto.InternalMessageInfo

func (m *VTAPUsageMeter) GetTxBytes() uint64 {
	if m != nil && m.TxBytes != nil {
		return *m.TxBytes
	}
	return 0
}

func (m *VTAPUsageMeter) GetRxBytes() uint64 {
	if m != nil && m.RxBytes != nil {
		return *m.RxBytes
	}
	return 0
}

func (m *VTAPUsageMeter) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *VTAPUsageMeter) GetTxPackets() uint64 {
	if m != nil && m.TxPackets != nil {
		return *m.TxPackets
	}
	return 0
}

func (m *VTAPUsageMeter) GetRxPackets() uint64 {
	if m != nil && m.RxPackets != nil {
		return *m.RxPackets
	}
	return 0
}

func (m *VTAPUsageMeter) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

type Meter struct {
	Usage                *UsageMeter      `protobuf:"bytes,1,opt,name=usage" json:"usage,omitempty"`
	Perf                 *PerfMeter       `protobuf:"bytes,2,opt,name=perf" json:"perf,omitempty"`
	Geo                  *GeoMeter        `protobuf:"bytes,3,opt,name=geo" json:"geo,omitempty"`
	Flow                 *FlowMeter       `protobuf:"bytes,4,opt,name=flow" json:"flow,omitempty"`
	ConsoleLog           *ConsoleLogMeter `protobuf:"bytes,6,opt,name=console_log,json=consoleLog" json:"console_log,omitempty"`
	Type                 *TypeMeter       `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	Fps                  *FpsMeter        `protobuf:"bytes,9,opt,name=fps" json:"fps,omitempty"`
	VtapUsage            *VTAPUsageMeter  `protobuf:"bytes,10,opt,name=vtap_usage,json=vtapUsage" json:"vtap_usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Meter) Reset()         { *m = Meter{} }
func (m *Meter) String() string { return proto.CompactTextString(m) }
func (*Meter) ProtoMessage()    {}
func (*Meter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{12}
}
func (m *Meter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Meter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Meter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Meter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meter.Merge(m, src)
}
func (m *Meter) XXX_Size() int {
	return m.Size()
}
func (m *Meter) XXX_DiscardUnknown() {
	xxx_messageInfo_Meter.DiscardUnknown(m)
}

var xxx_messageInfo_Meter proto.InternalMessageInfo

func (m *Meter) GetUsage() *UsageMeter {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *Meter) GetPerf() *PerfMeter {
	if m != nil {
		return m.Perf
	}
	return nil
}

func (m *Meter) GetGeo() *GeoMeter {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Meter) GetFlow() *FlowMeter {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *Meter) GetConsoleLog() *ConsoleLogMeter {
	if m != nil {
		return m.ConsoleLog
	}
	return nil
}

func (m *Meter) GetType() *TypeMeter {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Meter) GetFps() *FpsMeter {
	if m != nil {
		return m.Fps
	}
	return nil
}

func (m *Meter) GetVtapUsage() *VTAPUsageMeter {
	if m != nil {
		return m.VtapUsage
	}
	return nil
}

type ZeroHeader struct {
	Timestamp            *uint32  `protobuf:"fixed32,1,req,name=timestamp" json:"timestamp,omitempty"`
	Sequence             *uint32  `protobuf:"fixed32,2,req,name=sequence" json:"sequence,omitempty"`
	Hash                 *uint32  `protobuf:"fixed32,3,req,name=hash" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZeroHeader) Reset()         { *m = ZeroHeader{} }
func (m *ZeroHeader) String() string { return proto.CompactTextString(m) }
func (*ZeroHeader) ProtoMessage()    {}
func (*ZeroHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{13}
}
func (m *ZeroHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroHeader.Merge(m, src)
}
func (m *ZeroHeader) XXX_Size() int {
	return m.Size()
}
func (m *ZeroHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroHeader proto.InternalMessageInfo

func (m *ZeroHeader) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ZeroHeader) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *ZeroHeader) GetHash() uint32 {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return 0
}

type ZeroDocument struct {
	Timestamp            *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Tag                  *Tag     `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	Meter                *Meter   `protobuf:"bytes,3,opt,name=meter" json:"meter,omitempty"`
	ActionFlags          *uint32  `protobuf:"varint,4,opt,name=action_flags,json=actionFlags" json:"action_flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZeroDocument) Reset()         { *m = ZeroDocument{} }
func (m *ZeroDocument) String() string { return proto.CompactTextString(m) }
func (*ZeroDocument) ProtoMessage()    {}
func (*ZeroDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_8653b30b2dcf71f2, []int{14}
}
func (m *ZeroDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroDocument.Merge(m, src)
}
func (m *ZeroDocument) XXX_Size() int {
	return m.Size()
}
func (m *ZeroDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroDocument.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroDocument proto.InternalMessageInfo

func (m *ZeroDocument) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ZeroDocument) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *ZeroDocument) GetMeter() *Meter {
	if m != nil {
		return m.Meter
	}
	return nil
}

func (m *ZeroDocument) GetActionFlags() uint32 {
	if m != nil && m.ActionFlags != nil {
		return *m.ActionFlags
	}
	return 0
}

func init() {
	proto.RegisterEnum("Zero.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("Zero.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("Zero.AclDirection", AclDirection_name, AclDirection_value)
	proto.RegisterType((*Tag)(nil), "Zero.Tag")
	proto.RegisterType((*UsageStats)(nil), "Zero.UsageStats")
	proto.RegisterType((*UsageMeter)(nil), "Zero.UsageMeter")
	proto.RegisterType((*PerfStats)(nil), "Zero.PerfStats")
	proto.RegisterType((*RttStats)(nil), "Zero.RttStats")
	proto.RegisterType((*PerfMeter)(nil), "Zero.PerfMeter")
	proto.RegisterType((*GeoMeter)(nil), "Zero.GeoMeter")
	proto.RegisterType((*FpsMeter)(nil), "Zero.FpsMeter")
	proto.RegisterType((*FlowMeter)(nil), "Zero.FlowMeter")
	proto.RegisterType((*ConsoleLogMeter)(nil), "Zero.ConsoleLogMeter")
	proto.RegisterType((*TypeMeter)(nil), "Zero.TypeMeter")
	proto.RegisterType((*VTAPUsageMeter)(nil), "Zero.VTAPUsageMeter")
	proto.RegisterType((*Meter)(nil), "Zero.Meter")
	proto.RegisterType((*ZeroHeader)(nil), "Zero.ZeroHeader")
	proto.RegisterType((*ZeroDocument)(nil), "Zero.ZeroDocument")
}

func init() { proto.RegisterFile("zero.proto", fileDescriptor_8653b30b2dcf71f2) }

var fileDescriptor_8653b30b2dcf71f2 = []byte{
	// 2181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdb, 0x6e, 0xdc, 0xc8,
	0x11, 0xc5, 0xdc, 0x34, 0x33, 0x35, 0xe3, 0xd1, 0xb8, 0x2d, 0xaf, 0xb9, 0xbe, 0xad, 0x3c, 0xd6,
	0x26, 0xb2, 0x77, 0x6d, 0x93, 0x9a, 0xb5, 0x16, 0x01, 0x36, 0x01, 0xc6, 0x92, 0x6c, 0x0b, 0xeb,
	0xb5, 0x04, 0x6a, 0x6c, 0x63, 0xfd, 0x42, 0x50, 0x24, 0x45, 0x11, 0x1a, 0x5e, 0xc2, 0xe6, 0xc8,
	0x54, 0x7e, 0x22, 0xcf, 0x79, 0xc9, 0x47, 0x24, 0xf9, 0x88, 0x20, 0x40, 0x90, 0x7c, 0xc2, 0xc2,
	0xf9, 0x91, 0xa0, 0xaa, 0x9b, 0xc3, 0x8b, 0xa4, 0x8d, 0x91, 0xbc, 0xe4, 0x8d, 0x5d, 0xe7, 0x54,
	0x75, 0x55, 0x77, 0x55, 0x75, 0x37, 0x01, 0x7e, 0xe7, 0xc4, 0xe1, 0xe3, 0x28, 0x0e, 0x93, 0x90,
	0x35, 0xdf, 0x3b, 0x71, 0x78, 0xf3, 0x91, 0xeb, 0x25, 0xc7, 0xf3, 0xc3, 0xc7, 0x56, 0xe8, 0x3f,
	0x71, 0x43, 0x37, 0x7c, 0x42, 0xe0, 0xe1, 0xfc, 0x88, 0x46, 0x34, 0xa0, 0x2f, 0xa1, 0x34, 0xfa,
	0x53, 0x1f, 0x1a, 0x53, 0xd3, 0x65, 0x03, 0xa8, 0x7b, 0xb6, 0x52, 0x5b, 0xad, 0xad, 0x77, 0xf5,
	0xba, 0x67, 0x33, 0x06, 0x4d, 0x2b, 0xb4, 0x1d, 0xa5, 0xbe, 0x5a, 0x5b, 0x6f, 0xea, 0xf4, 0x4d,
	0x9c, 0x48, 0x69, 0xae, 0xd6, 0xd6, 0xaf, 0xe8, 0x75, 0x2f, 0x62, 0x43, 0x68, 0xf8, 0xa6, 0xa5,
	0xb4, 0x88, 0x82, 0x9f, 0xec, 0x73, 0xe8, 0xb8, 0x71, 0x38, 0x8f, 0x0c, 0xcf, 0x56, 0x96, 0x56,
	0x6b, 0xeb, 0x2d, 0xbd, 0x4d, 0xe3, 0x5d, 0x9b, 0xdd, 0x84, 0xee, 0x6c, 0xc3, 0x70, 0x22, 0x0b,
	0xb1, 0xb6, 0xc0, 0x66, 0x1b, 0x3b, 0x91, 0x25, 0xb1, 0x71, 0x86, 0x75, 0x24, 0x36, 0x16, 0xd8,
	0x2a, 0xf4, 0x67, 0x1b, 0x86, 0xed, 0x9c, 0x7a, 0x96, 0x83, 0x70, 0x97, 0xa6, 0x87, 0xd9, 0xc6,
	0x36, 0x89, 0x76, 0x6d, 0xb6, 0x09, 0x83, 0x9c, 0x91, 0x9c, 0x45, 0x8e, 0x02, 0xab, 0xb5, 0xf5,
	0xc1, 0xc6, 0xf0, 0x31, 0x2e, 0xc8, 0x63, 0xc1, 0x9b, 0x9e, 0x45, 0x8e, 0xde, 0xcf, 0xb4, 0x70,
	0x44, 0x96, 0xc7, 0x05, 0xcb, 0x3d, 0x69, 0x79, 0x5c, 0xb2, 0x3c, 0x2e, 0x59, 0xee, 0x5f, 0x6a,
	0x79, 0x5c, 0xb0, 0x7c, 0x03, 0xda, 0xc7, 0x21, 0x4f, 0xd0, 0xe8, 0x15, 0x32, 0xba, 0x84, 0xc3,
	0x5d, 0x1b, 0x01, 0x8f, 0x1b, 0x5e, 0x74, 0xba, 0xa9, 0x0c, 0x04, 0xe0, 0xf1, 0xdd, 0xe8, 0x74,
	0x13, 0x97, 0xd2, 0x8b, 0x36, 0x95, 0x65, 0x5a, 0x7f, 0xfc, 0x64, 0x57, 0xa1, 0xe9, 0x45, 0x86,
	0xaa, 0x0c, 0x89, 0xd7, 0xf0, 0x22, 0x55, 0x8a, 0x34, 0xe5, 0x6a, 0x26, 0xd2, 0xd8, 0x35, 0x68,
	0xf9, 0xa6, 0x65, 0xa8, 0x0a, 0x13, 0xfb, 0xe4, 0x9b, 0x96, 0x9a, 0x09, 0x35, 0xe5, 0xda, 0x42,
	0xa8, 0xb1, 0xdb, 0x00, 0xd9, 0xd6, 0x18, 0xaa, 0xb2, 0x42, 0x8b, 0xdc, 0x91, 0x9b, 0xa3, 0x96,
	0x50, 0x4d, 0xb9, 0x5e, 0x42, 0x35, 0x76, 0x07, 0x7a, 0x8b, 0xbd, 0x33, 0x54, 0xe5, 0x33, 0x01,
	0xcb, 0xdd, 0x53, 0xcb, 0xb0, 0xa6, 0xdc, 0x28, 0xc1, 0x42, 0x7b, 0x9c, 0x6b, 0x2b, 0x12, 0x1e,
	0x17, 0xb4, 0xc7, 0xb9, 0xf6, 0xe7, 0x25, 0x58, 0x63, 0xf7, 0x8b, 0xbb, 0x4b, 0x06, 0x6e, 0x52,
	0xf8, 0xbd, 0x3c, 0x03, 0x54, 0xf6, 0x2b, 0x18, 0x96, 0x53, 0xc0, 0x50, 0x95, 0x5b, 0x97, 0x6c,
	0xd5, 0x95, 0x62, 0x12, 0xa8, 0xe7, 0xec, 0x6b, 0xca, 0xed, 0xaa, 0x7d, 0xed, 0x02, 0xfb, 0x9a,
	0x72, 0xe7, 0x53, 0xec, 0x0b, 0xff, 0xc7, 0x25, 0xff, 0xef, 0x4a, 0xfb, 0xe3, 0xb2, 0xff, 0xe3,
	0x8a, 0xff, 0x5f, 0x5c, 0x6a, 0x7f, 0x5c, 0xf5, 0x7f, 0x5c, 0xf2, 0x7f, 0xb5, 0x6a, 0x5f, 0xbb,
	0xc0, 0xbe, 0xa6, 0xdc, 0xfb, 0x14, 0xfb, 0x1a, 0xd6, 0xa6, 0xcc, 0x65, 0x43, 0x55, 0x46, 0x64,
	0xba, 0x2d, 0xb2, 0x59, 0x2d, 0x62, 0x9a, 0x72, 0xbf, 0x88, 0x51, 0x66, 0x7a, 0xd1, 0xa6, 0xa1,
	0x2a, 0x6b, 0x94, 0xd3, 0x4d, 0x2f, 0xda, 0x54, 0x33, 0xa1, 0xa6, 0x7c, 0xb9, 0x10, 0x6a, 0xec,
	0x11, 0x74, 0x6d, 0x2f, 0x76, 0xac, 0xc4, 0x0b, 0x03, 0x65, 0x9d, 0xbc, 0x5a, 0x96, 0x5e, 0x65,
	0x62, 0x3d, 0x67, 0x60, 0x0d, 0x99, 0xd6, 0xcc, 0x70, 0x3d, 0x5b, 0x79, 0x20, 0x6a, 0xc8, 0xb4,
	0x66, 0x2f, 0x3c, 0x2a, 0xae, 0xd3, 0x99, 0x19, 0x60, 0xd5, 0x7d, 0x25, 0x00, 0x1c, 0x52, 0x7b,
	0xe9, 0x50, 0xb3, 0xb3, 0xc2, 0x99, 0xf2, 0x35, 0x21, 0x8b, 0x31, 0xfb, 0x02, 0x7a, 0xdc, 0x89,
	0x4f, 0x9d, 0xd8, 0x88, 0xc2, 0x38, 0x51, 0x1e, 0x89, 0x1e, 0x20, 0x44, 0xfb, 0x61, 0x9c, 0xb0,
	0x6f, 0xe1, 0x0a, 0x4e, 0x97, 0x7b, 0xf8, 0x98, 0x3c, 0x64, 0xc2, 0xc3, 0x89, 0x35, 0xcb, 0x9d,
	0xec, 0x9b, 0x85, 0x11, 0x76, 0xd0, 0xd3, 0xc4, 0x8c, 0x94, 0x27, 0x64, 0x92, 0xbe, 0xb1, 0x3f,
	0x26, 0x66, 0x24, 0x5a, 0x89, 0x2a, 0xd6, 0x2b, 0x31, 0x23, 0xea, 0x19, 0xb7, 0xa0, 0xcb, 0xe7,
	0x87, 0x81, 0x43, 0x5d, 0x43, 0x13, 0x5e, 0x0a, 0xc1, 0xae, 0xcd, 0xae, 0x03, 0x06, 0x89, 0xc8,
	0x06, 0x21, 0x2d, 0xd3, 0x9a, 0xed, 0xda, 0xec, 0x2e, 0xf4, 0xa2, 0xd0, 0x36, 0x82, 0xd0, 0xa6,
	0x06, 0xf6, 0x0d, 0x61, 0xdd, 0x28, 0xb4, 0x5f, 0x87, 0x36, 0xf6, 0x2f, 0x06, 0x4d, 0xee, 0xd9,
	0x8e, 0xf2, 0x54, 0xb8, 0x80, 0xdf, 0x4c, 0x81, 0xb6, 0x15, 0xce, 0x83, 0x24, 0x3e, 0x53, 0xbe,
	0xa3, 0x4d, 0xc8, 0x86, 0xec, 0x33, 0x58, 0x8a, 0x1d, 0x17, 0x43, 0xfc, 0x35, 0x01, 0x72, 0x44,
	0xbd, 0x89, 0x47, 0xca, 0x6f, 0x64, 0x6f, 0xe2, 0xd1, 0xe8, 0x8f, 0x35, 0x80, 0x37, 0xdc, 0x74,
	0x9d, 0x83, 0xc4, 0x4c, 0x38, 0xba, 0x1e, 0x99, 0xd6, 0x89, 0x93, 0x18, 0x49, 0x4a, 0x47, 0x48,
	0x53, 0xef, 0x08, 0xc1, 0x34, 0x2d, 0x80, 0x71, 0x2a, 0x4f, 0x13, 0x09, 0xea, 0x29, 0x4e, 0x29,
	0xbe, 0x95, 0x06, 0x21, 0x72, 0x84, 0xf1, 0x1e, 0x7a, 0x64, 0xae, 0x49, 0xf2, 0xd6, 0xa1, 0x87,
	0xb6, 0xa4, 0x38, 0x4e, 0xe5, 0x99, 0x83, 0x62, 0x3d, 0x45, 0x07, 0x0f, 0xbd, 0x84, 0x0e, 0x9c,
	0xa6, 0x8e, 0x9f, 0xa3, 0xa9, 0xf4, 0xef, 0x07, 0x27, 0x71, 0x62, 0x36, 0x82, 0x06, 0x9f, 0xfb,
	0xe4, 0x59, 0x2f, 0x4b, 0xf8, 0xdc, 0x7d, 0x1d, 0x41, 0xe4, 0xf8, 0xa6, 0x70, 0xf0, 0x42, 0x8e,
	0x6f, 0xa6, 0xa3, 0x9f, 0x9a, 0xd0, 0xdd, 0x77, 0xe2, 0x23, 0x11, 0xf5, 0x1d, 0x80, 0xa3, 0x59,
	0xf8, 0xc1, 0xa0, 0xe5, 0x93, 0x61, 0x77, 0x51, 0xb2, 0x85, 0x02, 0xb6, 0x06, 0x83, 0xc0, 0xf9,
	0x60, 0x14, 0x28, 0x22, 0xf8, 0x7e, 0xe0, 0x7c, 0x78, 0xbe, 0x60, 0x3d, 0x84, 0xab, 0xd6, 0x2c,
	0xe4, 0x8e, 0x5d, 0x24, 0x8a, 0xb5, 0x58, 0x16, 0x40, 0xce, 0xfd, 0x1a, 0x58, 0xec, 0x24, 0xb1,
	0x19, 0xf0, 0x22, 0x59, 0x2c, 0xd0, 0x50, 0x22, 0x39, 0xfb, 0x09, 0xac, 0x1c, 0x9b, 0xb3, 0x23,
	0x23, 0x8c, 0x9c, 0xa0, 0xc8, 0x17, 0x2b, 0x77, 0x15, 0xb1, 0xbd, 0xc8, 0x09, 0x72, 0x85, 0xd2,
	0x2e, 0x2e, 0xfd, 0xdc, 0x2e, 0xb6, 0x2b, 0xbb, 0xb8, 0x06, 0x83, 0xcc, 0x31, 0x2b, 0x20, 0xf5,
	0x8e, 0x08, 0x55, 0x4a, 0xb7, 0x02, 0x34, 0x51, 0x61, 0xc5, 0x29, 0x1d, 0xe5, 0x25, 0x96, 0x9e,
	0x62, 0x11, 0xc7, 0x49, 0x62, 0xf0, 0xb3, 0x80, 0xce, 0xe3, 0xa6, 0xbe, 0x14, 0x27, 0xc9, 0xc1,
	0x59, 0x80, 0xa7, 0xb5, 0x04, 0x28, 0x1a, 0x3a, 0x89, 0x9b, 0x3a, 0x08, 0x14, 0xa3, 0xc8, 0x54,
	0xcd, 0x53, 0x97, 0x4e, 0x5d, 0xa1, 0x3a, 0x39, 0x75, 0x33, 0x55, 0xf3, 0xd4, 0x15, 0xaa, 0x83,
	0x85, 0xea, 0xe4, 0xd4, 0xcd, 0x54, 0xcd, 0x58, 0xa8, 0x2e, 0x0b, 0x55, 0x33, 0xce, 0x54, 0x25,
	0x20, 0x54, 0x87, 0x42, 0x55, 0xa0, 0xa4, 0xfa, 0x25, 0x2c, 0xe3, 0x1d, 0xcc, 0xf8, 0x10, 0xd8,
	0x59, 0xf4, 0xd7, 0x45, 0x5c, 0x28, 0x7e, 0x17, 0xd8, 0x22, 0xfa, 0x2a, 0x2d, 0x4e, 0xe9, 0x18,
	0x2d, 0xd1, 0xf4, 0x74, 0xf4, 0x06, 0x3a, 0x7a, 0x92, 0x88, 0x04, 0x2b, 0x2c, 0x45, 0xad, 0xb4,
	0x14, 0x85, 0x40, 0xeb, 0xa5, 0x40, 0x0b, 0x61, 0x34, 0x8a, 0x61, 0x8c, 0x62, 0x91, 0xb8, 0xa2,
	0x1c, 0xee, 0x15, 0xcb, 0x41, 0x76, 0xda, 0x45, 0x5a, 0x8b, 0x6a, 0x58, 0x2d, 0x56, 0xc3, 0x40,
	0x50, 0x32, 0xbf, 0xa8, 0x16, 0x88, 0xe1, 0x05, 0x34, 0xcd, 0x45, 0x0c, 0x2f, 0x18, 0xfd, 0xa1,
	0x01, 0x9d, 0x17, 0x4e, 0x28, 0xe6, 0xd4, 0xe0, 0x3a, 0x9f, 0xfb, 0xc6, 0xf9, 0x5c, 0x17, 0x91,
	0x31, 0x3e, 0xf7, 0xb7, 0x2a, 0xe9, 0xfe, 0x14, 0x6e, 0xa0, 0x8a, 0x79, 0x18, 0x84, 0xb1, 0x6f,
	0xce, 0xce, 0x57, 0xd2, 0x0a, 0x9f, 0xfb, 0x13, 0x89, 0xe6, 0x6a, 0xdf, 0xc1, 0xad, 0xea, 0x4c,
	0xf6, 0x3c, 0x36, 0xb1, 0x25, 0x1b, 0x73, 0x2e, 0xd7, 0xe5, 0x46, 0x69, 0xbe, 0x6d, 0x89, 0xbf,
	0xe1, 0x6c, 0x04, 0x57, 0x50, 0x3b, 0x2f, 0x04, 0x51, 0x2e, 0x3d, 0x3e, 0xf7, 0xf7, 0xb3, 0x5a,
	0x28, 0x73, 0xe2, 0xac, 0x58, 0x72, 0x8e, 0x9e, 0xe2, 0x7d, 0x0a, 0x39, 0xb2, 0x89, 0xc9, 0x82,
	0xe1, 0x73, 0xff, 0x19, 0xf5, 0xb1, 0x02, 0x1a, 0x67, 0xc5, 0x22, 0x51, 0x3d, 0x65, 0x5f, 0x01,
	0x2e, 0x87, 0x91, 0x65, 0xbb, 0x35, 0xf3, 0x9c, 0x20, 0x91, 0xd5, 0xb0, 0xcc, 0xe7, 0xbe, 0x4e,
	0x59, 0xb0, 0x45, 0x62, 0xf6, 0x8d, 0x58, 0xa5, 0x32, 0xb9, 0x58, 0x21, 0xd7, 0x2a, 0x1a, 0x18,
	0xf0, 0xe8, 0x5f, 0x35, 0xe8, 0x3c, 0x8f, 0xb8, 0xd8, 0x9b, 0x35, 0x18, 0xa0, 0x89, 0x73, 0x9b,
	0xd2, 0xe7, 0x73, 0x3f, 0x5f, 0x57, 0xe9, 0xd5, 0x85, 0x3d, 0x0d, 0xbd, 0x7a, 0x5d, 0x6c, 0x6b,
	0x97, 0x6e, 0x77, 0xe3, 0xd2, 0xed, 0x5e, 0x83, 0x81, 0x6f, 0xa6, 0x45, 0xae, 0x88, 0xb8, 0xef,
	0x9b, 0x69, 0xc9, 0x0b, 0x64, 0x55, 0xbc, 0x10, 0x91, 0x2e, 0xfb, 0x66, 0x5a, 0xf4, 0x62, 0xf4,
	0xf7, 0x3a, 0x74, 0x71, 0xf4, 0xff, 0x14, 0xe6, 0xb9, 0x04, 0x6b, 0x7e, 0x42, 0x82, 0xb5, 0xce,
	0x27, 0xd8, 0x1d, 0x91, 0x42, 0xf2, 0xf4, 0x14, 0x19, 0xd8, 0x5d, 0x10, 0xfe, 0xa7, 0xfc, 0xbb,
	0x01, 0x6d, 0x89, 0xca, 0x0e, 0xbd, 0x24, 0xa0, 0xd1, 0xdf, 0x6a, 0xb0, 0xbc, 0x15, 0x06, 0x3c,
	0x9c, 0x39, 0xaf, 0x42, 0x37, 0x3b, 0x5b, 0x2b, 0xf1, 0xd4, 0x3e, 0x21, 0x9e, 0xfa, 0xf9, 0x78,
	0xfe, 0x8b, 0xa5, 0xfc, 0x0f, 0x95, 0xde, 0xfc, 0xd9, 0x4a, 0x1f, 0xfd, 0x79, 0x09, 0xba, 0x78,
	0xf1, 0x12, 0x61, 0xfc, 0x12, 0x86, 0x64, 0x0b, 0x0d, 0x1b, 0x33, 0x43, 0xe5, 0x1a, 0x97, 0xf9,
	0x87, 0xae, 0xd3, 0x7c, 0xaf, 0x50, 0x58, 0x25, 0x6a, 0xfc, 0x29, 0x97, 0xe9, 0x97, 0x13, 0x51,
	0xc8, 0x1e, 0xc0, 0xd5, 0x22, 0xf1, 0x29, 0xd7, 0x54, 0x2e, 0xcf, 0xa5, 0xc1, 0x82, 0x49, 0xd2,
	0x2a, 0x55, 0x53, 0xb9, 0xe6, 0xcb, 0x43, 0x2a, 0xa7, 0x92, 0xf4, 0xdc, 0xf4, 0xbe, 0x76, 0x2c,
	0x4f, 0xac, 0xc2, 0xf4, 0xbe, 0x76, 0x8c, 0xcf, 0x82, 0x12, 0xf1, 0x58, 0x1e, 0x5d, 0xbd, 0x9c,
	0x76, 0x5c, 0x9e, 0xd8, 0x31, 0xd4, 0x13, 0x4d, 0x3d, 0x91, 0xa7, 0xd7, 0x62, 0xe2, 0x1d, 0x92,
	0xb2, 0x47, 0x70, 0xad, 0x48, 0xd5, 0x50, 0xaa, 0x9e, 0xc8, 0x33, 0x6c, 0xb8, 0x20, 0x4b, 0x79,
	0x56, 0x46, 0x39, 0x5d, 0x3d, 0xd1, 0x7c, 0x7a, 0x19, 0x8a, 0x32, 0xca, 0xd8, 0x28, 0x3e, 0x47,
	0xf6, 0x35, 0x55, 0xf5, 0xe9, 0x9d, 0x58, 0x22, 0x93, 0xf8, 0x02, 0xcb, 0xbe, 0xe6, 0xd2, 0xab,
	0xb1, 0x62, 0xd9, 0xd7, 0xdc, 0xf2, 0x2a, 0x38, 0x86, 0xe6, 0xd2, 0xe3, 0xb1, 0xb0, 0x0a, 0x3b,
	0x9a, 0xcb, 0xd6, 0x8b, 0xab, 0x90, 0x18, 0x96, 0x11, 0xf3, 0x84, 0x5e, 0x5f, 0x85, 0x45, 0x9d,
	0x6e, 0xe9, 0x3c, 0x61, 0x63, 0xd1, 0x6c, 0x73, 0xe6, 0xe2, 0x86, 0x45, 0x8f, 0x2e, 0x99, 0xa6,
	0x82, 0xff, 0x52, 0x5e, 0xb0, 0xd8, 0x53, 0x50, 0x2e, 0x50, 0xa2, 0xac, 0xa5, 0x37, 0x98, 0x68,
	0xd1, 0x05, 0x2d, 0x4a, 0xd7, 0xaa, 0x57, 0x9c, 0xbc, 0x1a, 0x55, 0xbc, 0x3a, 0xb8, 0xc0, 0x2b,
	0x5e, 0xf0, 0xea, 0x7e, 0xc5, 0xab, 0x83, 0xcb, 0xbc, 0xe2, 0x45, 0xaf, 0xd6, 0x2a, 0x5e, 0x1d,
	0x2c, 0xbc, 0x1a, 0xfd, 0xa5, 0x06, 0x83, 0xb7, 0xd3, 0xc9, 0x7e, 0xe1, 0x76, 0x8d, 0x6f, 0x9a,
	0xd4, 0x38, 0x3c, 0x4b, 0x1c, 0x2e, 0x8b, 0xbf, 0x9d, 0xa4, 0xcf, 0x70, 0x88, 0x50, 0x9c, 0x41,
	0xa2, 0xe6, 0xdb, 0xb1, 0x84, 0x56, 0xa0, 0x25, 0xe4, 0x0d, 0x79, 0x93, 0x27, 0xe9, 0x1d, 0x80,
	0x24, 0x95, 0x8d, 0x22, 0xab, 0xe0, 0x6e, 0x92, 0x8a, 0x2e, 0x41, 0x70, 0x9c, 0xc3, 0xa2, 0x2b,
	0x76, 0xe3, 0x05, 0xac, 0x40, 0x3b, 0xc3, 0x44, 0x43, 0xcc, 0x86, 0xa3, 0x7f, 0xd4, 0xa1, 0x25,
	0xbc, 0xfd, 0x05, 0xb4, 0xe6, 0xe8, 0xfb, 0x05, 0xaf, 0x01, 0x22, 0xe8, 0x02, 0x66, 0xf7, 0xa1,
	0x19, 0x39, 0xf1, 0x91, 0xbc, 0x02, 0x15, 0x6e, 0x49, 0x82, 0x45, 0x20, 0x5e, 0x82, 0x5c, 0x27,
	0x2c, 0x5f, 0x82, 0xb2, 0x2b, 0x8f, 0x8e, 0x10, 0x9a, 0xa1, 0xb3, 0xb8, 0x59, 0x34, 0xb3, 0x38,
	0x93, 0x74, 0x02, 0xd9, 0x26, 0xf4, 0x2c, 0xd1, 0x56, 0x8d, 0x59, 0xe8, 0x92, 0xef, 0xbd, 0x8d,
	0xeb, 0x82, 0x5b, 0xe9, 0xb7, 0x3a, 0x58, 0x0b, 0x01, 0x1a, 0xa7, 0x97, 0x64, 0xa7, 0x68, 0x7c,
	0xd1, 0xd3, 0x74, 0x02, 0xd1, 0xc7, 0xa3, 0x88, 0x53, 0x27, 0x5f, 0xf8, 0x98, 0x1d, 0xfd, 0x3a,
	0x42, 0x6c, 0x0c, 0x80, 0x8f, 0x53, 0x43, 0xac, 0x0b, 0x10, 0x71, 0x45, 0x10, 0xcb, 0x5b, 0xad,
	0x77, 0x91, 0x47, 0xe3, 0xd1, 0x7b, 0x00, 0x64, 0xbc, 0x74, 0x4c, 0xdb, 0x89, 0xd9, 0x6d, 0xe8,
	0x26, 0x9e, 0xef, 0xf0, 0xc4, 0xf4, 0x23, 0xa5, 0xb6, 0x5a, 0x5f, 0x6f, 0xeb, 0xb9, 0x00, 0xdf,
	0xdf, 0xdc, 0xf9, 0xed, 0xdc, 0x09, 0x2c, 0x47, 0xa9, 0x13, 0xb8, 0x18, 0xe3, 0x13, 0xf5, 0xd8,
	0xe4, 0xc7, 0x4a, 0x83, 0xe4, 0xf4, 0x3d, 0xfa, 0x7d, 0x0d, 0xfa, 0x68, 0x7c, 0x3b, 0xb4, 0xe6,
	0x3e, 0x5e, 0x72, 0x2a, 0xe6, 0xe9, 0x95, 0x9b, 0x9b, 0xbf, 0x05, 0x8d, 0xc4, 0x74, 0xe5, 0x4e,
	0x75, 0xe5, 0x2a, 0x98, 0xae, 0x8e, 0x52, 0x76, 0x0f, 0x5a, 0x3e, 0xfa, 0x2e, 0x37, 0xa9, 0x27,
	0x60, 0xb9, 0xd5, 0xbe, 0xbc, 0x0f, 0xf7, 0x4d, 0x7a, 0xb2, 0x1b, 0x47, 0x33, 0xd3, 0xe5, 0xf2,
	0x07, 0x67, 0x4f, 0xc8, 0x9e, 0xa3, 0xe8, 0xa1, 0x03, 0x50, 0xf8, 0xbd, 0xb7, 0x04, 0xf5, 0xb7,
	0x3f, 0x0c, 0x6b, 0x6c, 0x19, 0x7a, 0xd3, 0x97, 0xbb, 0xfa, 0xb6, 0xb1, 0x3f, 0xd1, 0xa7, 0x3f,
	0x0e, 0x1b, 0xac, 0x0f, 0x9d, 0xb7, 0x2f, 0x26, 0xd3, 0x9d, 0x77, 0x93, 0x1f, 0x87, 0x2d, 0xd6,
	0x81, 0xe6, 0xcb, 0xbd, 0x83, 0xe9, 0x70, 0x89, 0xf5, 0xa0, 0xfd, 0x7a, 0x67, 0xfa, 0x6e, 0x4f,
	0xff, 0x7e, 0xd8, 0x46, 0xad, 0xe7, 0xaf, 0xf6, 0x26, 0xd3, 0xdd, 0xd7, 0x2f, 0x8c, 0xdd, 0xfd,
	0x61, 0x07, 0x79, 0xdb, 0x2f, 0xb7, 0xf6, 0x87, 0xdd, 0x87, 0xdf, 0x42, 0x37, 0xff, 0x7f, 0xb0,
	0x02, 0xc3, 0xad, 0x57, 0xbb, 0x3b, 0xaf, 0xa7, 0xc6, 0x74, 0xcf, 0x38, 0xd8, 0xd1, 0xdf, 0xee,
	0xe8, 0xc3, 0x1a, 0x4a, 0xc5, 0x37, 0x4a, 0x05, 0x3e, 0xac, 0x3f, 0x7c, 0x00, 0xfd, 0xe2, 0x9f,
	0x08, 0x9c, 0xf0, 0xf9, 0x9e, 0xfe, 0x6e, 0xa2, 0x6f, 0x0f, 0x6b, 0xe8, 0xd5, 0xb3, 0xc9, 0xd6,
	0xf7, 0x34, 0xaa, 0x3f, 0x63, 0x7f, 0xfd, 0x78, 0xb7, 0xf6, 0xcf, 0x8f, 0x77, 0x6b, 0x3f, 0x7d,
	0xbc, 0x5b, 0x7b, 0xdf, 0xc4, 0xd7, 0xc7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xa2, 0x3c,
	0x48, 0x46, 0x16, 0x00, 0x00,
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Isp != nil {
		i -= len(*m.Isp)
		copy(dAtA[i:], *m.Isp)
		i = encodeVarintZero(dAtA, i, uint64(len(*m.Isp)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintZero(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.Country != nil {
		i -= len(*m.Country)
		copy(dAtA[i:], *m.Country)
		i = encodeVarintZero(dAtA, i, uint64(len(*m.Country)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.Side != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Side))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.PodNodeId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.PodNodeId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.AclId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.AclId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.SubnetId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SubnetId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if m.TapType != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.TapType))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.Vtap != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Vtap))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.AclDirection != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.AclDirection))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.ServerPort != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ServerPort))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.Protocol != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Protocol))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.VlanId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.VlanId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.AclGid != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.AclGid))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.Direction != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Direction))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.Ip6_1 != nil {
		i -= len(*m.Ip6_1)
		copy(dAtA[i:], *m.Ip6_1)
		i = encodeVarintZero(dAtA, i, uint64(len(*m.Ip6_1)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.Ip6_0 != nil {
		i -= len(*m.Ip6_0)
		copy(dAtA[i:], *m.Ip6_0)
		i = encodeVarintZero(dAtA, i, uint64(len(*m.Ip6_0)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.HostId_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.HostId_1))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.HostId_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.HostId_0))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.L3DeviceType_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3DeviceType_1))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.L3DeviceId_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3DeviceId_1))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.L3DeviceType_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3DeviceType_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.L3DeviceId_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3DeviceId_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.L2DeviceType_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2DeviceType_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.L2DeviceId_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2DeviceId_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.L2DeviceType_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2DeviceType_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.L2DeviceId_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2DeviceId_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.L3EpcId_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3EpcId_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.L3EpcId_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3EpcId_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.L2EpcId_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2EpcId_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.L2EpcId_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2EpcId_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.GroupId_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.GroupId_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.GroupId_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.GroupId_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Mac_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Mac_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Mac_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Mac_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Ip_1 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Ip_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Ip_0 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Ip_0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Ip6 != nil {
		i -= len(*m.Ip6)
		copy(dAtA[i:], *m.Ip6)
		i = encodeVarintZero(dAtA, i, uint64(len(*m.Ip6)))
		i--
		dAtA[i] = 0x7a
	}
	if m.IsIpv6 != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.IsIpv6))
		i--
		dAtA[i] = 0x70
	}
	if m.HostId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.HostId))
		i--
		dAtA[i] = 0x68
	}
	if m.L3DeviceType != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3DeviceType))
		i--
		dAtA[i] = 0x60
	}
	if m.L3DeviceId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3DeviceId))
		i--
		dAtA[i] = 0x58
	}
	if m.L2DeviceType != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2DeviceType))
		i--
		dAtA[i] = 0x50
	}
	if m.L2DeviceId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2DeviceId))
		i--
		dAtA[i] = 0x48
	}
	if m.L3EpcId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L3EpcId))
		i--
		dAtA[i] = 0x40
	}
	if m.L2EpcId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.L2EpcId))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupId != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.GroupId))
		i--
		dAtA[i] = 0x30
	}
	if m.Mac != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Mac))
		i--
		dAtA[i] = 0x28
	}
	if m.Ip != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Ip))
		i--
		dAtA[i] = 0x20
	}
	if m.Code != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Code))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintZero(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UsageStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bit != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Bit))
		i--
		dAtA[i] = 0x30
	}
	if m.BitRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.BitRx))
		i--
		dAtA[i] = 0x28
	}
	if m.BitTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.BitTx))
		i--
		dAtA[i] = 0x20
	}
	if m.Packet != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Packet))
		i--
		dAtA[i] = 0x18
	}
	if m.PacketRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.PacketRx))
		i--
		dAtA[i] = 0x10
	}
	if m.PacketTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.PacketTx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsageMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Max != nil {
		{
			size, err := m.Max.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Sum != nil {
		{
			size, err := m.Sum.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PerfStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerfStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerfStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ZeroWndCntRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ZeroWndCntRx))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.ZeroWndCntTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ZeroWndCntTx))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ArtAvgFlow != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ArtAvgFlow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ArtAvg != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ArtAvg))
		i--
		dAtA[i] = 0x78
	}
	if m.RttAvgFlow != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RttAvgFlow))
		i--
		dAtA[i] = 0x70
	}
	if m.RttAvg != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RttAvg))
		i--
		dAtA[i] = 0x68
	}
	if m.RttSynFlow != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RttSynFlow))
		i--
		dAtA[i] = 0x60
	}
	if m.RttSyn != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RttSyn))
		i--
		dAtA[i] = 0x58
	}
	if m.RetransCntRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RetransCntRx))
		i--
		dAtA[i] = 0x48
	}
	if m.RetransCntTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RetransCntTx))
		i--
		dAtA[i] = 0x40
	}
	if m.PacketRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.PacketRx))
		i--
		dAtA[i] = 0x38
	}
	if m.PacketTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.PacketTx))
		i--
		dAtA[i] = 0x30
	}
	if m.HalfOpenFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.HalfOpenFlowCount))
		i--
		dAtA[i] = 0x28
	}
	if m.RetransFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RetransFlowCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ClosedFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ClosedFlowCount))
		i--
		dAtA[i] = 0x18
	}
	if m.NewFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.NewFlowCount))
		i--
		dAtA[i] = 0x10
	}
	if m.FlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.FlowCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RttStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RttStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RttStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArtAvg != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ArtAvg))
		i--
		dAtA[i] = 0x18
	}
	if m.RttAvg != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RttAvg))
		i--
		dAtA[i] = 0x10
	}
	if m.RttSyn != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RttSyn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PerfMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerfMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerfMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Min != nil {
		{
			size, err := m.Min.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Max != nil {
		{
			size, err := m.Max.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Sum != nil {
		{
			size, err := m.Sum.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeoMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumRttSynClientFlow != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumRttSynClientFlow))
		i--
		dAtA[i] = 0x60
	}
	if m.SumRttSynClient != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumRttSynClient))
		i--
		dAtA[i] = 0x58
	}
	if m.SumBitRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumBitRx))
		i--
		dAtA[i] = 0x40
	}
	if m.SumBitTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumBitTx))
		i--
		dAtA[i] = 0x38
	}
	if m.SumPacketRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumPacketRx))
		i--
		dAtA[i] = 0x30
	}
	if m.SumPacketTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumPacketTx))
		i--
		dAtA[i] = 0x28
	}
	if m.SumClosedFlowDurationUs != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumClosedFlowDurationUs))
		i--
		dAtA[i] = 0x18
	}
	if m.SumAbnormalFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumAbnormalFlowCount))
		i--
		dAtA[i] = 0x10
	}
	if m.SumClosedFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumClosedFlowCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FpsMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FpsMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FpsMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxNewFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.MaxNewFlowCount))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.MaxFlowCount))
		i--
		dAtA[i] = 0x58
	}
	if m.SumClosedFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumClosedFlowCount))
		i--
		dAtA[i] = 0x18
	}
	if m.SumNewFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumNewFlowCount))
		i--
		dAtA[i] = 0x10
	}
	if m.SumFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumFlowCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumBit != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumBit))
		i--
		dAtA[i] = 0x48
	}
	if m.SumBitRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumBitRx))
		i--
		dAtA[i] = 0x40
	}
	if m.SumBitTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumBitTx))
		i--
		dAtA[i] = 0x38
	}
	if m.SumPacket != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumPacket))
		i--
		dAtA[i] = 0x30
	}
	if m.SumPacketRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumPacketRx))
		i--
		dAtA[i] = 0x28
	}
	if m.SumPacketTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumPacketTx))
		i--
		dAtA[i] = 0x20
	}
	if m.SumClosedFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumClosedFlowCount))
		i--
		dAtA[i] = 0x18
	}
	if m.SumNewFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumNewFlowCount))
		i--
		dAtA[i] = 0x10
	}
	if m.SumFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumFlowCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsoleLogMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsoleLogMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsoleLogMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumClosedFlowDurationUs != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumClosedFlowDurationUs))
		i--
		dAtA[i] = 0x20
	}
	if m.SumClosedFlowCount != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumClosedFlowCount))
		i--
		dAtA[i] = 0x18
	}
	if m.SumPacketRx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumPacketRx))
		i--
		dAtA[i] = 0x10
	}
	if m.SumPacketTx != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumPacketTx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TypeMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumCountTSHalfClose != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountTSHalfClose))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.SumCountTSHalfOpen != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountTSHalfOpen))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.SumCountTSRst != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountTSRst))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.SumCountTCHalfClose != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountTCHalfClose))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.SumCountTCHalfOpen != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountTCHalfOpen))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.SumCountTCRst != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountTCRst))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.SumCountE_1G != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountE_1G))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.SumCountE_100M1G != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountE_100M1G))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.SumCountE_1M100M != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountE_1M100M))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.SumCountE_100K1M != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountE_100K1M))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.SumCountE_10K100K != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountE_10K100K))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.SumCountE_0K10K != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountE_0K10K))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.SumCountL_1H != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountL_1H))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SumCountL_1M1H != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountL_1M1H))
		i--
		dAtA[i] = 0x78
	}
	if m.SumCountL_10S1M != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountL_10S1M))
		i--
		dAtA[i] = 0x70
	}
	if m.SumCountL_5S10S != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountL_5S10S))
		i--
		dAtA[i] = 0x68
	}
	if m.SumCountL_1S5S != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountL_1S5S))
		i--
		dAtA[i] = 0x60
	}
	if m.SumCountL_0S1S != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.SumCountL_0S1S))
		i--
		dAtA[i] = 0x58
	}
	return len(dAtA) - i, nil
}

func (m *VTAPUsageMeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VTAPUsageMeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VTAPUsageMeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Packets != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x30
	}
	if m.RxPackets != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RxPackets))
		i--
		dAtA[i] = 0x28
	}
	if m.TxPackets != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.TxPackets))
		i--
		dAtA[i] = 0x20
	}
	if m.Bytes != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x18
	}
	if m.RxBytes != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.RxBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.TxBytes != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.TxBytes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Meter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Meter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Meter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapUsage != nil {
		{
			size, err := m.VtapUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Fps != nil {
		{
			size, err := m.Fps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ConsoleLog != nil {
		{
			size, err := m.ConsoleLog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Flow != nil {
		{
			size, err := m.Flow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Geo != nil {
		{
			size, err := m.Geo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Perf != nil {
		{
			size, err := m.Perf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hash == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("hash")
	} else {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.Hash))
		i--
		dAtA[i] = 0x1d
	}
	if m.Sequence == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("sequence")
	} else {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.Sequence))
		i--
		dAtA[i] = 0x15
	}
	if m.Timestamp == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp")
	} else {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.Timestamp))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ZeroDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionFlags != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.ActionFlags))
		i--
		dAtA[i] = 0x20
	}
	if m.Meter != nil {
		{
			size, err := m.Meter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		i = encodeVarintZero(dAtA, i, uint64(*m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintZero(dAtA []byte, offset int, v uint64) int {
	offset -= sovZero(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Code != nil {
		n += 1 + sovZero(uint64(*m.Code))
	}
	if m.Ip != nil {
		n += 1 + sovZero(uint64(*m.Ip))
	}
	if m.Mac != nil {
		n += 1 + sovZero(uint64(*m.Mac))
	}
	if m.GroupId != nil {
		n += 1 + sovZero(uint64(*m.GroupId))
	}
	if m.L2EpcId != nil {
		n += 1 + sovZero(uint64(*m.L2EpcId))
	}
	if m.L3EpcId != nil {
		n += 1 + sovZero(uint64(*m.L3EpcId))
	}
	if m.L2DeviceId != nil {
		n += 1 + sovZero(uint64(*m.L2DeviceId))
	}
	if m.L2DeviceType != nil {
		n += 1 + sovZero(uint64(*m.L2DeviceType))
	}
	if m.L3DeviceId != nil {
		n += 1 + sovZero(uint64(*m.L3DeviceId))
	}
	if m.L3DeviceType != nil {
		n += 1 + sovZero(uint64(*m.L3DeviceType))
	}
	if m.HostId != nil {
		n += 1 + sovZero(uint64(*m.HostId))
	}
	if m.IsIpv6 != nil {
		n += 1 + sovZero(uint64(*m.IsIpv6))
	}
	if m.Ip6 != nil {
		l = len(*m.Ip6)
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Ip_0 != nil {
		n += 2 + sovZero(uint64(*m.Ip_0))
	}
	if m.Ip_1 != nil {
		n += 2 + sovZero(uint64(*m.Ip_1))
	}
	if m.Mac_0 != nil {
		n += 2 + sovZero(uint64(*m.Mac_0))
	}
	if m.Mac_1 != nil {
		n += 2 + sovZero(uint64(*m.Mac_1))
	}
	if m.GroupId_0 != nil {
		n += 2 + sovZero(uint64(*m.GroupId_0))
	}
	if m.GroupId_1 != nil {
		n += 2 + sovZero(uint64(*m.GroupId_1))
	}
	if m.L2EpcId_0 != nil {
		n += 2 + sovZero(uint64(*m.L2EpcId_0))
	}
	if m.L2EpcId_1 != nil {
		n += 2 + sovZero(uint64(*m.L2EpcId_1))
	}
	if m.L3EpcId_0 != nil {
		n += 2 + sovZero(uint64(*m.L3EpcId_0))
	}
	if m.L3EpcId_1 != nil {
		n += 2 + sovZero(uint64(*m.L3EpcId_1))
	}
	if m.L2DeviceId_0 != nil {
		n += 2 + sovZero(uint64(*m.L2DeviceId_0))
	}
	if m.L2DeviceType_0 != nil {
		n += 2 + sovZero(uint64(*m.L2DeviceType_0))
	}
	if m.L2DeviceId_1 != nil {
		n += 2 + sovZero(uint64(*m.L2DeviceId_1))
	}
	if m.L2DeviceType_1 != nil {
		n += 2 + sovZero(uint64(*m.L2DeviceType_1))
	}
	if m.L3DeviceId_0 != nil {
		n += 2 + sovZero(uint64(*m.L3DeviceId_0))
	}
	if m.L3DeviceType_0 != nil {
		n += 2 + sovZero(uint64(*m.L3DeviceType_0))
	}
	if m.L3DeviceId_1 != nil {
		n += 2 + sovZero(uint64(*m.L3DeviceId_1))
	}
	if m.L3DeviceType_1 != nil {
		n += 2 + sovZero(uint64(*m.L3DeviceType_1))
	}
	if m.HostId_0 != nil {
		n += 2 + sovZero(uint64(*m.HostId_0))
	}
	if m.HostId_1 != nil {
		n += 2 + sovZero(uint64(*m.HostId_1))
	}
	if m.Ip6_0 != nil {
		l = len(*m.Ip6_0)
		n += 2 + l + sovZero(uint64(l))
	}
	if m.Ip6_1 != nil {
		l = len(*m.Ip6_1)
		n += 2 + l + sovZero(uint64(l))
	}
	if m.Direction != nil {
		n += 2 + sovZero(uint64(*m.Direction))
	}
	if m.AclGid != nil {
		n += 2 + sovZero(uint64(*m.AclGid))
	}
	if m.VlanId != nil {
		n += 2 + sovZero(uint64(*m.VlanId))
	}
	if m.Protocol != nil {
		n += 2 + sovZero(uint64(*m.Protocol))
	}
	if m.ServerPort != nil {
		n += 2 + sovZero(uint64(*m.ServerPort))
	}
	if m.AclDirection != nil {
		n += 2 + sovZero(uint64(*m.AclDirection))
	}
	if m.Vtap != nil {
		n += 2 + sovZero(uint64(*m.Vtap))
	}
	if m.TapType != nil {
		n += 2 + sovZero(uint64(*m.TapType))
	}
	if m.SubnetId != nil {
		n += 2 + sovZero(uint64(*m.SubnetId))
	}
	if m.AclId != nil {
		n += 2 + sovZero(uint64(*m.AclId))
	}
	if m.PodNodeId != nil {
		n += 2 + sovZero(uint64(*m.PodNodeId))
	}
	if m.Side != nil {
		n += 2 + sovZero(uint64(*m.Side))
	}
	if m.Country != nil {
		l = len(*m.Country)
		n += 2 + l + sovZero(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 2 + l + sovZero(uint64(l))
	}
	if m.Isp != nil {
		l = len(*m.Isp)
		n += 2 + l + sovZero(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UsageStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketTx != nil {
		n += 1 + sovZero(uint64(*m.PacketTx))
	}
	if m.PacketRx != nil {
		n += 1 + sovZero(uint64(*m.PacketRx))
	}
	if m.Packet != nil {
		n += 1 + sovZero(uint64(*m.Packet))
	}
	if m.BitTx != nil {
		n += 1 + sovZero(uint64(*m.BitTx))
	}
	if m.BitRx != nil {
		n += 1 + sovZero(uint64(*m.BitRx))
	}
	if m.Bit != nil {
		n += 1 + sovZero(uint64(*m.Bit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UsageMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		l = m.Sum.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Max != nil {
		l = m.Max.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PerfStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowCount != nil {
		n += 1 + sovZero(uint64(*m.FlowCount))
	}
	if m.NewFlowCount != nil {
		n += 1 + sovZero(uint64(*m.NewFlowCount))
	}
	if m.ClosedFlowCount != nil {
		n += 1 + sovZero(uint64(*m.ClosedFlowCount))
	}
	if m.RetransFlowCount != nil {
		n += 1 + sovZero(uint64(*m.RetransFlowCount))
	}
	if m.HalfOpenFlowCount != nil {
		n += 1 + sovZero(uint64(*m.HalfOpenFlowCount))
	}
	if m.PacketTx != nil {
		n += 1 + sovZero(uint64(*m.PacketTx))
	}
	if m.PacketRx != nil {
		n += 1 + sovZero(uint64(*m.PacketRx))
	}
	if m.RetransCntTx != nil {
		n += 1 + sovZero(uint64(*m.RetransCntTx))
	}
	if m.RetransCntRx != nil {
		n += 1 + sovZero(uint64(*m.RetransCntRx))
	}
	if m.RttSyn != nil {
		n += 1 + sovZero(uint64(*m.RttSyn))
	}
	if m.RttSynFlow != nil {
		n += 1 + sovZero(uint64(*m.RttSynFlow))
	}
	if m.RttAvg != nil {
		n += 1 + sovZero(uint64(*m.RttAvg))
	}
	if m.RttAvgFlow != nil {
		n += 1 + sovZero(uint64(*m.RttAvgFlow))
	}
	if m.ArtAvg != nil {
		n += 1 + sovZero(uint64(*m.ArtAvg))
	}
	if m.ArtAvgFlow != nil {
		n += 2 + sovZero(uint64(*m.ArtAvgFlow))
	}
	if m.ZeroWndCntTx != nil {
		n += 2 + sovZero(uint64(*m.ZeroWndCntTx))
	}
	if m.ZeroWndCntRx != nil {
		n += 2 + sovZero(uint64(*m.ZeroWndCntRx))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RttStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RttSyn != nil {
		n += 1 + sovZero(uint64(*m.RttSyn))
	}
	if m.RttAvg != nil {
		n += 1 + sovZero(uint64(*m.RttAvg))
	}
	if m.ArtAvg != nil {
		n += 1 + sovZero(uint64(*m.ArtAvg))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PerfMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		l = m.Sum.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Max != nil {
		l = m.Max.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Min != nil {
		l = m.Min.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SumClosedFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumClosedFlowCount))
	}
	if m.SumAbnormalFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumAbnormalFlowCount))
	}
	if m.SumClosedFlowDurationUs != nil {
		n += 1 + sovZero(uint64(*m.SumClosedFlowDurationUs))
	}
	if m.SumPacketTx != nil {
		n += 1 + sovZero(uint64(*m.SumPacketTx))
	}
	if m.SumPacketRx != nil {
		n += 1 + sovZero(uint64(*m.SumPacketRx))
	}
	if m.SumBitTx != nil {
		n += 1 + sovZero(uint64(*m.SumBitTx))
	}
	if m.SumBitRx != nil {
		n += 1 + sovZero(uint64(*m.SumBitRx))
	}
	if m.SumRttSynClient != nil {
		n += 1 + sovZero(uint64(*m.SumRttSynClient))
	}
	if m.SumRttSynClientFlow != nil {
		n += 1 + sovZero(uint64(*m.SumRttSynClientFlow))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FpsMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SumFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumFlowCount))
	}
	if m.SumNewFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumNewFlowCount))
	}
	if m.SumClosedFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumClosedFlowCount))
	}
	if m.MaxFlowCount != nil {
		n += 1 + sovZero(uint64(*m.MaxFlowCount))
	}
	if m.MaxNewFlowCount != nil {
		n += 1 + sovZero(uint64(*m.MaxNewFlowCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlowMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SumFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumFlowCount))
	}
	if m.SumNewFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumNewFlowCount))
	}
	if m.SumClosedFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumClosedFlowCount))
	}
	if m.SumPacketTx != nil {
		n += 1 + sovZero(uint64(*m.SumPacketTx))
	}
	if m.SumPacketRx != nil {
		n += 1 + sovZero(uint64(*m.SumPacketRx))
	}
	if m.SumPacket != nil {
		n += 1 + sovZero(uint64(*m.SumPacket))
	}
	if m.SumBitTx != nil {
		n += 1 + sovZero(uint64(*m.SumBitTx))
	}
	if m.SumBitRx != nil {
		n += 1 + sovZero(uint64(*m.SumBitRx))
	}
	if m.SumBit != nil {
		n += 1 + sovZero(uint64(*m.SumBit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsoleLogMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SumPacketTx != nil {
		n += 1 + sovZero(uint64(*m.SumPacketTx))
	}
	if m.SumPacketRx != nil {
		n += 1 + sovZero(uint64(*m.SumPacketRx))
	}
	if m.SumClosedFlowCount != nil {
		n += 1 + sovZero(uint64(*m.SumClosedFlowCount))
	}
	if m.SumClosedFlowDurationUs != nil {
		n += 1 + sovZero(uint64(*m.SumClosedFlowDurationUs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TypeMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SumCountL_0S1S != nil {
		n += 1 + sovZero(uint64(*m.SumCountL_0S1S))
	}
	if m.SumCountL_1S5S != nil {
		n += 1 + sovZero(uint64(*m.SumCountL_1S5S))
	}
	if m.SumCountL_5S10S != nil {
		n += 1 + sovZero(uint64(*m.SumCountL_5S10S))
	}
	if m.SumCountL_10S1M != nil {
		n += 1 + sovZero(uint64(*m.SumCountL_10S1M))
	}
	if m.SumCountL_1M1H != nil {
		n += 1 + sovZero(uint64(*m.SumCountL_1M1H))
	}
	if m.SumCountL_1H != nil {
		n += 2 + sovZero(uint64(*m.SumCountL_1H))
	}
	if m.SumCountE_0K10K != nil {
		n += 2 + sovZero(uint64(*m.SumCountE_0K10K))
	}
	if m.SumCountE_10K100K != nil {
		n += 2 + sovZero(uint64(*m.SumCountE_10K100K))
	}
	if m.SumCountE_100K1M != nil {
		n += 2 + sovZero(uint64(*m.SumCountE_100K1M))
	}
	if m.SumCountE_1M100M != nil {
		n += 2 + sovZero(uint64(*m.SumCountE_1M100M))
	}
	if m.SumCountE_100M1G != nil {
		n += 2 + sovZero(uint64(*m.SumCountE_100M1G))
	}
	if m.SumCountE_1G != nil {
		n += 2 + sovZero(uint64(*m.SumCountE_1G))
	}
	if m.SumCountTCRst != nil {
		n += 2 + sovZero(uint64(*m.SumCountTCRst))
	}
	if m.SumCountTCHalfOpen != nil {
		n += 2 + sovZero(uint64(*m.SumCountTCHalfOpen))
	}
	if m.SumCountTCHalfClose != nil {
		n += 2 + sovZero(uint64(*m.SumCountTCHalfClose))
	}
	if m.SumCountTSRst != nil {
		n += 2 + sovZero(uint64(*m.SumCountTSRst))
	}
	if m.SumCountTSHalfOpen != nil {
		n += 2 + sovZero(uint64(*m.SumCountTSHalfOpen))
	}
	if m.SumCountTSHalfClose != nil {
		n += 2 + sovZero(uint64(*m.SumCountTSHalfClose))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VTAPUsageMeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBytes != nil {
		n += 1 + sovZero(uint64(*m.TxBytes))
	}
	if m.RxBytes != nil {
		n += 1 + sovZero(uint64(*m.RxBytes))
	}
	if m.Bytes != nil {
		n += 1 + sovZero(uint64(*m.Bytes))
	}
	if m.TxPackets != nil {
		n += 1 + sovZero(uint64(*m.TxPackets))
	}
	if m.RxPackets != nil {
		n += 1 + sovZero(uint64(*m.RxPackets))
	}
	if m.Packets != nil {
		n += 1 + sovZero(uint64(*m.Packets))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Meter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Perf != nil {
		l = m.Perf.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Geo != nil {
		l = m.Geo.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Flow != nil {
		l = m.Flow.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.ConsoleLog != nil {
		l = m.ConsoleLog.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Fps != nil {
		l = m.Fps.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.VtapUsage != nil {
		l = m.VtapUsage.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZeroHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		n += 5
	}
	if m.Sequence != nil {
		n += 5
	}
	if m.Hash != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZeroDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		n += 1 + sovZero(uint64(*m.Timestamp))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.Meter != nil {
		l = m.Meter.Size()
		n += 1 + l + sovZero(uint64(l))
	}
	if m.ActionFlags != nil {
		n += 1 + sovZero(uint64(*m.ActionFlags))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovZero(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZero(x uint64) (n int) {
	return sovZero(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mac = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2EpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2EpcId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3EpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3EpcId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2DeviceId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2DeviceId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2DeviceType", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2DeviceType = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceType", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceType = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostId = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIpv6 = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip6 = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip_0", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip_0 = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip_1", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip_1 = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac_0", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mac_0 = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac_1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mac_1 = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId_0", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId_0 = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId_1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId_1 = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2EpcId_0", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2EpcId_0 = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2EpcId_1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2EpcId_1 = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3EpcId_0", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3EpcId_0 = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3EpcId_1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3EpcId_1 = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2DeviceId_0", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2DeviceId_0 = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2DeviceType_0", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2DeviceType_0 = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2DeviceId_1", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2DeviceId_1 = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2DeviceType_1", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2DeviceType_1 = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceId_0", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceId_0 = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceType_0", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceType_0 = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceId_1", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceId_1 = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3DeviceType_1", wireType)
			}
			var v DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L3DeviceType_1 = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostId_0", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostId_0 = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostId_1", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostId_1 = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6_0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip6_0 = &s
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip6_1 = &s
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v Direction
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Direction = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclGid", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AclGid = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanId = &v
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Protocol = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerPort = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclDirection", wireType)
			}
			var v AclDirection
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AclDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AclDirection = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vtap", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vtap = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapType = &v
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubnetId = &v
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AclId = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNodeId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodNodeId = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Side = &v
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Country = &s
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Isp = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketTx = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRx = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packet = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BitTx = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BitRx = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bit = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sum == nil {
				m.Sum = &UsageStats{}
			}
			if err := m.Sum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Max == nil {
				m.Max = &UsageStats{}
			}
			if err := m.Max.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerfStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerfStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerfStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewFlowCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClosedFlowCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetransFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetransFlowCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HalfOpenFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HalfOpenFlowCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketTx = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRx = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetransCntTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetransCntTx = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetransCntRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetransCntRx = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttSyn", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttSyn = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttSynFlow", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttSynFlow = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttAvg", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttAvg = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttAvgFlow", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttAvgFlow = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtAvg", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArtAvg = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtAvgFlow", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArtAvgFlow = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroWndCntTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZeroWndCntTx = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroWndCntRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZeroWndCntRx = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RttStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RttStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RttStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttSyn", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttSyn = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttAvg", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttAvg = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtAvg", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArtAvg = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerfMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerfMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerfMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sum == nil {
				m.Sum = &PerfStats{}
			}
			if err := m.Sum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Max == nil {
				m.Max = &RttStats{}
			}
			if err := m.Max.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Min == nil {
				m.Min = &RttStats{}
			}
			if err := m.Min.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumClosedFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumClosedFlowCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumAbnormalFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumAbnormalFlowCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumClosedFlowDurationUs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumClosedFlowDurationUs = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumPacketTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumPacketTx = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumPacketRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumPacketRx = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBitTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumBitTx = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBitRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumBitRx = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumRttSynClient", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumRttSynClient = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumRttSynClientFlow", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumRttSynClientFlow = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FpsMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FpsMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FpsMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumFlowCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumNewFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumNewFlowCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumClosedFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumClosedFlowCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxFlowCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNewFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxNewFlowCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumFlowCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumNewFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumNewFlowCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumClosedFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumClosedFlowCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumPacketTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumPacketTx = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumPacketRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumPacketRx = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumPacket", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumPacket = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBitTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumBitTx = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBitRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumBitRx = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumBit = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsoleLogMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsoleLogMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsoleLogMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumPacketTx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumPacketTx = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumPacketRx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumPacketRx = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumClosedFlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumClosedFlowCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumClosedFlowDurationUs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumClosedFlowDurationUs = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountL_0S1S", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountL_0S1S = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountL_1S5S", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountL_1S5S = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountL_5S10S", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountL_5S10S = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountL_10S1M", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountL_10S1M = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountL_1M1H", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountL_1M1H = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountL_1H", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountL_1H = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountE_0K10K", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountE_0K10K = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountE_10K100K", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountE_10K100K = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountE_100K1M", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountE_100K1M = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountE_1M100M", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountE_1M100M = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountE_100M1G", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountE_100M1G = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountE_1G", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountE_1G = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountTCRst", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountTCRst = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountTCHalfOpen", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountTCHalfOpen = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountTCHalfClose", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountTCHalfClose = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountTSRst", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountTSRst = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountTSHalfOpen", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountTSHalfOpen = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCountTSHalfClose", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumCountTSHalfClose = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VTAPUsageMeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VTAPUsageMeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VTAPUsageMeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxBytes = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxBytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxPackets = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxPackets = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &UsageMeter{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perf == nil {
				m.Perf = &PerfMeter{}
			}
			if err := m.Perf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Geo == nil {
				m.Geo = &GeoMeter{}
			}
			if err := m.Geo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flow == nil {
				m.Flow = &FlowMeter{}
			}
			if err := m.Flow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsoleLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsoleLog == nil {
				m.ConsoleLog = &ConsoleLogMeter{}
			}
			if err := m.ConsoleLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &TypeMeter{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fps == nil {
				m.Fps = &FpsMeter{}
			}
			if err := m.Fps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VtapUsage == nil {
				m.VtapUsage = &VTAPUsageMeter{}
			}
			if err := m.VtapUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroHeader) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Timestamp = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Sequence = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Hash = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sequence")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("hash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meter == nil {
				m.Meter = &Meter{}
			}
			if err := m.Meter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionFlags", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActionFlags = &v
		default:
			iNdEx = preIndex
			skippy, err := skipZero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZero(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZero
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZero
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZero
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZero
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZero        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZero          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZero = fmt.Errorf("proto: unexpected end of group")
)
