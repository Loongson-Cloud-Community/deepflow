// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package controller

import (
	context "context"
	fmt "fmt"
	common "github.com/deepflowys/deepflow/message/common"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GenesisSharingK8SRequest struct {
	ClusterId            *string  `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSharingK8SRequest) Reset()         { *m = GenesisSharingK8SRequest{} }
func (m *GenesisSharingK8SRequest) String() string { return proto.CompactTextString(m) }
func (*GenesisSharingK8SRequest) ProtoMessage()    {}
func (*GenesisSharingK8SRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}
func (m *GenesisSharingK8SRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSharingK8SRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSharingK8SRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSharingK8SRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSharingK8SRequest.Merge(m, src)
}
func (m *GenesisSharingK8SRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSharingK8SRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSharingK8SRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSharingK8SRequest proto.InternalMessageInfo

func (m *GenesisSharingK8SRequest) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

type GenesisSharingK8SResponse struct {
	Epoch                *string                     `protobuf:"bytes,1,opt,name=epoch" json:"epoch,omitempty"`
	ErrorMsg             *string                     `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	Entries              []*common.KubernetesAPIInfo `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GenesisSharingK8SResponse) Reset()         { *m = GenesisSharingK8SResponse{} }
func (m *GenesisSharingK8SResponse) String() string { return proto.CompactTextString(m) }
func (*GenesisSharingK8SResponse) ProtoMessage()    {}
func (*GenesisSharingK8SResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}
func (m *GenesisSharingK8SResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSharingK8SResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSharingK8SResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSharingK8SResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSharingK8SResponse.Merge(m, src)
}
func (m *GenesisSharingK8SResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSharingK8SResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSharingK8SResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSharingK8SResponse proto.InternalMessageInfo

func (m *GenesisSharingK8SResponse) GetEpoch() string {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return ""
}

func (m *GenesisSharingK8SResponse) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

func (m *GenesisSharingK8SResponse) GetEntries() []*common.KubernetesAPIInfo {
	if m != nil {
		return m.Entries
	}
	return nil
}

type GenesisSyncIP struct {
	Masklen              *uint32  `protobuf:"varint,1,opt,name=masklen" json:"masklen,omitempty"`
	Ip                   *string  `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Lcuuid               *string  `protobuf:"bytes,3,opt,name=lcuuid" json:"lcuuid,omitempty"`
	VinterfaceLcuuid     *string  `protobuf:"bytes,4,opt,name=vinterface_lcuuid,json=vinterfaceLcuuid" json:"vinterface_lcuuid,omitempty"`
	NodeIp               *string  `protobuf:"bytes,5,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	LastSeen             *string  `protobuf:"bytes,6,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	VtapId               *uint32  `protobuf:"varint,7,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncIP) Reset()         { *m = GenesisSyncIP{} }
func (m *GenesisSyncIP) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncIP) ProtoMessage()    {}
func (*GenesisSyncIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{2}
}
func (m *GenesisSyncIP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncIP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncIP.Merge(m, src)
}
func (m *GenesisSyncIP) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncIP) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncIP.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncIP proto.InternalMessageInfo

func (m *GenesisSyncIP) GetMasklen() uint32 {
	if m != nil && m.Masklen != nil {
		return *m.Masklen
	}
	return 0
}

func (m *GenesisSyncIP) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *GenesisSyncIP) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncIP) GetVinterfaceLcuuid() string {
	if m != nil && m.VinterfaceLcuuid != nil {
		return *m.VinterfaceLcuuid
	}
	return ""
}

func (m *GenesisSyncIP) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncIP) GetLastSeen() string {
	if m != nil && m.LastSeen != nil {
		return *m.LastSeen
	}
	return ""
}

func (m *GenesisSyncIP) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

type GenesisSyncHost struct {
	Lcuuid               *string  `protobuf:"bytes,1,opt,name=lcuuid" json:"lcuuid,omitempty"`
	Hostname             *string  `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Ip                   *string  `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	NodeIp               *string  `protobuf:"bytes,4,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	VtapId               *uint32  `protobuf:"varint,5,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncHost) Reset()         { *m = GenesisSyncHost{} }
func (m *GenesisSyncHost) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncHost) ProtoMessage()    {}
func (*GenesisSyncHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{3}
}
func (m *GenesisSyncHost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncHost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncHost.Merge(m, src)
}
func (m *GenesisSyncHost) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncHost) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncHost.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncHost proto.InternalMessageInfo

func (m *GenesisSyncHost) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncHost) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *GenesisSyncHost) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *GenesisSyncHost) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncHost) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

type GenesisSyncLldp struct {
	Lcuuid                *string  `protobuf:"bytes,1,opt,name=lcuuid" json:"lcuuid,omitempty"`
	HostIp                *string  `protobuf:"bytes,2,opt,name=host_ip,json=hostIp" json:"host_ip,omitempty"`
	HostInterface         *string  `protobuf:"bytes,3,opt,name=host_interface,json=hostInterface" json:"host_interface,omitempty"`
	SystemName            *string  `protobuf:"bytes,4,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
	ManagementAddress     *string  `protobuf:"bytes,5,opt,name=management_address,json=managementAddress" json:"management_address,omitempty"`
	VinterfaceLcuuid      *string  `protobuf:"bytes,6,opt,name=vinterface_lcuuid,json=vinterfaceLcuuid" json:"vinterface_lcuuid,omitempty"`
	VinterfaceDescription *string  `protobuf:"bytes,7,opt,name=vinterface_description,json=vinterfaceDescription" json:"vinterface_description,omitempty"`
	NodeIp                *string  `protobuf:"bytes,8,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	LastSeen              *string  `protobuf:"bytes,9,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	VtapId                *uint32  `protobuf:"varint,10,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GenesisSyncLldp) Reset()         { *m = GenesisSyncLldp{} }
func (m *GenesisSyncLldp) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncLldp) ProtoMessage()    {}
func (*GenesisSyncLldp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{4}
}
func (m *GenesisSyncLldp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncLldp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncLldp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncLldp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncLldp.Merge(m, src)
}
func (m *GenesisSyncLldp) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncLldp) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncLldp.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncLldp proto.InternalMessageInfo

func (m *GenesisSyncLldp) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncLldp) GetHostIp() string {
	if m != nil && m.HostIp != nil {
		return *m.HostIp
	}
	return ""
}

func (m *GenesisSyncLldp) GetHostInterface() string {
	if m != nil && m.HostInterface != nil {
		return *m.HostInterface
	}
	return ""
}

func (m *GenesisSyncLldp) GetSystemName() string {
	if m != nil && m.SystemName != nil {
		return *m.SystemName
	}
	return ""
}

func (m *GenesisSyncLldp) GetManagementAddress() string {
	if m != nil && m.ManagementAddress != nil {
		return *m.ManagementAddress
	}
	return ""
}

func (m *GenesisSyncLldp) GetVinterfaceLcuuid() string {
	if m != nil && m.VinterfaceLcuuid != nil {
		return *m.VinterfaceLcuuid
	}
	return ""
}

func (m *GenesisSyncLldp) GetVinterfaceDescription() string {
	if m != nil && m.VinterfaceDescription != nil {
		return *m.VinterfaceDescription
	}
	return ""
}

func (m *GenesisSyncLldp) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncLldp) GetLastSeen() string {
	if m != nil && m.LastSeen != nil {
		return *m.LastSeen
	}
	return ""
}

func (m *GenesisSyncLldp) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

type GenesisSyncNetwork struct {
	SegmentationId       *uint32  `protobuf:"varint,1,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	NetType              *uint32  `protobuf:"varint,2,opt,name=net_type,json=netType" json:"net_type,omitempty"`
	External             *bool    `protobuf:"varint,3,opt,name=external" json:"external,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Lcuuid               *string  `protobuf:"bytes,5,opt,name=lcuuid" json:"lcuuid,omitempty"`
	VpcLcuuid            *string  `protobuf:"bytes,6,opt,name=vpc_lcuuid,json=vpcLcuuid" json:"vpc_lcuuid,omitempty"`
	NodeIp               *string  `protobuf:"bytes,7,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	VtapId               *uint32  `protobuf:"varint,8,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncNetwork) Reset()         { *m = GenesisSyncNetwork{} }
func (m *GenesisSyncNetwork) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncNetwork) ProtoMessage()    {}
func (*GenesisSyncNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{5}
}
func (m *GenesisSyncNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncNetwork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncNetwork.Merge(m, src)
}
func (m *GenesisSyncNetwork) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncNetwork proto.InternalMessageInfo

func (m *GenesisSyncNetwork) GetSegmentationId() uint32 {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return 0
}

func (m *GenesisSyncNetwork) GetNetType() uint32 {
	if m != nil && m.NetType != nil {
		return *m.NetType
	}
	return 0
}

func (m *GenesisSyncNetwork) GetExternal() bool {
	if m != nil && m.External != nil {
		return *m.External
	}
	return false
}

func (m *GenesisSyncNetwork) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GenesisSyncNetwork) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncNetwork) GetVpcLcuuid() string {
	if m != nil && m.VpcLcuuid != nil {
		return *m.VpcLcuuid
	}
	return ""
}

func (m *GenesisSyncNetwork) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncNetwork) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

type GenesisSyncPort struct {
	Type                 *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	DeviceType           *uint32  `protobuf:"varint,2,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	Lcuuid               *string  `protobuf:"bytes,3,opt,name=lcuuid" json:"lcuuid,omitempty"`
	Mac                  *string  `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	DeviceLcuuid         *string  `protobuf:"bytes,5,opt,name=device_lcuuid,json=deviceLcuuid" json:"device_lcuuid,omitempty"`
	NetworkLcuuid        *string  `protobuf:"bytes,6,opt,name=network_lcuuid,json=networkLcuuid" json:"network_lcuuid,omitempty"`
	VpcLcuuid            *string  `protobuf:"bytes,7,opt,name=vpc_lcuuid,json=vpcLcuuid" json:"vpc_lcuuid,omitempty"`
	NodeIp               *string  `protobuf:"bytes,8,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	VtapId               *uint32  `protobuf:"varint,9,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncPort) Reset()         { *m = GenesisSyncPort{} }
func (m *GenesisSyncPort) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncPort) ProtoMessage()    {}
func (*GenesisSyncPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{6}
}
func (m *GenesisSyncPort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncPort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncPort.Merge(m, src)
}
func (m *GenesisSyncPort) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncPort) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncPort.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncPort proto.InternalMessageInfo

func (m *GenesisSyncPort) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GenesisSyncPort) GetDeviceType() uint32 {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return 0
}

func (m *GenesisSyncPort) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncPort) GetMac() string {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return ""
}

func (m *GenesisSyncPort) GetDeviceLcuuid() string {
	if m != nil && m.DeviceLcuuid != nil {
		return *m.DeviceLcuuid
	}
	return ""
}

func (m *GenesisSyncPort) GetNetworkLcuuid() string {
	if m != nil && m.NetworkLcuuid != nil {
		return *m.NetworkLcuuid
	}
	return ""
}

func (m *GenesisSyncPort) GetVpcLcuuid() string {
	if m != nil && m.VpcLcuuid != nil {
		return *m.VpcLcuuid
	}
	return ""
}

func (m *GenesisSyncPort) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncPort) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

type GenesisSyncVm struct {
	State                *uint32  `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	Lcuuid               *string  `protobuf:"bytes,2,opt,name=lcuuid" json:"lcuuid,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Label                *string  `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	VpcLcuuid            *string  `protobuf:"bytes,5,opt,name=vpc_lcuuid,json=vpcLcuuid" json:"vpc_lcuuid,omitempty"`
	LaunchServer         *string  `protobuf:"bytes,6,opt,name=launch_server,json=launchServer" json:"launch_server,omitempty"`
	NodeIp               *string  `protobuf:"bytes,7,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	CreatedAt            *string  `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	VtapId               *uint32  `protobuf:"varint,9,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncVm) Reset()         { *m = GenesisSyncVm{} }
func (m *GenesisSyncVm) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncVm) ProtoMessage()    {}
func (*GenesisSyncVm) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{7}
}
func (m *GenesisSyncVm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncVm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncVm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncVm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncVm.Merge(m, src)
}
func (m *GenesisSyncVm) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncVm) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncVm.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncVm proto.InternalMessageInfo

func (m *GenesisSyncVm) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *GenesisSyncVm) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncVm) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GenesisSyncVm) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *GenesisSyncVm) GetVpcLcuuid() string {
	if m != nil && m.VpcLcuuid != nil {
		return *m.VpcLcuuid
	}
	return ""
}

func (m *GenesisSyncVm) GetLaunchServer() string {
	if m != nil && m.LaunchServer != nil {
		return *m.LaunchServer
	}
	return ""
}

func (m *GenesisSyncVm) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncVm) GetCreatedAt() string {
	if m != nil && m.CreatedAt != nil {
		return *m.CreatedAt
	}
	return ""
}

func (m *GenesisSyncVm) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

type GenesisSyncVpc struct {
	Lcuuid               *string  `protobuf:"bytes,1,opt,name=lcuuid" json:"lcuuid,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NodeIp               *string  `protobuf:"bytes,3,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	VtapId               *uint32  `protobuf:"varint,4,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncVpc) Reset()         { *m = GenesisSyncVpc{} }
func (m *GenesisSyncVpc) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncVpc) ProtoMessage()    {}
func (*GenesisSyncVpc) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{8}
}
func (m *GenesisSyncVpc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncVpc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncVpc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncVpc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncVpc.Merge(m, src)
}
func (m *GenesisSyncVpc) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncVpc) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncVpc.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncVpc proto.InternalMessageInfo

func (m *GenesisSyncVpc) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncVpc) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GenesisSyncVpc) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncVpc) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

type GenesisSyncVinterface struct {
	VtapId               *uint32  `protobuf:"varint,1,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	Lcuuid               *string  `protobuf:"bytes,2,opt,name=lcuuid" json:"lcuuid,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Ips                  *string  `protobuf:"bytes,4,opt,name=ips" json:"ips,omitempty"`
	Mac                  *string  `protobuf:"bytes,5,opt,name=mac" json:"mac,omitempty"`
	TapName              *string  `protobuf:"bytes,6,opt,name=tap_name,json=tapName" json:"tap_name,omitempty"`
	TapMac               *string  `protobuf:"bytes,7,opt,name=tap_mac,json=tapMac" json:"tap_mac,omitempty"`
	DeviceLcuuid         *string  `protobuf:"bytes,8,opt,name=device_lcuuid,json=deviceLcuuid" json:"device_lcuuid,omitempty"`
	DeviceName           *string  `protobuf:"bytes,9,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	DeviceType           *string  `protobuf:"bytes,10,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	HostIp               *string  `protobuf:"bytes,11,opt,name=host_ip,json=hostIp" json:"host_ip,omitempty"`
	KubernetesClusterId  *string  `protobuf:"bytes,12,opt,name=kubernetes_cluster_id,json=kubernetesClusterId" json:"kubernetes_cluster_id,omitempty"`
	NodeIp               *string  `protobuf:"bytes,13,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	LastSeen             *string  `protobuf:"bytes,14,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncVinterface) Reset()         { *m = GenesisSyncVinterface{} }
func (m *GenesisSyncVinterface) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncVinterface) ProtoMessage()    {}
func (*GenesisSyncVinterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{9}
}
func (m *GenesisSyncVinterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncVinterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncVinterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncVinterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncVinterface.Merge(m, src)
}
func (m *GenesisSyncVinterface) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncVinterface) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncVinterface.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncVinterface proto.InternalMessageInfo

func (m *GenesisSyncVinterface) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

func (m *GenesisSyncVinterface) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *GenesisSyncVinterface) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GenesisSyncVinterface) GetIps() string {
	if m != nil && m.Ips != nil {
		return *m.Ips
	}
	return ""
}

func (m *GenesisSyncVinterface) GetMac() string {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return ""
}

func (m *GenesisSyncVinterface) GetTapName() string {
	if m != nil && m.TapName != nil {
		return *m.TapName
	}
	return ""
}

func (m *GenesisSyncVinterface) GetTapMac() string {
	if m != nil && m.TapMac != nil {
		return *m.TapMac
	}
	return ""
}

func (m *GenesisSyncVinterface) GetDeviceLcuuid() string {
	if m != nil && m.DeviceLcuuid != nil {
		return *m.DeviceLcuuid
	}
	return ""
}

func (m *GenesisSyncVinterface) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

func (m *GenesisSyncVinterface) GetDeviceType() string {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return ""
}

func (m *GenesisSyncVinterface) GetHostIp() string {
	if m != nil && m.HostIp != nil {
		return *m.HostIp
	}
	return ""
}

func (m *GenesisSyncVinterface) GetKubernetesClusterId() string {
	if m != nil && m.KubernetesClusterId != nil {
		return *m.KubernetesClusterId
	}
	return ""
}

func (m *GenesisSyncVinterface) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *GenesisSyncVinterface) GetLastSeen() string {
	if m != nil && m.LastSeen != nil {
		return *m.LastSeen
	}
	return ""
}

type GenesisSyncData struct {
	Ip                   []*GenesisSyncIP         `protobuf:"bytes,1,rep,name=ip" json:"ip,omitempty"`
	Host                 []*GenesisSyncHost       `protobuf:"bytes,2,rep,name=host" json:"host,omitempty"`
	Lldp                 []*GenesisSyncLldp       `protobuf:"bytes,3,rep,name=lldp" json:"lldp,omitempty"`
	Network              []*GenesisSyncNetwork    `protobuf:"bytes,4,rep,name=network" json:"network,omitempty"`
	Port                 []*GenesisSyncPort       `protobuf:"bytes,5,rep,name=port" json:"port,omitempty"`
	Vm                   []*GenesisSyncVm         `protobuf:"bytes,6,rep,name=vm" json:"vm,omitempty"`
	Vpc                  []*GenesisSyncVpc        `protobuf:"bytes,7,rep,name=vpc" json:"vpc,omitempty"`
	Vinterface           []*GenesisSyncVinterface `protobuf:"bytes,8,rep,name=vinterface" json:"vinterface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GenesisSyncData) Reset()         { *m = GenesisSyncData{} }
func (m *GenesisSyncData) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncData) ProtoMessage()    {}
func (*GenesisSyncData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{10}
}
func (m *GenesisSyncData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncData.Merge(m, src)
}
func (m *GenesisSyncData) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncData) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncData.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncData proto.InternalMessageInfo

func (m *GenesisSyncData) GetIp() []*GenesisSyncIP {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *GenesisSyncData) GetHost() []*GenesisSyncHost {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *GenesisSyncData) GetLldp() []*GenesisSyncLldp {
	if m != nil {
		return m.Lldp
	}
	return nil
}

func (m *GenesisSyncData) GetNetwork() []*GenesisSyncNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *GenesisSyncData) GetPort() []*GenesisSyncPort {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *GenesisSyncData) GetVm() []*GenesisSyncVm {
	if m != nil {
		return m.Vm
	}
	return nil
}

func (m *GenesisSyncData) GetVpc() []*GenesisSyncVpc {
	if m != nil {
		return m.Vpc
	}
	return nil
}

func (m *GenesisSyncData) GetVinterface() []*GenesisSyncVinterface {
	if m != nil {
		return m.Vinterface
	}
	return nil
}

type GenesisSharingSyncRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSharingSyncRequest) Reset()         { *m = GenesisSharingSyncRequest{} }
func (m *GenesisSharingSyncRequest) String() string { return proto.CompactTextString(m) }
func (*GenesisSharingSyncRequest) ProtoMessage()    {}
func (*GenesisSharingSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{11}
}
func (m *GenesisSharingSyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSharingSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSharingSyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSharingSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSharingSyncRequest.Merge(m, src)
}
func (m *GenesisSharingSyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSharingSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSharingSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSharingSyncRequest proto.InternalMessageInfo

type GenesisSharingSyncResponse struct {
	Data                 *GenesisSyncData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GenesisSharingSyncResponse) Reset()         { *m = GenesisSharingSyncResponse{} }
func (m *GenesisSharingSyncResponse) String() string { return proto.CompactTextString(m) }
func (*GenesisSharingSyncResponse) ProtoMessage()    {}
func (*GenesisSharingSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{12}
}
func (m *GenesisSharingSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSharingSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSharingSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSharingSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSharingSyncResponse.Merge(m, src)
}
func (m *GenesisSharingSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSharingSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSharingSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSharingSyncResponse proto.InternalMessageInfo

func (m *GenesisSharingSyncResponse) GetData() *GenesisSyncData {
	if m != nil {
		return m.Data
	}
	return nil
}

type EncryptKeyRequest struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptKeyRequest) Reset()         { *m = EncryptKeyRequest{} }
func (m *EncryptKeyRequest) String() string { return proto.CompactTextString(m) }
func (*EncryptKeyRequest) ProtoMessage()    {}
func (*EncryptKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{13}
}
func (m *EncryptKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptKeyRequest.Merge(m, src)
}
func (m *EncryptKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *EncryptKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptKeyRequest proto.InternalMessageInfo

func (m *EncryptKeyRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type EncryptKeyResponse struct {
	ErrorMsg             *string  `protobuf:"bytes,1,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	EncryptKey           *string  `protobuf:"bytes,2,opt,name=encrypt_key,json=encryptKey" json:"encrypt_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptKeyResponse) Reset()         { *m = EncryptKeyResponse{} }
func (m *EncryptKeyResponse) String() string { return proto.CompactTextString(m) }
func (*EncryptKeyResponse) ProtoMessage()    {}
func (*EncryptKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{14}
}
func (m *EncryptKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptKeyResponse.Merge(m, src)
}
func (m *EncryptKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *EncryptKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptKeyResponse proto.InternalMessageInfo

func (m *EncryptKeyResponse) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

func (m *EncryptKeyResponse) GetEncryptKey() string {
	if m != nil && m.EncryptKey != nil {
		return *m.EncryptKey
	}
	return ""
}

type GetResourceIDRequest struct {
	Type                 *string  `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Count                *uint32  `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResourceIDRequest) Reset()         { *m = GetResourceIDRequest{} }
func (m *GetResourceIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetResourceIDRequest) ProtoMessage()    {}
func (*GetResourceIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{15}
}
func (m *GetResourceIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResourceIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResourceIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResourceIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResourceIDRequest.Merge(m, src)
}
func (m *GetResourceIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetResourceIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResourceIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetResourceIDRequest proto.InternalMessageInfo

func (m *GetResourceIDRequest) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *GetResourceIDRequest) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type GetResourceIDResponse struct {
	Ids                  []uint32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResourceIDResponse) Reset()         { *m = GetResourceIDResponse{} }
func (m *GetResourceIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetResourceIDResponse) ProtoMessage()    {}
func (*GetResourceIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{16}
}
func (m *GetResourceIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResourceIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResourceIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResourceIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResourceIDResponse.Merge(m, src)
}
func (m *GetResourceIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResourceIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResourceIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResourceIDResponse proto.InternalMessageInfo

func (m *GetResourceIDResponse) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ReleaseResourceIDRequest struct {
	Type                 *string  `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Ids                  []uint32 `protobuf:"varint,2,rep,name=ids" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseResourceIDRequest) Reset()         { *m = ReleaseResourceIDRequest{} }
func (m *ReleaseResourceIDRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseResourceIDRequest) ProtoMessage()    {}
func (*ReleaseResourceIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{17}
}
func (m *ReleaseResourceIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseResourceIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseResourceIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseResourceIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseResourceIDRequest.Merge(m, src)
}
func (m *ReleaseResourceIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseResourceIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseResourceIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseResourceIDRequest proto.InternalMessageInfo

func (m *ReleaseResourceIDRequest) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ReleaseResourceIDRequest) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ReleaseResourceIDResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseResourceIDResponse) Reset()         { *m = ReleaseResourceIDResponse{} }
func (m *ReleaseResourceIDResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseResourceIDResponse) ProtoMessage()    {}
func (*ReleaseResourceIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{18}
}
func (m *ReleaseResourceIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseResourceIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseResourceIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseResourceIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseResourceIDResponse.Merge(m, src)
}
func (m *ReleaseResourceIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseResourceIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseResourceIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseResourceIDResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisSharingK8SRequest)(nil), "controller.GenesisSharingK8SRequest")
	proto.RegisterType((*GenesisSharingK8SResponse)(nil), "controller.GenesisSharingK8SResponse")
	proto.RegisterType((*GenesisSyncIP)(nil), "controller.GenesisSyncIP")
	proto.RegisterType((*GenesisSyncHost)(nil), "controller.GenesisSyncHost")
	proto.RegisterType((*GenesisSyncLldp)(nil), "controller.GenesisSyncLldp")
	proto.RegisterType((*GenesisSyncNetwork)(nil), "controller.GenesisSyncNetwork")
	proto.RegisterType((*GenesisSyncPort)(nil), "controller.GenesisSyncPort")
	proto.RegisterType((*GenesisSyncVm)(nil), "controller.GenesisSyncVm")
	proto.RegisterType((*GenesisSyncVpc)(nil), "controller.GenesisSyncVpc")
	proto.RegisterType((*GenesisSyncVinterface)(nil), "controller.GenesisSyncVinterface")
	proto.RegisterType((*GenesisSyncData)(nil), "controller.GenesisSyncData")
	proto.RegisterType((*GenesisSharingSyncRequest)(nil), "controller.GenesisSharingSyncRequest")
	proto.RegisterType((*GenesisSharingSyncResponse)(nil), "controller.GenesisSharingSyncResponse")
	proto.RegisterType((*EncryptKeyRequest)(nil), "controller.EncryptKeyRequest")
	proto.RegisterType((*EncryptKeyResponse)(nil), "controller.EncryptKeyResponse")
	proto.RegisterType((*GetResourceIDRequest)(nil), "controller.GetResourceIDRequest")
	proto.RegisterType((*GetResourceIDResponse)(nil), "controller.GetResourceIDResponse")
	proto.RegisterType((*ReleaseResourceIDRequest)(nil), "controller.ReleaseResourceIDRequest")
	proto.RegisterType((*ReleaseResourceIDResponse)(nil), "controller.ReleaseResourceIDResponse")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 1274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0xaf, 0xd7, 0xbb, 0xd9, 0xdd, 0x97, 0x6c, 0x9a, 0xcc, 0x37, 0x6d, 0x9d, 0xcd, 0xb7, 0xdb,
	0xd6, 0x25, 0xd0, 0x0a, 0x68, 0xa5, 0x22, 0xa4, 0x72, 0x6b, 0x68, 0x51, 0x59, 0xf5, 0x87, 0x22,
	0x07, 0xf5, 0xc0, 0xc5, 0x72, 0xec, 0xd7, 0xc4, 0x8a, 0x3d, 0x1e, 0x3c, 0xb3, 0x0b, 0x7b, 0xe6,
	0xc0, 0x89, 0x3b, 0x27, 0x6e, 0xfc, 0x2f, 0x5c, 0x90, 0xf8, 0x13, 0x50, 0x11, 0x37, 0x2e, 0xdc,
	0x39, 0xa0, 0x19, 0x8f, 0xed, 0xf1, 0x66, 0x9d, 0xc2, 0xcd, 0xf3, 0xe6, 0xbd, 0x79, 0xef, 0xf3,
	0x79, 0x6f, 0xde, 0x3c, 0xc3, 0x56, 0x98, 0x51, 0x91, 0x67, 0x49, 0x82, 0xf9, 0x3d, 0x96, 0x67,
	0x22, 0x23, 0x50, 0x4b, 0xc6, 0x1b, 0x61, 0x96, 0xa6, 0x19, 0x2d, 0x76, 0xdc, 0x4f, 0xc0, 0x79,
	0x8a, 0x14, 0x79, 0xcc, 0x8f, 0x4e, 0x83, 0x3c, 0xa6, 0x27, 0xcf, 0x1e, 0x1e, 0x79, 0xf8, 0xd5,
	0x0c, 0xb9, 0x20, 0xd7, 0x01, 0xc2, 0x64, 0xc6, 0x05, 0xe6, 0x7e, 0x1c, 0x39, 0xd6, 0x4d, 0xeb,
	0xce, 0xd0, 0x1b, 0x6a, 0xc9, 0x34, 0x72, 0xbf, 0xb5, 0x60, 0x77, 0x85, 0x2d, 0x67, 0x19, 0xe5,
	0x48, 0x76, 0xa0, 0x87, 0x2c, 0x0b, 0x4f, 0xb5, 0x5d, 0xb1, 0x20, 0x7b, 0x30, 0xc4, 0x3c, 0xcf,
	0x72, 0x3f, 0xe5, 0x27, 0x4e, 0x47, 0xed, 0x0c, 0x94, 0xe0, 0x05, 0x3f, 0x21, 0x1f, 0x41, 0x1f,
	0xa9, 0xc8, 0x63, 0xe4, 0x8e, 0x7d, 0xd3, 0xbe, 0xb3, 0xfe, 0x60, 0xf7, 0x9e, 0x8e, 0xf5, 0xd9,
	0xec, 0x18, 0x73, 0x8a, 0x02, 0xf9, 0xc1, 0xe1, 0x74, 0x4a, 0x5f, 0x67, 0x5e, 0xa9, 0xe9, 0xfe,
	0x62, 0xc1, 0xa8, 0x8c, 0x62, 0x41, 0xc3, 0xe9, 0x21, 0x71, 0xa0, 0x9f, 0x06, 0xfc, 0x2c, 0x41,
	0xaa, 0x7c, 0x8f, 0xbc, 0x72, 0x49, 0x36, 0xa1, 0x13, 0x33, 0xed, 0xb6, 0x13, 0x33, 0x72, 0x15,
	0xd6, 0x92, 0x70, 0x36, 0x8b, 0x23, 0xc7, 0x56, 0x32, 0xbd, 0x22, 0xef, 0xc3, 0xf6, 0x3c, 0xa6,
	0x02, 0xf3, 0xd7, 0x41, 0x88, 0xbe, 0x56, 0xe9, 0x2a, 0x95, 0xad, 0x7a, 0xe3, 0x79, 0xa1, 0x7c,
	0x0d, 0xfa, 0x34, 0x8b, 0xd0, 0x8f, 0x99, 0xd3, 0x2b, 0x4e, 0x91, 0xcb, 0x29, 0x93, 0x58, 0x93,
	0x80, 0x0b, 0x9f, 0x23, 0x52, 0x67, 0xad, 0xc0, 0x2a, 0x05, 0x47, 0x88, 0x54, 0x5a, 0xcd, 0x45,
	0xc0, 0x24, 0xb1, 0x7d, 0x15, 0xe4, 0x9a, 0x5c, 0x4e, 0x23, 0xf7, 0x3b, 0x0b, 0x2e, 0x1b, 0x78,
	0x3e, 0xcf, 0xb8, 0x30, 0xe2, 0xb4, 0x1a, 0x71, 0x8e, 0x61, 0x70, 0x9a, 0x71, 0x41, 0x83, 0x14,
	0x4b, 0x32, 0xcb, 0xb5, 0xc6, 0x6a, 0x57, 0x58, 0x8d, 0x30, 0xbb, 0x8d, 0x30, 0x8d, 0x48, 0x7a,
	0x8d, 0x48, 0xfe, 0xec, 0x34, 0x22, 0x79, 0x9e, 0x44, 0xac, 0x35, 0x92, 0x6b, 0xd0, 0x97, 0x9e,
	0xfd, 0x8a, 0xde, 0x35, 0xb9, 0x9c, 0x32, 0xb2, 0x0f, 0x9b, 0xc5, 0x46, 0xc9, 0x9a, 0x0e, 0x69,
	0xa4, 0xf6, 0x4b, 0x21, 0xb9, 0x01, 0xeb, 0x7c, 0xc1, 0x05, 0xa6, 0xbe, 0x02, 0x53, 0x44, 0x08,
	0x85, 0xe8, 0xa5, 0x84, 0xf3, 0x21, 0x90, 0x34, 0xa0, 0xc1, 0x09, 0xa6, 0x48, 0x85, 0x1f, 0x44,
	0x51, 0x8e, 0x9c, 0x6b, 0xc2, 0xb7, 0xeb, 0x9d, 0x83, 0x62, 0x63, 0x75, 0x06, 0xd7, 0x5a, 0x32,
	0xf8, 0x31, 0x5c, 0x35, 0x94, 0x23, 0xe4, 0x61, 0x1e, 0x33, 0x11, 0x67, 0x54, 0xa5, 0x66, 0xe8,
	0x5d, 0xa9, 0x77, 0x9f, 0xd4, 0x9b, 0x26, 0xa3, 0x83, 0xf6, 0xc4, 0x0f, 0xdb, 0x13, 0x0f, 0x0d,
	0xba, 0xff, 0xb2, 0x80, 0x18, 0x74, 0xbf, 0x44, 0xf1, 0x75, 0x96, 0x9f, 0x91, 0xf7, 0xe0, 0x32,
	0xc7, 0x13, 0x89, 0x2d, 0x90, 0x5e, 0xcb, 0x9b, 0x38, 0xf2, 0x36, 0x4d, 0xf1, 0x34, 0x22, 0xbb,
	0x30, 0xa0, 0x28, 0x7c, 0xb1, 0x60, 0x45, 0x31, 0x8c, 0xbc, 0x3e, 0x45, 0xf1, 0xc5, 0x82, 0xa1,
	0xac, 0x13, 0xfc, 0x46, 0x60, 0x4e, 0x83, 0x44, 0xd1, 0x3f, 0xf0, 0xaa, 0x35, 0x21, 0xd0, 0x35,
	0x28, 0x57, 0xdf, 0x46, 0x96, 0x7b, 0x8d, 0x2c, 0x5f, 0x07, 0x98, 0xb3, 0xb0, 0x49, 0xe7, 0x70,
	0xce, 0xc2, 0xf3, 0x37, 0xa1, 0xdf, 0x56, 0x62, 0x83, 0x06, 0xe6, 0xef, 0x9b, 0x25, 0x76, 0x98,
	0xe5, 0x42, 0x06, 0xa4, 0x30, 0x14, 0x28, 0xd5, 0xb7, 0x2c, 0x8f, 0x08, 0xe7, 0x71, 0x88, 0x26,
	0x3c, 0x28, 0x44, 0x0a, 0x61, 0xdb, 0x4d, 0xde, 0x02, 0x3b, 0x0d, 0x42, 0x0d, 0x4e, 0x7e, 0x92,
	0xdb, 0x30, 0xd2, 0x47, 0x35, 0x20, 0x6e, 0x14, 0x42, 0x8d, 0x64, 0x1f, 0x36, 0x69, 0xc1, 0x7f,
	0x13, 0xec, 0x48, 0x4b, 0x9f, 0xaf, 0xe2, 0xa3, 0x7f, 0x01, 0x1f, 0x83, 0x36, 0x3e, 0x86, 0x0d,
	0x3e, 0xfe, 0x6e, 0x36, 0xb3, 0x57, 0xa9, 0x6c, 0xa3, 0x5c, 0x04, 0xa2, 0xa4, 0xa3, 0x58, 0x18,
	0x70, 0x3b, 0x0d, 0xb8, 0x65, 0x32, 0x6d, 0x23, 0x99, 0x3b, 0xd0, 0x4b, 0x82, 0x63, 0x4c, 0x34,
	0x09, 0xc5, 0x62, 0x29, 0xf4, 0xde, 0x72, 0xe8, 0xb7, 0x61, 0x94, 0x04, 0x33, 0x1a, 0x9e, 0xfa,
	0x1c, 0xf3, 0x39, 0xe6, 0x1a, 0xff, 0x46, 0x21, 0x3c, 0x52, 0xb2, 0xf6, 0x7c, 0xcb, 0x87, 0x23,
	0xc7, 0x40, 0x60, 0xe4, 0x07, 0x42, 0x63, 0x1f, 0x6a, 0xc9, 0x81, 0x68, 0x87, 0x4f, 0x61, 0xd3,
	0x44, 0xcf, 0xc2, 0xd6, 0x7e, 0x53, 0x02, 0xed, 0x18, 0x40, 0x8d, 0x70, 0xec, 0x36, 0xba, 0xbb,
	0x0d, 0x7f, 0x3f, 0xda, 0x70, 0xc5, 0x74, 0x58, 0x5d, 0x73, 0xd3, 0xc4, 0x32, 0x4d, 0xfe, 0x13,
	0xf3, 0x5b, 0x60, 0xc7, 0x8c, 0x97, 0xc5, 0x17, 0x33, 0x5e, 0x96, 0x63, 0xaf, 0x2e, 0xc7, 0x5d,
	0x18, 0x48, 0x3f, 0xca, 0xb6, 0xe0, 0xb8, 0x2f, 0x02, 0xf6, 0x52, 0xe3, 0x91, 0x5b, 0xd2, 0x40,
	0xd3, 0x2b, 0x02, 0xf6, 0x62, 0x55, 0x09, 0x0f, 0x56, 0x94, 0x70, 0x7d, 0x65, 0xd4, 0xd9, 0x45,
	0x1b, 0xd2, 0x57, 0x46, 0x1d, 0xbf, 0x74, 0xa7, 0xc0, 0x54, 0x50, 0x77, 0xca, 0xe8, 0xe9, 0xeb,
	0x8d, 0x9e, 0xfe, 0x00, 0xae, 0x9c, 0x55, 0x0f, 0xb2, 0x6f, 0x8c, 0x08, 0x1b, 0x4a, 0xed, 0x7f,
	0xf5, 0xe6, 0xe3, 0x72, 0x58, 0x30, 0x93, 0x33, 0x6a, 0x6f, 0x96, 0x9b, 0xcd, 0x66, 0xe9, 0xfe,
	0x64, 0x37, 0xfa, 0xc3, 0x93, 0x40, 0x04, 0xe4, 0xae, 0x7a, 0xd8, 0xac, 0x6a, 0x40, 0xa8, 0x46,
	0x9d, 0xc6, 0x14, 0xa0, 0xde, 0xbc, 0xfb, 0xd0, 0x95, 0x21, 0x3b, 0x1d, 0xa5, 0xbc, 0xd7, 0xa2,
	0x2c, 0x9f, 0x58, 0x4f, 0x29, 0x4a, 0x83, 0x24, 0x89, 0x98, 0x1e, 0x3f, 0xda, 0x0c, 0xe4, 0x4b,
	0xe8, 0x29, 0x45, 0xf2, 0x10, 0xfa, 0xba, 0x25, 0x38, 0x5d, 0x65, 0x33, 0x69, 0xb1, 0xd1, 0xed,
	0xdc, 0x2b, 0xd5, 0xa5, 0x2b, 0x96, 0xe5, 0xc2, 0xe9, 0x5d, 0xe8, 0x4a, 0x76, 0x44, 0x4f, 0x29,
	0x4a, 0xdc, 0xf3, 0xd4, 0x59, 0xbb, 0x10, 0xf7, 0xab, 0xd4, 0xeb, 0xcc, 0x53, 0xf2, 0x01, 0xd8,
	0x73, 0x26, 0xab, 0x46, 0xea, 0x8e, 0xdb, 0x74, 0x59, 0xe8, 0x49, 0x35, 0x72, 0x00, 0x50, 0x3f,
	0x70, 0xce, 0x40, 0x19, 0xdd, 0x6a, 0x33, 0xaa, 0x14, 0x3d, 0xc3, 0xc8, 0xdd, 0x5b, 0x9e, 0x04,
	0xa5, 0xae, 0x1e, 0x23, 0xdd, 0x17, 0x30, 0x5e, 0xb5, 0xa9, 0xe7, 0xc4, 0xfb, 0xd0, 0x8d, 0x02,
	0x11, 0xa8, 0x6b, 0xd6, 0xce, 0x83, 0xcc, 0xbc, 0xa7, 0x14, 0xdd, 0x7d, 0xd8, 0xfe, 0x8c, 0x86,
	0xf9, 0x82, 0x89, 0x67, 0xb8, 0x28, 0x47, 0xd5, 0x2d, 0xb0, 0xcf, 0x70, 0xa1, 0x9b, 0x84, 0xfc,
	0x74, 0x3d, 0x20, 0xa6, 0x9a, 0xf6, 0xd6, 0x98, 0x3f, 0xad, 0xa5, 0xf9, 0xf3, 0x06, 0xac, 0x63,
	0x61, 0xe2, 0xcb, 0xc3, 0x8a, 0x0b, 0x0e, 0x58, 0x9d, 0xe2, 0x3e, 0x82, 0x9d, 0xa7, 0x28, 0x3c,
	0xe4, 0xd9, 0x2c, 0x0f, 0x71, 0xfa, 0xa4, 0xf4, 0x5e, 0x3f, 0x59, 0x1d, 0x79, 0xf9, 0xd5, 0x93,
	0xb5, 0x03, 0xbd, 0x30, 0x9b, 0x51, 0x59, 0x7c, 0x1d, 0xd9, 0xb8, 0xd5, 0xc2, 0xbd, 0x2b, 0x1b,
	0x4e, 0xe3, 0x04, 0x1d, 0x98, 0xec, 0x15, 0x11, 0x57, 0x65, 0x3d, 0xf2, 0xe4, 0xa7, 0xfb, 0x08,
	0x1c, 0x0f, 0x13, 0x0c, 0x38, 0xfe, 0x3b, 0x87, 0xfa, 0x84, 0x4e, 0x7d, 0xc2, 0x1e, 0xec, 0xae,
	0x38, 0xa1, 0x70, 0xf8, 0xe0, 0x0f, 0x1b, 0xe0, 0x71, 0xc5, 0x35, 0x39, 0x86, 0xed, 0x73, 0xb3,
	0x3c, 0x79, 0x67, 0x55, 0x36, 0x96, 0x7f, 0x13, 0xc6, 0xfb, 0x6f, 0xd1, 0x2a, 0x1c, 0xba, 0x97,
	0x08, 0xd6, 0x03, 0x4e, 0x5d, 0x08, 0xe4, 0x02, 0x73, 0xa3, 0x8a, 0xc6, 0xef, 0xbe, 0x4d, 0xad,
	0x72, 0x73, 0x28, 0xdf, 0x50, 0x51, 0x27, 0x9f, 0x5c, 0x37, 0x4d, 0xcf, 0xd5, 0xce, 0x78, 0xd2,
	0xb6, 0x5d, 0x9d, 0xf8, 0x4a, 0x9d, 0x58, 0x93, 0x48, 0x6e, 0x36, 0x83, 0x39, 0x5f, 0x12, 0xe3,
	0x5b, 0x17, 0x68, 0x54, 0xe7, 0x1e, 0xc3, 0xf6, 0xb9, 0x04, 0x35, 0x49, 0x6f, 0xab, 0x80, 0x26,
	0xe9, 0xad, 0x59, 0x76, 0x2f, 0x7d, 0xfa, 0xff, 0x9f, 0xdf, 0x4c, 0xac, 0x5f, 0xdf, 0x4c, 0xac,
	0xdf, 0xde, 0x4c, 0xac, 0x1f, 0x7e, 0x9f, 0x5c, 0xfa, 0xd2, 0xf8, 0x19, 0xfc, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x28, 0x4e, 0xc8, 0x45, 0x2b, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	GenesisSharingK8S(ctx context.Context, in *GenesisSharingK8SRequest, opts ...grpc.CallOption) (*GenesisSharingK8SResponse, error)
	GenesisSharingSync(ctx context.Context, in *GenesisSharingSyncRequest, opts ...grpc.CallOption) (*GenesisSharingSyncResponse, error)
	GetEncryptKey(ctx context.Context, in *EncryptKeyRequest, opts ...grpc.CallOption) (*EncryptKeyResponse, error)
	GetResourceID(ctx context.Context, in *GetResourceIDRequest, opts ...grpc.CallOption) (*GetResourceIDResponse, error)
	ReleaseResourceID(ctx context.Context, in *ReleaseResourceIDRequest, opts ...grpc.CallOption) (*ReleaseResourceIDResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) GenesisSharingK8S(ctx context.Context, in *GenesisSharingK8SRequest, opts ...grpc.CallOption) (*GenesisSharingK8SResponse, error) {
	out := new(GenesisSharingK8SResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/GenesisSharingK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GenesisSharingSync(ctx context.Context, in *GenesisSharingSyncRequest, opts ...grpc.CallOption) (*GenesisSharingSyncResponse, error) {
	out := new(GenesisSharingSyncResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/GenesisSharingSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetEncryptKey(ctx context.Context, in *EncryptKeyRequest, opts ...grpc.CallOption) (*EncryptKeyResponse, error) {
	out := new(EncryptKeyResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/GetEncryptKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetResourceID(ctx context.Context, in *GetResourceIDRequest, opts ...grpc.CallOption) (*GetResourceIDResponse, error) {
	out := new(GetResourceIDResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/GetResourceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ReleaseResourceID(ctx context.Context, in *ReleaseResourceIDRequest, opts ...grpc.CallOption) (*ReleaseResourceIDResponse, error) {
	out := new(ReleaseResourceIDResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/ReleaseResourceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	GenesisSharingK8S(context.Context, *GenesisSharingK8SRequest) (*GenesisSharingK8SResponse, error)
	GenesisSharingSync(context.Context, *GenesisSharingSyncRequest) (*GenesisSharingSyncResponse, error)
	GetEncryptKey(context.Context, *EncryptKeyRequest) (*EncryptKeyResponse, error)
	GetResourceID(context.Context, *GetResourceIDRequest) (*GetResourceIDResponse, error)
	ReleaseResourceID(context.Context, *ReleaseResourceIDRequest) (*ReleaseResourceIDResponse, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) GenesisSharingK8S(ctx context.Context, req *GenesisSharingK8SRequest) (*GenesisSharingK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisSharingK8S not implemented")
}
func (*UnimplementedControllerServer) GenesisSharingSync(ctx context.Context, req *GenesisSharingSyncRequest) (*GenesisSharingSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisSharingSync not implemented")
}
func (*UnimplementedControllerServer) GetEncryptKey(ctx context.Context, req *EncryptKeyRequest) (*EncryptKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncryptKey not implemented")
}
func (*UnimplementedControllerServer) GetResourceID(ctx context.Context, req *GetResourceIDRequest) (*GetResourceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceID not implemented")
}
func (*UnimplementedControllerServer) ReleaseResourceID(ctx context.Context, req *ReleaseResourceIDRequest) (*ReleaseResourceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseResourceID not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_GenesisSharingK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisSharingK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GenesisSharingK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/GenesisSharingK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GenesisSharingK8S(ctx, req.(*GenesisSharingK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GenesisSharingSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisSharingSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GenesisSharingSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/GenesisSharingSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GenesisSharingSync(ctx, req.(*GenesisSharingSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetEncryptKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetEncryptKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/GetEncryptKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetEncryptKey(ctx, req.(*EncryptKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetResourceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetResourceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/GetResourceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetResourceID(ctx, req.(*GetResourceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ReleaseResourceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseResourceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ReleaseResourceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/ReleaseResourceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ReleaseResourceID(ctx, req.(*ReleaseResourceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenesisSharingK8S",
			Handler:    _Controller_GenesisSharingK8S_Handler,
		},
		{
			MethodName: "GenesisSharingSync",
			Handler:    _Controller_GenesisSharingSync_Handler,
		},
		{
			MethodName: "GetEncryptKey",
			Handler:    _Controller_GetEncryptKey_Handler,
		},
		{
			MethodName: "GetResourceID",
			Handler:    _Controller_GetResourceID_Handler,
		},
		{
			MethodName: "ReleaseResourceID",
			Handler:    _Controller_ReleaseResourceID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func (m *GenesisSharingK8SRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSharingK8SRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSharingK8SRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClusterId != nil {
		i -= len(*m.ClusterId)
		copy(dAtA[i:], *m.ClusterId)
		i = encodeVarintController(dAtA, i, uint64(len(*m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSharingK8SResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSharingK8SResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSharingK8SResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintController(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != nil {
		i -= len(*m.Epoch)
		copy(dAtA[i:], *m.Epoch)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Epoch)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncIP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncIP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x38
	}
	if m.LastSeen != nil {
		i -= len(*m.LastSeen)
		copy(dAtA[i:], *m.LastSeen)
		i = encodeVarintController(dAtA, i, uint64(len(*m.LastSeen)))
		i--
		dAtA[i] = 0x32
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VinterfaceLcuuid != nil {
		i -= len(*m.VinterfaceLcuuid)
		copy(dAtA[i:], *m.VinterfaceLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.VinterfaceLcuuid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if m.Masklen != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.Masklen))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncHost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncHost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncHost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x28
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Hostname != nil {
		i -= len(*m.Hostname)
		copy(dAtA[i:], *m.Hostname)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncLldp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncLldp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncLldp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x50
	}
	if m.LastSeen != nil {
		i -= len(*m.LastSeen)
		copy(dAtA[i:], *m.LastSeen)
		i = encodeVarintController(dAtA, i, uint64(len(*m.LastSeen)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x42
	}
	if m.VinterfaceDescription != nil {
		i -= len(*m.VinterfaceDescription)
		copy(dAtA[i:], *m.VinterfaceDescription)
		i = encodeVarintController(dAtA, i, uint64(len(*m.VinterfaceDescription)))
		i--
		dAtA[i] = 0x3a
	}
	if m.VinterfaceLcuuid != nil {
		i -= len(*m.VinterfaceLcuuid)
		copy(dAtA[i:], *m.VinterfaceLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.VinterfaceLcuuid)))
		i--
		dAtA[i] = 0x32
	}
	if m.ManagementAddress != nil {
		i -= len(*m.ManagementAddress)
		copy(dAtA[i:], *m.ManagementAddress)
		i = encodeVarintController(dAtA, i, uint64(len(*m.ManagementAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SystemName != nil {
		i -= len(*m.SystemName)
		copy(dAtA[i:], *m.SystemName)
		i = encodeVarintController(dAtA, i, uint64(len(*m.SystemName)))
		i--
		dAtA[i] = 0x22
	}
	if m.HostInterface != nil {
		i -= len(*m.HostInterface)
		copy(dAtA[i:], *m.HostInterface)
		i = encodeVarintController(dAtA, i, uint64(len(*m.HostInterface)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HostIp != nil {
		i -= len(*m.HostIp)
		copy(dAtA[i:], *m.HostIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.HostIp)))
		i--
		dAtA[i] = 0x12
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x40
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x3a
	}
	if m.VpcLcuuid != nil {
		i -= len(*m.VpcLcuuid)
		copy(dAtA[i:], *m.VpcLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.VpcLcuuid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.External != nil {
		i--
		if *m.External {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NetType != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.NetType))
		i--
		dAtA[i] = 0x10
	}
	if m.SegmentationId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.SegmentationId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x48
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x42
	}
	if m.VpcLcuuid != nil {
		i -= len(*m.VpcLcuuid)
		copy(dAtA[i:], *m.VpcLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.VpcLcuuid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NetworkLcuuid != nil {
		i -= len(*m.NetworkLcuuid)
		copy(dAtA[i:], *m.NetworkLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NetworkLcuuid)))
		i--
		dAtA[i] = 0x32
	}
	if m.DeviceLcuuid != nil {
		i -= len(*m.DeviceLcuuid)
		copy(dAtA[i:], *m.DeviceLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.DeviceLcuuid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Mac != nil {
		i -= len(*m.Mac)
		copy(dAtA[i:], *m.Mac)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Mac)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceType != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.DeviceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncVm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != nil {
		i -= len(*m.CreatedAt)
		copy(dAtA[i:], *m.CreatedAt)
		i = encodeVarintController(dAtA, i, uint64(len(*m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LaunchServer != nil {
		i -= len(*m.LaunchServer)
		copy(dAtA[i:], *m.LaunchServer)
		i = encodeVarintController(dAtA, i, uint64(len(*m.LaunchServer)))
		i--
		dAtA[i] = 0x32
	}
	if m.VpcLcuuid != nil {
		i -= len(*m.VpcLcuuid)
		copy(dAtA[i:], *m.VpcLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.VpcLcuuid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Label != nil {
		i -= len(*m.Label)
		copy(dAtA[i:], *m.Label)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncVpc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncVpc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncVpc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x20
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncVinterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncVinterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncVinterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastSeen != nil {
		i -= len(*m.LastSeen)
		copy(dAtA[i:], *m.LastSeen)
		i = encodeVarintController(dAtA, i, uint64(len(*m.LastSeen)))
		i--
		dAtA[i] = 0x72
	}
	if m.NodeIp != nil {
		i -= len(*m.NodeIp)
		copy(dAtA[i:], *m.NodeIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.NodeIp)))
		i--
		dAtA[i] = 0x6a
	}
	if m.KubernetesClusterId != nil {
		i -= len(*m.KubernetesClusterId)
		copy(dAtA[i:], *m.KubernetesClusterId)
		i = encodeVarintController(dAtA, i, uint64(len(*m.KubernetesClusterId)))
		i--
		dAtA[i] = 0x62
	}
	if m.HostIp != nil {
		i -= len(*m.HostIp)
		copy(dAtA[i:], *m.HostIp)
		i = encodeVarintController(dAtA, i, uint64(len(*m.HostIp)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DeviceType != nil {
		i -= len(*m.DeviceType)
		copy(dAtA[i:], *m.DeviceType)
		i = encodeVarintController(dAtA, i, uint64(len(*m.DeviceType)))
		i--
		dAtA[i] = 0x52
	}
	if m.DeviceName != nil {
		i -= len(*m.DeviceName)
		copy(dAtA[i:], *m.DeviceName)
		i = encodeVarintController(dAtA, i, uint64(len(*m.DeviceName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DeviceLcuuid != nil {
		i -= len(*m.DeviceLcuuid)
		copy(dAtA[i:], *m.DeviceLcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.DeviceLcuuid)))
		i--
		dAtA[i] = 0x42
	}
	if m.TapMac != nil {
		i -= len(*m.TapMac)
		copy(dAtA[i:], *m.TapMac)
		i = encodeVarintController(dAtA, i, uint64(len(*m.TapMac)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TapName != nil {
		i -= len(*m.TapName)
		copy(dAtA[i:], *m.TapName)
		i = encodeVarintController(dAtA, i, uint64(len(*m.TapName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Mac != nil {
		i -= len(*m.Mac)
		copy(dAtA[i:], *m.Mac)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Mac)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ips != nil {
		i -= len(*m.Ips)
		copy(dAtA[i:], *m.Ips)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Ips)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.VtapId != nil {
		i = encodeVarintController(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vinterface) > 0 {
		for iNdEx := len(m.Vinterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vinterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Vpc) > 0 {
		for iNdEx := len(m.Vpc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vpc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Vm) > 0 {
		for iNdEx := len(m.Vm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Port) > 0 {
		for iNdEx := len(m.Port) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Port[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Network) > 0 {
		for iNdEx := len(m.Network) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Network[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Lldp) > 0 {
		for iNdEx := len(m.Lldp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lldp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Host) > 0 {
		for iNdEx := len(m.Host) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Host[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ip) > 0 {
		for iNdEx := len(m.Ip) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ip[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSharingSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSharingSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSharingSyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSharingSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSharingSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSharingSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EncryptKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EncryptKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EncryptKey != nil {
		i -= len(*m.EncryptKey)
		copy(dAtA[i:], *m.EncryptKey)
		i = encodeVarintController(dAtA, i, uint64(len(*m.EncryptKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintController(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResourceIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResourceIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResourceIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintController(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Type == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResourceIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResourceIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResourceIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintController(dAtA, i, uint64(m.Ids[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseResourceIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseResourceIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseResourceIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintController(dAtA, i, uint64(m.Ids[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.Type == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintController(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseResourceIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseResourceIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseResourceIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintController(dAtA []byte, offset int, v uint64) int {
	offset -= sovController(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisSharingK8SRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != nil {
		l = len(*m.ClusterId)
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSharingK8SResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = len(*m.Epoch)
		n += 1 + l + sovController(uint64(l))
	}
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 1 + l + sovController(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Masklen != nil {
		n += 1 + sovController(uint64(*m.Masklen))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VinterfaceLcuuid != nil {
		l = len(*m.VinterfaceLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.LastSeen != nil {
		l = len(*m.LastSeen)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncHost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncLldp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.HostIp != nil {
		l = len(*m.HostIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.HostInterface != nil {
		l = len(*m.HostInterface)
		n += 1 + l + sovController(uint64(l))
	}
	if m.SystemName != nil {
		l = len(*m.SystemName)
		n += 1 + l + sovController(uint64(l))
	}
	if m.ManagementAddress != nil {
		l = len(*m.ManagementAddress)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VinterfaceLcuuid != nil {
		l = len(*m.VinterfaceLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VinterfaceDescription != nil {
		l = len(*m.VinterfaceDescription)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.LastSeen != nil {
		l = len(*m.LastSeen)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SegmentationId != nil {
		n += 1 + sovController(uint64(*m.SegmentationId))
	}
	if m.NetType != nil {
		n += 1 + sovController(uint64(*m.NetType))
	}
	if m.External != nil {
		n += 2
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VpcLcuuid != nil {
		l = len(*m.VpcLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovController(uint64(*m.Type))
	}
	if m.DeviceType != nil {
		n += 1 + sovController(uint64(*m.DeviceType))
	}
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Mac != nil {
		l = len(*m.Mac)
		n += 1 + l + sovController(uint64(l))
	}
	if m.DeviceLcuuid != nil {
		l = len(*m.DeviceLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NetworkLcuuid != nil {
		l = len(*m.NetworkLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VpcLcuuid != nil {
		l = len(*m.VpcLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		n += 1 + sovController(uint64(*m.State))
	}
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Label != nil {
		l = len(*m.Label)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VpcLcuuid != nil {
		l = len(*m.VpcLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.LaunchServer != nil {
		l = len(*m.LaunchServer)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.CreatedAt != nil {
		l = len(*m.CreatedAt)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncVpc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncVinterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VtapId != nil {
		n += 1 + sovController(uint64(*m.VtapId))
	}
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Ips != nil {
		l = len(*m.Ips)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Mac != nil {
		l = len(*m.Mac)
		n += 1 + l + sovController(uint64(l))
	}
	if m.TapName != nil {
		l = len(*m.TapName)
		n += 1 + l + sovController(uint64(l))
	}
	if m.TapMac != nil {
		l = len(*m.TapMac)
		n += 1 + l + sovController(uint64(l))
	}
	if m.DeviceLcuuid != nil {
		l = len(*m.DeviceLcuuid)
		n += 1 + l + sovController(uint64(l))
	}
	if m.DeviceName != nil {
		l = len(*m.DeviceName)
		n += 1 + l + sovController(uint64(l))
	}
	if m.DeviceType != nil {
		l = len(*m.DeviceType)
		n += 1 + l + sovController(uint64(l))
	}
	if m.HostIp != nil {
		l = len(*m.HostIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.KubernetesClusterId != nil {
		l = len(*m.KubernetesClusterId)
		n += 1 + l + sovController(uint64(l))
	}
	if m.NodeIp != nil {
		l = len(*m.NodeIp)
		n += 1 + l + sovController(uint64(l))
	}
	if m.LastSeen != nil {
		l = len(*m.LastSeen)
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ip) > 0 {
		for _, e := range m.Ip {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if len(m.Host) > 0 {
		for _, e := range m.Host {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if len(m.Lldp) > 0 {
		for _, e := range m.Lldp {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if len(m.Network) > 0 {
		for _, e := range m.Network {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if len(m.Vm) > 0 {
		for _, e := range m.Vm {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if len(m.Vpc) > 0 {
		for _, e := range m.Vpc {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if len(m.Vinterface) > 0 {
		for _, e := range m.Vinterface {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSharingSyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSharingSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncryptKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncryptKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 1 + l + sovController(uint64(l))
	}
	if m.EncryptKey != nil {
		l = len(*m.EncryptKey)
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResourceIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovController(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovController(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResourceIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovController(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReleaseResourceIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovController(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovController(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReleaseResourceIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovController(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozController(x uint64) (n int) {
	return sovController(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisSharingK8SRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSharingK8SRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSharingK8SRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClusterId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSharingK8SResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSharingK8SResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSharingK8SResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Epoch = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &common.KubernetesAPIInfo{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masklen", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masklen = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VinterfaceLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VinterfaceLcuuid = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastSeen = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncHost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncHost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncHost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hostname = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncLldp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncLldp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncLldp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HostIp = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HostInterface = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ManagementAddress = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VinterfaceLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VinterfaceLcuuid = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VinterfaceDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VinterfaceDescription = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastSeen = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentationId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SegmentationId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field External", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.External = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VpcLcuuid = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeviceType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mac = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceLcuuid = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NetworkLcuuid = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VpcLcuuid = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncVm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncVm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncVm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Label = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VpcLcuuid = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LaunchServer = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreatedAt = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncVpc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncVpc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncVpc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncVinterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncVinterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncVinterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ips = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mac = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TapName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TapMac = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceLcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceLcuuid = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceType = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HostIp = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KubernetesClusterId = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeIp = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastSeen = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip, &GenesisSyncIP{})
			if err := m.Ip[len(m.Ip)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = append(m.Host, &GenesisSyncHost{})
			if err := m.Host[len(m.Host)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lldp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lldp = append(m.Lldp, &GenesisSyncLldp{})
			if err := m.Lldp[len(m.Lldp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network, &GenesisSyncNetwork{})
			if err := m.Network[len(m.Network)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &GenesisSyncPort{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vm = append(m.Vm, &GenesisSyncVm{})
			if err := m.Vm[len(m.Vm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vpc = append(m.Vpc, &GenesisSyncVpc{})
			if err := m.Vpc[len(m.Vpc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vinterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vinterface = append(m.Vinterface, &GenesisSyncVinterface{})
			if err := m.Vinterface[len(m.Vinterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSharingSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSharingSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSharingSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSharingSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSharingSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSharingSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GenesisSyncData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EncryptKey = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResourceIDRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResourceIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResourceIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResourceIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResourceIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResourceIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowController
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowController
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthController
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthController
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowController
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseResourceIDRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseResourceIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseResourceIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowController
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowController
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthController
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthController
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowController
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseResourceIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseResourceIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseResourceIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipController(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowController
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthController
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupController
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthController
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthController        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowController          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupController = fmt.Errorf("proto: unexpected end of group")
)
