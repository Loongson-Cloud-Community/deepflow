// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trident.proto

package trident

import (
	context "context"
	fmt "fmt"
	common "github.com/deepflowys/deepflow/message/common"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type State int32

const (
	State_ENVIRONMENT_CHECK State = 0
	State_DISABLED          State = 1
	State_RUNNING           State = 2
	State_REBOOTING         State = 3
	State_STRESSED          State = 4
	State_RESTRICTED        State = 5
)

var State_name = map[int32]string{
	0: "ENVIRONMENT_CHECK",
	1: "DISABLED",
	2: "RUNNING",
	3: "REBOOTING",
	4: "STRESSED",
	5: "RESTRICTED",
}

var State_value = map[string]int32{
	"ENVIRONMENT_CHECK": 0,
	"DISABLED":          1,
	"RUNNING":           2,
	"REBOOTING":         3,
	"STRESSED":          4,
	"RESTRICTED":        5,
}

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (x *State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(State_value, data, "State")
	if err != nil {
		return err
	}
	*x = State(value)
	return nil
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{0}
}

type Exception int32

const (
	Exception_NORMAL                     Exception = 0
	Exception_DISK_NOT_ENOUGH            Exception = 1
	Exception_MEM_NOT_ENOUGH             Exception = 2
	Exception_COREFILE_TOO_MANY          Exception = 4
	Exception_NPB_FUSE                   Exception = 8
	Exception_NPB_BPS_THRESHOLD_EXCEEDED Exception = 16
	Exception_NPB_NO_GW_ARP              Exception = 32
	Exception_RX_PPS_THRESHOLD_EXCEEDED  Exception = 64
	Exception_ANALYZER_NO_GW_ARP         Exception = 128
	Exception_INVALID_CONFIGURATION      Exception = 256
	Exception_THREAD_THRESHOLD_EXCEEDED  Exception = 512
	Exception_PROCESS_THRESHOLD_EXCEEDED Exception = 1024
	Exception_INVALID_LOCAL_CONFIG_FILE  Exception = 2048
	Exception_TOO_MANY_POLICIES          Exception = 4096
	Exception_FREE_MEM_EXCEEDED          Exception = 8192
	Exception_LOG_FILE_EXCEEDED          Exception = 16384
	Exception_CONTROLLER_SOCKET_ERROR    Exception = 32768
	Exception_ANALYZER_SOCKET_ERROR      Exception = 65536
	Exception_NPB_SOCKET_ERROR           Exception = 131072
	Exception_INTEGRATION_SOCKET_ERROR   Exception = 262144
)

var Exception_name = map[int32]string{
	0:      "NORMAL",
	1:      "DISK_NOT_ENOUGH",
	2:      "MEM_NOT_ENOUGH",
	4:      "COREFILE_TOO_MANY",
	8:      "NPB_FUSE",
	16:     "NPB_BPS_THRESHOLD_EXCEEDED",
	32:     "NPB_NO_GW_ARP",
	64:     "RX_PPS_THRESHOLD_EXCEEDED",
	128:    "ANALYZER_NO_GW_ARP",
	256:    "INVALID_CONFIGURATION",
	512:    "THREAD_THRESHOLD_EXCEEDED",
	1024:   "PROCESS_THRESHOLD_EXCEEDED",
	2048:   "INVALID_LOCAL_CONFIG_FILE",
	4096:   "TOO_MANY_POLICIES",
	8192:   "FREE_MEM_EXCEEDED",
	16384:  "LOG_FILE_EXCEEDED",
	32768:  "CONTROLLER_SOCKET_ERROR",
	65536:  "ANALYZER_SOCKET_ERROR",
	131072: "NPB_SOCKET_ERROR",
	262144: "INTEGRATION_SOCKET_ERROR",
}

var Exception_value = map[string]int32{
	"NORMAL":                     0,
	"DISK_NOT_ENOUGH":            1,
	"MEM_NOT_ENOUGH":             2,
	"COREFILE_TOO_MANY":          4,
	"NPB_FUSE":                   8,
	"NPB_BPS_THRESHOLD_EXCEEDED": 16,
	"NPB_NO_GW_ARP":              32,
	"RX_PPS_THRESHOLD_EXCEEDED":  64,
	"ANALYZER_NO_GW_ARP":         128,
	"INVALID_CONFIGURATION":      256,
	"THREAD_THRESHOLD_EXCEEDED":  512,
	"PROCESS_THRESHOLD_EXCEEDED": 1024,
	"INVALID_LOCAL_CONFIG_FILE":  2048,
	"TOO_MANY_POLICIES":          4096,
	"FREE_MEM_EXCEEDED":          8192,
	"LOG_FILE_EXCEEDED":          16384,
	"CONTROLLER_SOCKET_ERROR":    32768,
	"ANALYZER_SOCKET_ERROR":      65536,
	"NPB_SOCKET_ERROR":           131072,
	"INTEGRATION_SOCKET_ERROR":   262144,
}

func (x Exception) Enum() *Exception {
	p := new(Exception)
	*p = x
	return p
}

func (x Exception) String() string {
	return proto.EnumName(Exception_name, int32(x))
}

func (x *Exception) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Exception_value, data, "Exception")
	if err != nil {
		return err
	}
	*x = Exception(value)
	return nil
}

func (Exception) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{1}
}

type Status int32

const (
	Status_SUCCESS              Status = 0
	Status_FAILED               Status = 1
	Status_HEARTBEAT            Status = 2
	Status_CLUSTER_ID_NOT_FOUND Status = 10
)

var Status_name = map[int32]string{
	0:  "SUCCESS",
	1:  "FAILED",
	2:  "HEARTBEAT",
	10: "CLUSTER_ID_NOT_FOUND",
}

var Status_value = map[string]int32{
	"SUCCESS":              0,
	"FAILED":               1,
	"HEARTBEAT":            2,
	"CLUSTER_ID_NOT_FOUND": 10,
}

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (x *Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Status_value, data, "Status")
	if err != nil {
		return err
	}
	*x = Status(value)
	return nil
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{2}
}

type TapMode int32

const (
	TapMode_LOCAL    TapMode = 0
	TapMode_MIRROR   TapMode = 1
	TapMode_ANALYZER TapMode = 2
	TapMode_DECAP    TapMode = 3
)

var TapMode_name = map[int32]string{
	0: "LOCAL",
	1: "MIRROR",
	2: "ANALYZER",
	3: "DECAP",
}

var TapMode_value = map[string]int32{
	"LOCAL":    0,
	"MIRROR":   1,
	"ANALYZER": 2,
	"DECAP":    3,
}

func (x TapMode) Enum() *TapMode {
	p := new(TapMode)
	*p = x
	return p
}

func (x TapMode) String() string {
	return proto.EnumName(TapMode_name, int32(x))
}

func (x *TapMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TapMode_value, data, "TapMode")
	if err != nil {
		return err
	}
	*x = TapMode(value)
	return nil
}

func (TapMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{3}
}

type IfMacSource int32

const (
	IfMacSource_IF_MAC         IfMacSource = 0
	IfMacSource_IF_NAME        IfMacSource = 1
	IfMacSource_IF_LIBVIRT_XML IfMacSource = 2
)

var IfMacSource_name = map[int32]string{
	0: "IF_MAC",
	1: "IF_NAME",
	2: "IF_LIBVIRT_XML",
}

var IfMacSource_value = map[string]int32{
	"IF_MAC":         0,
	"IF_NAME":        1,
	"IF_LIBVIRT_XML": 2,
}

func (x IfMacSource) Enum() *IfMacSource {
	p := new(IfMacSource)
	*p = x
	return p
}

func (x IfMacSource) String() string {
	return proto.EnumName(IfMacSource_name, int32(x))
}

func (x *IfMacSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IfMacSource_value, data, "IfMacSource")
	if err != nil {
		return err
	}
	*x = IfMacSource(value)
	return nil
}

func (IfMacSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{4}
}

type SocketType int32

const (
	SocketType_RAW_UDP SocketType = 0
	SocketType_TCP     SocketType = 1
	SocketType_UDP     SocketType = 2
	SocketType_FILE    SocketType = 3
)

var SocketType_name = map[int32]string{
	0: "RAW_UDP",
	1: "TCP",
	2: "UDP",
	3: "FILE",
}

var SocketType_value = map[string]int32{
	"RAW_UDP": 0,
	"TCP":     1,
	"UDP":     2,
	"FILE":    3,
}

func (x SocketType) Enum() *SocketType {
	p := new(SocketType)
	*p = x
	return p
}

func (x SocketType) String() string {
	return proto.EnumName(SocketType_name, int32(x))
}

func (x *SocketType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SocketType_value, data, "SocketType")
	if err != nil {
		return err
	}
	*x = SocketType(value)
	return nil
}

func (SocketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{5}
}

type PacketType int32

const (
	PacketType_PACKET       PacketType = 1
	PacketType_SFLOW        PacketType = 2
	PacketType_NETFLOW_V5   PacketType = 3
	PacketType_NETSTREAM_V5 PacketType = 4
	PacketType_NETFLOW_V9   PacketType = 5
	PacketType_NETSTREAM_V9 PacketType = 6
)

var PacketType_name = map[int32]string{
	1: "PACKET",
	2: "SFLOW",
	3: "NETFLOW_V5",
	4: "NETSTREAM_V5",
	5: "NETFLOW_V9",
	6: "NETSTREAM_V9",
}

var PacketType_value = map[string]int32{
	"PACKET":       1,
	"SFLOW":        2,
	"NETFLOW_V5":   3,
	"NETSTREAM_V5": 4,
	"NETFLOW_V9":   5,
	"NETSTREAM_V9": 6,
}

func (x PacketType) Enum() *PacketType {
	p := new(PacketType)
	*p = x
	return p
}

func (x PacketType) String() string {
	return proto.EnumName(PacketType_name, int32(x))
}

func (x *PacketType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PacketType_value, data, "PacketType")
	if err != nil {
		return err
	}
	*x = PacketType(value)
	return nil
}

func (PacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{6}
}

type CaptureSocketType int32

const (
	CaptureSocketType_AUTO         CaptureSocketType = 0
	CaptureSocketType_AF_PACKET_V1 CaptureSocketType = 1
	CaptureSocketType_AF_PACKET_V2 CaptureSocketType = 2
	CaptureSocketType_AF_PACKET_V3 CaptureSocketType = 3
)

var CaptureSocketType_name = map[int32]string{
	0: "AUTO",
	1: "AF_PACKET_V1",
	2: "AF_PACKET_V2",
	3: "AF_PACKET_V3",
}

var CaptureSocketType_value = map[string]int32{
	"AUTO":         0,
	"AF_PACKET_V1": 1,
	"AF_PACKET_V2": 2,
	"AF_PACKET_V3": 3,
}

func (x CaptureSocketType) Enum() *CaptureSocketType {
	p := new(CaptureSocketType)
	*p = x
	return p
}

func (x CaptureSocketType) String() string {
	return proto.EnumName(CaptureSocketType_name, int32(x))
}

func (x *CaptureSocketType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CaptureSocketType_value, data, "CaptureSocketType")
	if err != nil {
		return err
	}
	*x = CaptureSocketType(value)
	return nil
}

func (CaptureSocketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{7}
}

type VlanMode int32

const (
	VlanMode_NONE VlanMode = 0
	VlanMode_VLAN VlanMode = 1
	VlanMode_QINQ VlanMode = 2
)

var VlanMode_name = map[int32]string{
	0: "NONE",
	1: "VLAN",
	2: "QINQ",
}

var VlanMode_value = map[string]int32{
	"NONE": 0,
	"VLAN": 1,
	"QINQ": 2,
}

func (x VlanMode) Enum() *VlanMode {
	p := new(VlanMode)
	*p = x
	return p
}

func (x VlanMode) String() string {
	return proto.EnumName(VlanMode_name, int32(x))
}

func (x *VlanMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VlanMode_value, data, "VlanMode")
	if err != nil {
		return err
	}
	*x = VlanMode(value)
	return nil
}

func (VlanMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{8}
}

type DecapType int32

const (
	DecapType_DECAP_TYPE_NONE    DecapType = 0
	DecapType_DECAP_TYPE_VXLAN   DecapType = 1
	DecapType_DECAP_TYPE_IPIP    DecapType = 2
	DecapType_DECAP_TYPE_TENCENT DecapType = 3
)

var DecapType_name = map[int32]string{
	0: "DECAP_TYPE_NONE",
	1: "DECAP_TYPE_VXLAN",
	2: "DECAP_TYPE_IPIP",
	3: "DECAP_TYPE_TENCENT",
}

var DecapType_value = map[string]int32{
	"DECAP_TYPE_NONE":    0,
	"DECAP_TYPE_VXLAN":   1,
	"DECAP_TYPE_IPIP":    2,
	"DECAP_TYPE_TENCENT": 3,
}

func (x DecapType) Enum() *DecapType {
	p := new(DecapType)
	*p = x
	return p
}

func (x DecapType) String() string {
	return proto.EnumName(DecapType_name, int32(x))
}

func (x *DecapType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DecapType_value, data, "DecapType")
	if err != nil {
		return err
	}
	*x = DecapType(value)
	return nil
}

func (DecapType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{9}
}

type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNKNOWN            DeviceType = 0
	DeviceType_DEVICE_TYPE_VM                 DeviceType = 1
	DeviceType_DEVICE_TYPE_VGW                DeviceType = 2
	DeviceType_DEVICE_TYPE_THIRD_PARTY_DEVICE DeviceType = 3
	DeviceType_DEVICE_TYPE_VMWAF              DeviceType = 4
	DeviceType_DEVICE_TYPE_NSP_VGATEWAY       DeviceType = 5
	DeviceType_DEVICE_TYPE_HOST_DEVICE        DeviceType = 6
	DeviceType_DEVICE_TYPE_NETWORK_DEVICE     DeviceType = 7
	DeviceType_DEVICE_TYPE_DHCP_PORT          DeviceType = 9
	DeviceType_DEVICE_TYPE_POD                DeviceType = 10
	DeviceType_DEVICE_TYPE_POD_SERVICE        DeviceType = 11
	DeviceType_DEVICE_TYPE_REDIS_INSTANCE     DeviceType = 12
	DeviceType_DEVICE_TYPE_RDS_INSTANCE       DeviceType = 13
	DeviceType_DEVICE_TYPE_POD_NODE           DeviceType = 14
	DeviceType_DEVICE_TYPE_LOAD_BALANCE       DeviceType = 15
	DeviceType_DEVICE_TYPE_NAT_GATEWAY        DeviceType = 16
)

var DeviceType_name = map[int32]string{
	0:  "DEVICE_TYPE_UNKNOWN",
	1:  "DEVICE_TYPE_VM",
	2:  "DEVICE_TYPE_VGW",
	3:  "DEVICE_TYPE_THIRD_PARTY_DEVICE",
	4:  "DEVICE_TYPE_VMWAF",
	5:  "DEVICE_TYPE_NSP_VGATEWAY",
	6:  "DEVICE_TYPE_HOST_DEVICE",
	7:  "DEVICE_TYPE_NETWORK_DEVICE",
	9:  "DEVICE_TYPE_DHCP_PORT",
	10: "DEVICE_TYPE_POD",
	11: "DEVICE_TYPE_POD_SERVICE",
	12: "DEVICE_TYPE_REDIS_INSTANCE",
	13: "DEVICE_TYPE_RDS_INSTANCE",
	14: "DEVICE_TYPE_POD_NODE",
	15: "DEVICE_TYPE_LOAD_BALANCE",
	16: "DEVICE_TYPE_NAT_GATEWAY",
}

var DeviceType_value = map[string]int32{
	"DEVICE_TYPE_UNKNOWN":            0,
	"DEVICE_TYPE_VM":                 1,
	"DEVICE_TYPE_VGW":                2,
	"DEVICE_TYPE_THIRD_PARTY_DEVICE": 3,
	"DEVICE_TYPE_VMWAF":              4,
	"DEVICE_TYPE_NSP_VGATEWAY":       5,
	"DEVICE_TYPE_HOST_DEVICE":        6,
	"DEVICE_TYPE_NETWORK_DEVICE":     7,
	"DEVICE_TYPE_DHCP_PORT":          9,
	"DEVICE_TYPE_POD":                10,
	"DEVICE_TYPE_POD_SERVICE":        11,
	"DEVICE_TYPE_REDIS_INSTANCE":     12,
	"DEVICE_TYPE_RDS_INSTANCE":       13,
	"DEVICE_TYPE_POD_NODE":           14,
	"DEVICE_TYPE_LOAD_BALANCE":       15,
	"DEVICE_TYPE_NAT_GATEWAY":        16,
}

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}

func (x *DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceType_value, data, "DeviceType")
	if err != nil {
		return err
	}
	*x = DeviceType(value)
	return nil
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{10}
}

type GroupType int32

const (
	GroupType_NAMED     GroupType = 0
	GroupType_ANONYMOUS GroupType = 1
)

var GroupType_name = map[int32]string{
	0: "NAMED",
	1: "ANONYMOUS",
}

var GroupType_value = map[string]int32{
	"NAMED":     0,
	"ANONYMOUS": 1,
}

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return proto.EnumName(GroupType_name, int32(x))
}

func (x *GroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupType_value, data, "GroupType")
	if err != nil {
		return err
	}
	*x = GroupType(value)
	return nil
}

func (GroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{11}
}

type ServiceType int32

const (
	ServiceType_POD_SERVICE ServiceType = 0
	ServiceType_LB_SERVICE  ServiceType = 1
	ServiceType_NAT_SERVICE ServiceType = 2
	ServiceType_RG_SERVICE  ServiceType = 3
)

var ServiceType_name = map[int32]string{
	0: "POD_SERVICE",
	1: "LB_SERVICE",
	2: "NAT_SERVICE",
	3: "RG_SERVICE",
}

var ServiceType_value = map[string]int32{
	"POD_SERVICE": 0,
	"LB_SERVICE":  1,
	"NAT_SERVICE": 2,
	"RG_SERVICE":  3,
}

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (x *ServiceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceType_value, data, "ServiceType")
	if err != nil {
		return err
	}
	*x = ServiceType(value)
	return nil
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{12}
}

type CidrType int32

const (
	CidrType_WAN CidrType = 1
	CidrType_LAN CidrType = 2
)

var CidrType_name = map[int32]string{
	1: "WAN",
	2: "LAN",
}

var CidrType_value = map[string]int32{
	"WAN": 1,
	"LAN": 2,
}

func (x CidrType) Enum() *CidrType {
	p := new(CidrType)
	*p = x
	return p
}

func (x CidrType) String() string {
	return proto.EnumName(CidrType_name, int32(x))
}

func (x *CidrType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CidrType_value, data, "CidrType")
	if err != nil {
		return err
	}
	*x = CidrType(value)
	return nil
}

func (CidrType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{13}
}

type Action int32

const (
	Action_PACKET_CAPTURING Action = 1
)

var Action_name = map[int32]string{
	1: "PACKET_CAPTURING",
}

var Action_value = map[string]int32{
	"PACKET_CAPTURING": 1,
}

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (x *Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Action_value, data, "Action")
	if err != nil {
		return err
	}
	*x = Action(value)
	return nil
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{14}
}

type TapSide int32

const (
	TapSide_SRC  TapSide = 1
	TapSide_DST  TapSide = 2
	TapSide_BOTH TapSide = 3
)

var TapSide_name = map[int32]string{
	1: "SRC",
	2: "DST",
	3: "BOTH",
}

var TapSide_value = map[string]int32{
	"SRC":  1,
	"DST":  2,
	"BOTH": 3,
}

func (x TapSide) Enum() *TapSide {
	p := new(TapSide)
	*p = x
	return p
}

func (x TapSide) String() string {
	return proto.EnumName(TapSide_name, int32(x))
}

func (x *TapSide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TapSide_value, data, "TapSide")
	if err != nil {
		return err
	}
	*x = TapSide(value)
	return nil
}

func (TapSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{15}
}

type TunnelType int32

const (
	TunnelType_VXLAN      TunnelType = 0
	TunnelType_GRE_ERSPAN TunnelType = 1
	TunnelType_PCAP       TunnelType = 2
	TunnelType_NPB_DROP   TunnelType = 3
)

var TunnelType_name = map[int32]string{
	0: "VXLAN",
	1: "GRE_ERSPAN",
	2: "PCAP",
	3: "NPB_DROP",
}

var TunnelType_value = map[string]int32{
	"VXLAN":      0,
	"GRE_ERSPAN": 1,
	"PCAP":       2,
	"NPB_DROP":   3,
}

func (x TunnelType) Enum() *TunnelType {
	p := new(TunnelType)
	*p = x
	return p
}

func (x TunnelType) String() string {
	return proto.EnumName(TunnelType_name, int32(x))
}

func (x *TunnelType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TunnelType_value, data, "TunnelType")
	if err != nil {
		return err
	}
	*x = TunnelType(value)
	return nil
}

func (TunnelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{16}
}

type CommunicationVtap struct {
	VtapId               *uint32  `protobuf:"varint,1,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	LastActiveTime       *uint32  `protobuf:"varint,2,opt,name=last_active_time,json=lastActiveTime" json:"last_active_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommunicationVtap) Reset()         { *m = CommunicationVtap{} }
func (m *CommunicationVtap) String() string { return proto.CompactTextString(m) }
func (*CommunicationVtap) ProtoMessage()    {}
func (*CommunicationVtap) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{0}
}
func (m *CommunicationVtap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunicationVtap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunicationVtap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunicationVtap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunicationVtap.Merge(m, src)
}
func (m *CommunicationVtap) XXX_Size() int {
	return m.Size()
}
func (m *CommunicationVtap) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunicationVtap.DiscardUnknown(m)
}

var xxx_messageInfo_CommunicationVtap proto.InternalMessageInfo

func (m *CommunicationVtap) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

func (m *CommunicationVtap) GetLastActiveTime() uint32 {
	if m != nil && m.LastActiveTime != nil {
		return *m.LastActiveTime
	}
	return 0
}

type TsdbReportInfo struct {
	PcapDataMountPath    *string  `protobuf:"bytes,4,opt,name=pcap_data_mount_path,json=pcapDataMountPath" json:"pcap_data_mount_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TsdbReportInfo) Reset()         { *m = TsdbReportInfo{} }
func (m *TsdbReportInfo) String() string { return proto.CompactTextString(m) }
func (*TsdbReportInfo) ProtoMessage()    {}
func (*TsdbReportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{1}
}
func (m *TsdbReportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TsdbReportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TsdbReportInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TsdbReportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TsdbReportInfo.Merge(m, src)
}
func (m *TsdbReportInfo) XXX_Size() int {
	return m.Size()
}
func (m *TsdbReportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TsdbReportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TsdbReportInfo proto.InternalMessageInfo

func (m *TsdbReportInfo) GetPcapDataMountPath() string {
	if m != nil && m.PcapDataMountPath != nil {
		return *m.PcapDataMountPath
	}
	return ""
}

type SyncRequest struct {
	BootTime            *uint32              `protobuf:"varint,1,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
	ConfigAccepted      *bool                `protobuf:"varint,2,opt,name=config_accepted,json=configAccepted,def=1" json:"config_accepted,omitempty"`
	State               *State               `protobuf:"varint,4,opt,name=state,enum=trident.State" json:"state,omitempty"`
	Revision            *string              `protobuf:"bytes,5,opt,name=revision" json:"revision,omitempty"`
	Exception           *uint64              `protobuf:"varint,6,opt,name=exception,def=0" json:"exception,omitempty"`
	ProcessName         *string              `protobuf:"bytes,7,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	TapMode             *TapMode             `protobuf:"varint,8,opt,name=tap_mode,json=tapMode,enum=trident.TapMode,def=0" json:"tap_mode,omitempty"`
	VersionPlatformData *uint64              `protobuf:"varint,9,opt,name=version_platform_data,json=versionPlatformData,def=0" json:"version_platform_data,omitempty"`
	VersionAcls         *uint64              `protobuf:"varint,10,opt,name=version_acls,json=versionAcls,def=0" json:"version_acls,omitempty"`
	VersionGroups       *uint64              `protobuf:"varint,11,opt,name=version_groups,json=versionGroups,def=0" json:"version_groups,omitempty"`
	CtrlIp              *string              `protobuf:"bytes,21,opt,name=ctrl_ip,json=ctrlIp" json:"ctrl_ip,omitempty"`
	Host                *string              `protobuf:"bytes,22,opt,name=host" json:"host,omitempty"`
	HostIps             []string             `protobuf:"bytes,23,rep,name=host_ips,json=hostIps" json:"host_ips,omitempty"`
	CtrlMac             *string              `protobuf:"bytes,25,opt,name=ctrl_mac,json=ctrlMac" json:"ctrl_mac,omitempty"`
	VtapGroupIdRequest  *string              `protobuf:"bytes,26,opt,name=vtap_group_id_request,json=vtapGroupIdRequest" json:"vtap_group_id_request,omitempty"`
	CommunicationVtaps  []*CommunicationVtap `protobuf:"bytes,31,rep,name=communication_vtaps,json=communicationVtaps" json:"communication_vtaps,omitempty"`
	// 运行环境基本信息
	CpuNum               *uint32         `protobuf:"varint,32,opt,name=cpu_num,json=cpuNum" json:"cpu_num,omitempty"`
	MemorySize           *uint64         `protobuf:"varint,33,opt,name=memory_size,json=memorySize" json:"memory_size,omitempty"`
	Arch                 *string         `protobuf:"bytes,34,opt,name=arch" json:"arch,omitempty"`
	Os                   *string         `protobuf:"bytes,35,opt,name=os" json:"os,omitempty"`
	KernelVersion        *string         `protobuf:"bytes,36,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
	TsdbReportInfo       *TsdbReportInfo `protobuf:"bytes,43,opt,name=tsdb_report_info,json=tsdbReportInfo" json:"tsdb_report_info,omitempty"`
	KubernetesClusterId  *string         `protobuf:"bytes,45,opt,name=kubernetes_cluster_id,json=kubernetesClusterId" json:"kubernetes_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{2}
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

const Default_SyncRequest_ConfigAccepted bool = true
const Default_SyncRequest_Exception uint64 = 0
const Default_SyncRequest_TapMode TapMode = TapMode_LOCAL
const Default_SyncRequest_VersionPlatformData uint64 = 0
const Default_SyncRequest_VersionAcls uint64 = 0
const Default_SyncRequest_VersionGroups uint64 = 0

func (m *SyncRequest) GetBootTime() uint32 {
	if m != nil && m.BootTime != nil {
		return *m.BootTime
	}
	return 0
}

func (m *SyncRequest) GetConfigAccepted() bool {
	if m != nil && m.ConfigAccepted != nil {
		return *m.ConfigAccepted
	}
	return Default_SyncRequest_ConfigAccepted
}

func (m *SyncRequest) GetState() State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return State_ENVIRONMENT_CHECK
}

func (m *SyncRequest) GetRevision() string {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return ""
}

func (m *SyncRequest) GetException() uint64 {
	if m != nil && m.Exception != nil {
		return *m.Exception
	}
	return Default_SyncRequest_Exception
}

func (m *SyncRequest) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *SyncRequest) GetTapMode() TapMode {
	if m != nil && m.TapMode != nil {
		return *m.TapMode
	}
	return Default_SyncRequest_TapMode
}

func (m *SyncRequest) GetVersionPlatformData() uint64 {
	if m != nil && m.VersionPlatformData != nil {
		return *m.VersionPlatformData
	}
	return Default_SyncRequest_VersionPlatformData
}

func (m *SyncRequest) GetVersionAcls() uint64 {
	if m != nil && m.VersionAcls != nil {
		return *m.VersionAcls
	}
	return Default_SyncRequest_VersionAcls
}

func (m *SyncRequest) GetVersionGroups() uint64 {
	if m != nil && m.VersionGroups != nil {
		return *m.VersionGroups
	}
	return Default_SyncRequest_VersionGroups
}

func (m *SyncRequest) GetCtrlIp() string {
	if m != nil && m.CtrlIp != nil {
		return *m.CtrlIp
	}
	return ""
}

func (m *SyncRequest) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *SyncRequest) GetHostIps() []string {
	if m != nil {
		return m.HostIps
	}
	return nil
}

func (m *SyncRequest) GetCtrlMac() string {
	if m != nil && m.CtrlMac != nil {
		return *m.CtrlMac
	}
	return ""
}

func (m *SyncRequest) GetVtapGroupIdRequest() string {
	if m != nil && m.VtapGroupIdRequest != nil {
		return *m.VtapGroupIdRequest
	}
	return ""
}

func (m *SyncRequest) GetCommunicationVtaps() []*CommunicationVtap {
	if m != nil {
		return m.CommunicationVtaps
	}
	return nil
}

func (m *SyncRequest) GetCpuNum() uint32 {
	if m != nil && m.CpuNum != nil {
		return *m.CpuNum
	}
	return 0
}

func (m *SyncRequest) GetMemorySize() uint64 {
	if m != nil && m.MemorySize != nil {
		return *m.MemorySize
	}
	return 0
}

func (m *SyncRequest) GetArch() string {
	if m != nil && m.Arch != nil {
		return *m.Arch
	}
	return ""
}

func (m *SyncRequest) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *SyncRequest) GetKernelVersion() string {
	if m != nil && m.KernelVersion != nil {
		return *m.KernelVersion
	}
	return ""
}

func (m *SyncRequest) GetTsdbReportInfo() *TsdbReportInfo {
	if m != nil {
		return m.TsdbReportInfo
	}
	return nil
}

func (m *SyncRequest) GetKubernetesClusterId() string {
	if m != nil && m.KubernetesClusterId != nil {
		return *m.KubernetesClusterId
	}
	return ""
}

type TapType struct {
	TapType              *uint32     `protobuf:"varint,1,opt,name=tap_type,json=tapType" json:"tap_type,omitempty"`
	PacketType           *PacketType `protobuf:"varint,2,opt,name=packet_type,json=packetType,enum=trident.PacketType" json:"packet_type,omitempty"`
	Vlan                 *uint32     `protobuf:"varint,3,opt,name=vlan" json:"vlan,omitempty"`
	SourceIp             *string     `protobuf:"bytes,4,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	TapPort              *uint32     `protobuf:"varint,5,opt,name=tap_port,json=tapPort" json:"tap_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TapType) Reset()         { *m = TapType{} }
func (m *TapType) String() string { return proto.CompactTextString(m) }
func (*TapType) ProtoMessage()    {}
func (*TapType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{3}
}
func (m *TapType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TapType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TapType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TapType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TapType.Merge(m, src)
}
func (m *TapType) XXX_Size() int {
	return m.Size()
}
func (m *TapType) XXX_DiscardUnknown() {
	xxx_messageInfo_TapType.DiscardUnknown(m)
}

var xxx_messageInfo_TapType proto.InternalMessageInfo

func (m *TapType) GetTapType() uint32 {
	if m != nil && m.TapType != nil {
		return *m.TapType
	}
	return 0
}

func (m *TapType) GetPacketType() PacketType {
	if m != nil && m.PacketType != nil {
		return *m.PacketType
	}
	return PacketType_PACKET
}

func (m *TapType) GetVlan() uint32 {
	if m != nil && m.Vlan != nil {
		return *m.Vlan
	}
	return 0
}

func (m *TapType) GetSourceIp() string {
	if m != nil && m.SourceIp != nil {
		return *m.SourceIp
	}
	return ""
}

func (m *TapType) GetTapPort() uint32 {
	if m != nil && m.TapPort != nil {
		return *m.TapPort
	}
	return 0
}

type Config struct {
	Enabled            *bool   `protobuf:"varint,1,opt,name=enabled,def=1" json:"enabled,omitempty"`
	MaxCpus            *uint32 `protobuf:"varint,2,opt,name=max_cpus,json=maxCpus,def=1" json:"max_cpus,omitempty"`
	MaxMemory          *uint32 `protobuf:"varint,3,opt,name=max_memory,json=maxMemory,def=768" json:"max_memory,omitempty"`
	SyncInterval       *uint32 `protobuf:"varint,4,opt,name=sync_interval,json=syncInterval,def=60" json:"sync_interval,omitempty"`
	StatsInterval      *uint32 `protobuf:"varint,5,opt,name=stats_interval,json=statsInterval,def=60" json:"stats_interval,omitempty"`
	GlobalPpsThreshold *uint64 `protobuf:"varint,6,opt,name=global_pps_threshold,json=globalPpsThreshold,def=200000" json:"global_pps_threshold,omitempty"`
	// qemu: tap.*
	// localhost: lo
	// common nic: eth|en[ospx].*
	// flannel: veth.*
	// calico: cali.*
	// cilium: lxc.*
	// kube-ovn: [0-9a-f]+_h$
	TapInterfaceRegex          *string             `protobuf:"bytes,8,opt,name=tap_interface_regex,json=tapInterfaceRegex,def=^(tap.*|cali.*|veth.*|eth.*|en[ospx].*|lxc.*|lo|[0-9a-f]+_h)$" json:"tap_interface_regex,omitempty"`
	Host                       *string             `protobuf:"bytes,9,opt,name=host" json:"host,omitempty"`
	RsyslogEnabled             *bool               `protobuf:"varint,10,opt,name=rsyslog_enabled,json=rsyslogEnabled,def=1" json:"rsyslog_enabled,omitempty"`
	OutputVlan                 *uint32             `protobuf:"varint,11,opt,name=output_vlan,json=outputVlan,def=0" json:"output_vlan,omitempty"`
	Mtu                        *uint32             `protobuf:"varint,12,opt,name=mtu,def=1500" json:"mtu,omitempty"`
	NpbBpsThreshold            *uint64             `protobuf:"varint,13,opt,name=npb_bps_threshold,json=npbBpsThreshold,def=1000000000" json:"npb_bps_threshold,omitempty"`
	CollectorEnabled           *bool               `protobuf:"varint,14,opt,name=collector_enabled,json=collectorEnabled,def=0" json:"collector_enabled,omitempty"`
	PacketHeaderEnabled        *bool               `protobuf:"varint,15,opt,name=packet_header_enabled,json=packetHeaderEnabled,def=1" json:"packet_header_enabled,omitempty"`
	PlatformEnabled            *bool               `protobuf:"varint,16,opt,name=platform_enabled,json=platformEnabled,def=0" json:"platform_enabled,omitempty"`
	KubernetesApiEnabled       *bool               `protobuf:"varint,17,opt,name=kubernetes_api_enabled,json=kubernetesApiEnabled,def=0" json:"kubernetes_api_enabled,omitempty"`
	ServerTxBandwidthThreshold *uint64             `protobuf:"varint,18,opt,name=server_tx_bandwidth_threshold,json=serverTxBandwidthThreshold,def=0" json:"server_tx_bandwidth_threshold,omitempty"`
	BandwidthProbeInterval     *uint64             `protobuf:"varint,19,opt,name=bandwidth_probe_interval,json=bandwidthProbeInterval,def=10" json:"bandwidth_probe_interval,omitempty"`
	CaptureSocketType          *CaptureSocketType  `protobuf:"varint,21,opt,name=capture_socket_type,json=captureSocketType,enum=trident.CaptureSocketType,def=0" json:"capture_socket_type,omitempty"`
	NpbVlanMode                *VlanMode           `protobuf:"varint,22,opt,name=npb_vlan_mode,json=npbVlanMode,enum=trident.VlanMode,def=0" json:"npb_vlan_mode,omitempty"`
	L4LogTapTypes              []uint32            `protobuf:"varint,23,rep,name=l4_log_tap_types,json=l4LogTapTypes" json:"l4_log_tap_types,omitempty"`
	NpbDedupEnabled            *bool               `protobuf:"varint,24,opt,name=npb_dedup_enabled,json=npbDedupEnabled,def=1" json:"npb_dedup_enabled,omitempty"`
	IfMacSource                *IfMacSource        `protobuf:"varint,25,opt,name=if_mac_source,json=ifMacSource,enum=trident.IfMacSource,def=0" json:"if_mac_source,omitempty"`
	VtapFlow_1SEnabled         *bool               `protobuf:"varint,27,opt,name=vtap_flow_1s_enabled,json=vtapFlow1sEnabled,def=1" json:"vtap_flow_1s_enabled,omitempty"`
	DebugEnabled               *bool               `protobuf:"varint,28,opt,name=debug_enabled,json=debugEnabled,def=1" json:"debug_enabled,omitempty"`
	AnalyzerIp                 *string             `protobuf:"bytes,31,opt,name=analyzer_ip,json=analyzerIp" json:"analyzer_ip,omitempty"`
	MaxEscapeSeconds           *uint32             `protobuf:"varint,32,opt,name=max_escape_seconds,json=maxEscapeSeconds,def=3600" json:"max_escape_seconds,omitempty"`
	ProxyControllerIp          *string             `protobuf:"bytes,34,opt,name=proxy_controller_ip,json=proxyControllerIp" json:"proxy_controller_ip,omitempty"`
	RegionId                   *uint32             `protobuf:"varint,35,opt,name=region_id,json=regionId,def=0" json:"region_id,omitempty"`
	PodClusterId               *uint32             `protobuf:"varint,36,opt,name=pod_cluster_id,json=podClusterId,def=0" json:"pod_cluster_id,omitempty"`
	EpcId                      *uint32             `protobuf:"varint,37,opt,name=epc_id,json=epcId,def=0" json:"epc_id,omitempty"`
	AnalyzerPort               *uint32             `protobuf:"varint,38,opt,name=analyzer_port,json=analyzerPort,def=30033" json:"analyzer_port,omitempty"`
	ProxyControllerPort        *uint32             `protobuf:"varint,39,opt,name=proxy_controller_port,json=proxyControllerPort,def=30035" json:"proxy_controller_port,omitempty"`
	VtapId                     *uint32             `protobuf:"varint,40,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	TridentType                *common.TridentType `protobuf:"varint,41,opt,name=trident_type,json=tridentType,enum=common.TridentType,def=0" json:"trident_type,omitempty"`
	CollectorSocketType        *SocketType         `protobuf:"varint,45,opt,name=collector_socket_type,json=collectorSocketType,enum=trident.SocketType,def=1" json:"collector_socket_type,omitempty"`
	CompressorSocketType       *SocketType         `protobuf:"varint,46,opt,name=compressor_socket_type,json=compressorSocketType,enum=trident.SocketType,def=0" json:"compressor_socket_type,omitempty"`
	NpbSocketType              *SocketType         `protobuf:"varint,47,opt,name=npb_socket_type,json=npbSocketType,enum=trident.SocketType,def=0" json:"npb_socket_type,omitempty"`
	PcapDataRetention          *uint32             `protobuf:"varint,51,opt,name=pcap_data_retention,json=pcapDataRetention,def=7" json:"pcap_data_retention,omitempty"`
	CapturePacketSize          *uint32             `protobuf:"varint,52,opt,name=capture_packet_size,json=capturePacketSize,def=65535" json:"capture_packet_size,omitempty"`
	InactiveServerPortEnabled  *bool               `protobuf:"varint,53,opt,name=inactive_server_port_enabled,json=inactiveServerPortEnabled,def=1" json:"inactive_server_port_enabled,omitempty"`
	CaptureBpf                 *string             `protobuf:"bytes,54,opt,name=capture_bpf,json=captureBpf,def=" json:"capture_bpf,omitempty"`
	InactiveIpEnabled          *bool               `protobuf:"varint,55,opt,name=inactive_ip_enabled,json=inactiveIpEnabled,def=1" json:"inactive_ip_enabled,omitempty"`
	LibvirtXmlPath             *string             `protobuf:"bytes,60,opt,name=libvirt_xml_path,json=libvirtXmlPath,def=/etc/libvirt/qemu" json:"libvirt_xml_path,omitempty"`
	// 新增资源限制
	LogThreshold     *uint32 `protobuf:"varint,101,opt,name=log_threshold,json=logThreshold,def=300" json:"log_threshold,omitempty"`
	LogLevel         *string `protobuf:"bytes,102,opt,name=log_level,json=logLevel,def=INFO" json:"log_level,omitempty"`
	ThreadThreshold  *uint32 `protobuf:"varint,103,opt,name=thread_threshold,json=threadThreshold,def=500" json:"thread_threshold,omitempty"`
	ProcessThreshold *uint32 `protobuf:"varint,104,opt,name=process_threshold,json=processThreshold,def=10" json:"process_threshold,omitempty"`
	// 新增基础配置参数
	LogRetention *uint32     `protobuf:"varint,201,opt,name=log_retention,json=logRetention,def=30" json:"log_retention,omitempty"`
	NtpEnabled   *bool       `protobuf:"varint,203,opt,name=ntp_enabled,json=ntpEnabled,def=1" json:"ntp_enabled,omitempty"`
	DecapType    []DecapType `protobuf:"varint,204,rep,name=decap_type,json=decapType,enum=trident.DecapType" json:"decap_type,omitempty"`
	// 新增全景图配置参数
	HttpLogProxyClient       *string `protobuf:"bytes,301,opt,name=http_log_proxy_client,json=httpLogProxyClient,def=X-Forwarded-For" json:"http_log_proxy_client,omitempty"`
	HttpLogTraceId           *string `protobuf:"bytes,302,opt,name=http_log_trace_id,json=httpLogTraceId,def=traceparent, sw8" json:"http_log_trace_id,omitempty"`
	L7LogPacketSize          *uint32 `protobuf:"varint,303,opt,name=l7_log_packet_size,json=l7LogPacketSize,def=1024" json:"l7_log_packet_size,omitempty"`
	L4LogCollectNpsThreshold *uint64 `protobuf:"varint,304,opt,name=l4_log_collect_nps_threshold,json=l4LogCollectNpsThreshold,def=10000" json:"l4_log_collect_nps_threshold,omitempty"`
	L7LogCollectNpsThreshold *uint64 `protobuf:"varint,305,opt,name=l7_log_collect_nps_threshold,json=l7LogCollectNpsThreshold,def=10000" json:"l7_log_collect_nps_threshold,omitempty"`
	HttpLogSpanId            *string `protobuf:"bytes,306,opt,name=http_log_span_id,json=httpLogSpanId,def=traceparent, sw8" json:"http_log_span_id,omitempty"`
	HttpLogXRequestId        *string `protobuf:"bytes,307,opt,name=http_log_x_request_id,json=httpLogXRequestId,def=X-Request-ID" json:"http_log_x_request_id,omitempty"`
	// 新增全景图功能开关
	L7LogStoreTapTypes            []uint32 `protobuf:"varint,403,rep,name=l7_log_store_tap_types,json=l7LogStoreTapTypes" json:"l7_log_store_tap_types,omitempty"`
	L4PerformanceEnabled          *bool    `protobuf:"varint,404,opt,name=l4_performance_enabled,json=l4PerformanceEnabled,def=1" json:"l4_performance_enabled,omitempty"`
	L7MetricsEnabled              *bool    `protobuf:"varint,405,opt,name=l7_metrics_enabled,json=l7MetricsEnabled,def=1" json:"l7_metrics_enabled,omitempty"`
	ExternalAgentHttpProxyEnabled *bool    `protobuf:"varint,406,opt,name=external_agent_http_proxy_enabled,json=externalAgentHttpProxyEnabled,def=0" json:"external_agent_http_proxy_enabled,omitempty"`
	ExternalAgentHttpProxyPort    *uint32  `protobuf:"varint,407,opt,name=external_agent_http_proxy_port,json=externalAgentHttpProxyPort,def=38086" json:"external_agent_http_proxy_port,omitempty"`
	PacketSequenceFlag            *uint32  `protobuf:"varint,410,opt,name=packet_sequence_flag,json=packetSequenceFlag,def=0" json:"packet_sequence_flag,omitempty"`
	SysFreeMemoryLimit            *uint32  `protobuf:"varint,501,opt,name=sys_free_memory_limit,json=sysFreeMemoryLimit,def=0" json:"sys_free_memory_limit,omitempty"`
	LogFileSize                   *uint32  `protobuf:"varint,502,opt,name=log_file_size,json=logFileSize,def=1000" json:"log_file_size,omitempty"`
	TapMode                       *TapMode `protobuf:"varint,503,opt,name=tap_mode,json=tapMode,enum=trident.TapMode,def=0" json:"tap_mode,omitempty"`
	LocalConfig                   *string  `protobuf:"bytes,510,opt,name=local_config,json=localConfig" json:"local_config,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{4}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

const Default_Config_Enabled bool = true
const Default_Config_MaxCpus uint32 = 1
const Default_Config_MaxMemory uint32 = 768
const Default_Config_SyncInterval uint32 = 60
const Default_Config_StatsInterval uint32 = 60
const Default_Config_GlobalPpsThreshold uint64 = 200000
const Default_Config_TapInterfaceRegex string = "^(tap.*|cali.*|veth.*|eth.*|en[ospx].*|lxc.*|lo|[0-9a-f]+_h)$"
const Default_Config_RsyslogEnabled bool = true
const Default_Config_OutputVlan uint32 = 0
const Default_Config_Mtu uint32 = 1500
const Default_Config_NpbBpsThreshold uint64 = 1000000000
const Default_Config_CollectorEnabled bool = false
const Default_Config_PacketHeaderEnabled bool = true
const Default_Config_PlatformEnabled bool = false
const Default_Config_KubernetesApiEnabled bool = false
const Default_Config_ServerTxBandwidthThreshold uint64 = 0
const Default_Config_BandwidthProbeInterval uint64 = 10
const Default_Config_CaptureSocketType CaptureSocketType = CaptureSocketType_AUTO
const Default_Config_NpbVlanMode VlanMode = VlanMode_NONE
const Default_Config_NpbDedupEnabled bool = true
const Default_Config_IfMacSource IfMacSource = IfMacSource_IF_MAC
const Default_Config_VtapFlow_1SEnabled bool = true
const Default_Config_DebugEnabled bool = true
const Default_Config_MaxEscapeSeconds uint32 = 3600
const Default_Config_RegionId uint32 = 0
const Default_Config_PodClusterId uint32 = 0
const Default_Config_EpcId uint32 = 0
const Default_Config_AnalyzerPort uint32 = 30033
const Default_Config_ProxyControllerPort uint32 = 30035
const Default_Config_TridentType common.TridentType = common.TridentType_TT_UNKNOWN
const Default_Config_CollectorSocketType SocketType = SocketType_TCP
const Default_Config_CompressorSocketType SocketType = SocketType_RAW_UDP
const Default_Config_NpbSocketType SocketType = SocketType_RAW_UDP
const Default_Config_PcapDataRetention uint32 = 7
const Default_Config_CapturePacketSize uint32 = 65535
const Default_Config_InactiveServerPortEnabled bool = true
const Default_Config_InactiveIpEnabled bool = true
const Default_Config_LibvirtXmlPath string = "/etc/libvirt/qemu"
const Default_Config_LogThreshold uint32 = 300
const Default_Config_LogLevel string = "INFO"
const Default_Config_ThreadThreshold uint32 = 500
const Default_Config_ProcessThreshold uint32 = 10
const Default_Config_LogRetention uint32 = 30
const Default_Config_NtpEnabled bool = true
const Default_Config_HttpLogProxyClient string = "X-Forwarded-For"
const Default_Config_HttpLogTraceId string = "traceparent, sw8"
const Default_Config_L7LogPacketSize uint32 = 1024
const Default_Config_L4LogCollectNpsThreshold uint64 = 10000
const Default_Config_L7LogCollectNpsThreshold uint64 = 10000
const Default_Config_HttpLogSpanId string = "traceparent, sw8"
const Default_Config_HttpLogXRequestId string = "X-Request-ID"
const Default_Config_L4PerformanceEnabled bool = true
const Default_Config_L7MetricsEnabled bool = true
const Default_Config_ExternalAgentHttpProxyEnabled bool = false
const Default_Config_ExternalAgentHttpProxyPort uint32 = 38086
const Default_Config_PacketSequenceFlag uint32 = 0
const Default_Config_SysFreeMemoryLimit uint32 = 0
const Default_Config_LogFileSize uint32 = 1000
const Default_Config_TapMode TapMode = TapMode_LOCAL

func (m *Config) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return Default_Config_Enabled
}

func (m *Config) GetMaxCpus() uint32 {
	if m != nil && m.MaxCpus != nil {
		return *m.MaxCpus
	}
	return Default_Config_MaxCpus
}

func (m *Config) GetMaxMemory() uint32 {
	if m != nil && m.MaxMemory != nil {
		return *m.MaxMemory
	}
	return Default_Config_MaxMemory
}

func (m *Config) GetSyncInterval() uint32 {
	if m != nil && m.SyncInterval != nil {
		return *m.SyncInterval
	}
	return Default_Config_SyncInterval
}

func (m *Config) GetStatsInterval() uint32 {
	if m != nil && m.StatsInterval != nil {
		return *m.StatsInterval
	}
	return Default_Config_StatsInterval
}

func (m *Config) GetGlobalPpsThreshold() uint64 {
	if m != nil && m.GlobalPpsThreshold != nil {
		return *m.GlobalPpsThreshold
	}
	return Default_Config_GlobalPpsThreshold
}

func (m *Config) GetTapInterfaceRegex() string {
	if m != nil && m.TapInterfaceRegex != nil {
		return *m.TapInterfaceRegex
	}
	return Default_Config_TapInterfaceRegex
}

func (m *Config) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *Config) GetRsyslogEnabled() bool {
	if m != nil && m.RsyslogEnabled != nil {
		return *m.RsyslogEnabled
	}
	return Default_Config_RsyslogEnabled
}

func (m *Config) GetOutputVlan() uint32 {
	if m != nil && m.OutputVlan != nil {
		return *m.OutputVlan
	}
	return Default_Config_OutputVlan
}

func (m *Config) GetMtu() uint32 {
	if m != nil && m.Mtu != nil {
		return *m.Mtu
	}
	return Default_Config_Mtu
}

func (m *Config) GetNpbBpsThreshold() uint64 {
	if m != nil && m.NpbBpsThreshold != nil {
		return *m.NpbBpsThreshold
	}
	return Default_Config_NpbBpsThreshold
}

func (m *Config) GetCollectorEnabled() bool {
	if m != nil && m.CollectorEnabled != nil {
		return *m.CollectorEnabled
	}
	return Default_Config_CollectorEnabled
}

func (m *Config) GetPacketHeaderEnabled() bool {
	if m != nil && m.PacketHeaderEnabled != nil {
		return *m.PacketHeaderEnabled
	}
	return Default_Config_PacketHeaderEnabled
}

func (m *Config) GetPlatformEnabled() bool {
	if m != nil && m.PlatformEnabled != nil {
		return *m.PlatformEnabled
	}
	return Default_Config_PlatformEnabled
}

func (m *Config) GetKubernetesApiEnabled() bool {
	if m != nil && m.KubernetesApiEnabled != nil {
		return *m.KubernetesApiEnabled
	}
	return Default_Config_KubernetesApiEnabled
}

func (m *Config) GetServerTxBandwidthThreshold() uint64 {
	if m != nil && m.ServerTxBandwidthThreshold != nil {
		return *m.ServerTxBandwidthThreshold
	}
	return Default_Config_ServerTxBandwidthThreshold
}

func (m *Config) GetBandwidthProbeInterval() uint64 {
	if m != nil && m.BandwidthProbeInterval != nil {
		return *m.BandwidthProbeInterval
	}
	return Default_Config_BandwidthProbeInterval
}

func (m *Config) GetCaptureSocketType() CaptureSocketType {
	if m != nil && m.CaptureSocketType != nil {
		return *m.CaptureSocketType
	}
	return Default_Config_CaptureSocketType
}

func (m *Config) GetNpbVlanMode() VlanMode {
	if m != nil && m.NpbVlanMode != nil {
		return *m.NpbVlanMode
	}
	return Default_Config_NpbVlanMode
}

func (m *Config) GetL4LogTapTypes() []uint32 {
	if m != nil {
		return m.L4LogTapTypes
	}
	return nil
}

func (m *Config) GetNpbDedupEnabled() bool {
	if m != nil && m.NpbDedupEnabled != nil {
		return *m.NpbDedupEnabled
	}
	return Default_Config_NpbDedupEnabled
}

func (m *Config) GetIfMacSource() IfMacSource {
	if m != nil && m.IfMacSource != nil {
		return *m.IfMacSource
	}
	return Default_Config_IfMacSource
}

func (m *Config) GetVtapFlow_1SEnabled() bool {
	if m != nil && m.VtapFlow_1SEnabled != nil {
		return *m.VtapFlow_1SEnabled
	}
	return Default_Config_VtapFlow_1SEnabled
}

func (m *Config) GetDebugEnabled() bool {
	if m != nil && m.DebugEnabled != nil {
		return *m.DebugEnabled
	}
	return Default_Config_DebugEnabled
}

func (m *Config) GetAnalyzerIp() string {
	if m != nil && m.AnalyzerIp != nil {
		return *m.AnalyzerIp
	}
	return ""
}

func (m *Config) GetMaxEscapeSeconds() uint32 {
	if m != nil && m.MaxEscapeSeconds != nil {
		return *m.MaxEscapeSeconds
	}
	return Default_Config_MaxEscapeSeconds
}

func (m *Config) GetProxyControllerIp() string {
	if m != nil && m.ProxyControllerIp != nil {
		return *m.ProxyControllerIp
	}
	return ""
}

func (m *Config) GetRegionId() uint32 {
	if m != nil && m.RegionId != nil {
		return *m.RegionId
	}
	return Default_Config_RegionId
}

func (m *Config) GetPodClusterId() uint32 {
	if m != nil && m.PodClusterId != nil {
		return *m.PodClusterId
	}
	return Default_Config_PodClusterId
}

func (m *Config) GetEpcId() uint32 {
	if m != nil && m.EpcId != nil {
		return *m.EpcId
	}
	return Default_Config_EpcId
}

func (m *Config) GetAnalyzerPort() uint32 {
	if m != nil && m.AnalyzerPort != nil {
		return *m.AnalyzerPort
	}
	return Default_Config_AnalyzerPort
}

func (m *Config) GetProxyControllerPort() uint32 {
	if m != nil && m.ProxyControllerPort != nil {
		return *m.ProxyControllerPort
	}
	return Default_Config_ProxyControllerPort
}

func (m *Config) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

func (m *Config) GetTridentType() common.TridentType {
	if m != nil && m.TridentType != nil {
		return *m.TridentType
	}
	return Default_Config_TridentType
}

func (m *Config) GetCollectorSocketType() SocketType {
	if m != nil && m.CollectorSocketType != nil {
		return *m.CollectorSocketType
	}
	return Default_Config_CollectorSocketType
}

func (m *Config) GetCompressorSocketType() SocketType {
	if m != nil && m.CompressorSocketType != nil {
		return *m.CompressorSocketType
	}
	return Default_Config_CompressorSocketType
}

func (m *Config) GetNpbSocketType() SocketType {
	if m != nil && m.NpbSocketType != nil {
		return *m.NpbSocketType
	}
	return Default_Config_NpbSocketType
}

func (m *Config) GetPcapDataRetention() uint32 {
	if m != nil && m.PcapDataRetention != nil {
		return *m.PcapDataRetention
	}
	return Default_Config_PcapDataRetention
}

func (m *Config) GetCapturePacketSize() uint32 {
	if m != nil && m.CapturePacketSize != nil {
		return *m.CapturePacketSize
	}
	return Default_Config_CapturePacketSize
}

func (m *Config) GetInactiveServerPortEnabled() bool {
	if m != nil && m.InactiveServerPortEnabled != nil {
		return *m.InactiveServerPortEnabled
	}
	return Default_Config_InactiveServerPortEnabled
}

func (m *Config) GetCaptureBpf() string {
	if m != nil && m.CaptureBpf != nil {
		return *m.CaptureBpf
	}
	return ""
}

func (m *Config) GetInactiveIpEnabled() bool {
	if m != nil && m.InactiveIpEnabled != nil {
		return *m.InactiveIpEnabled
	}
	return Default_Config_InactiveIpEnabled
}

func (m *Config) GetLibvirtXmlPath() string {
	if m != nil && m.LibvirtXmlPath != nil {
		return *m.LibvirtXmlPath
	}
	return Default_Config_LibvirtXmlPath
}

func (m *Config) GetLogThreshold() uint32 {
	if m != nil && m.LogThreshold != nil {
		return *m.LogThreshold
	}
	return Default_Config_LogThreshold
}

func (m *Config) GetLogLevel() string {
	if m != nil && m.LogLevel != nil {
		return *m.LogLevel
	}
	return Default_Config_LogLevel
}

func (m *Config) GetThreadThreshold() uint32 {
	if m != nil && m.ThreadThreshold != nil {
		return *m.ThreadThreshold
	}
	return Default_Config_ThreadThreshold
}

func (m *Config) GetProcessThreshold() uint32 {
	if m != nil && m.ProcessThreshold != nil {
		return *m.ProcessThreshold
	}
	return Default_Config_ProcessThreshold
}

func (m *Config) GetLogRetention() uint32 {
	if m != nil && m.LogRetention != nil {
		return *m.LogRetention
	}
	return Default_Config_LogRetention
}

func (m *Config) GetNtpEnabled() bool {
	if m != nil && m.NtpEnabled != nil {
		return *m.NtpEnabled
	}
	return Default_Config_NtpEnabled
}

func (m *Config) GetDecapType() []DecapType {
	if m != nil {
		return m.DecapType
	}
	return nil
}

func (m *Config) GetHttpLogProxyClient() string {
	if m != nil && m.HttpLogProxyClient != nil {
		return *m.HttpLogProxyClient
	}
	return Default_Config_HttpLogProxyClient
}

func (m *Config) GetHttpLogTraceId() string {
	if m != nil && m.HttpLogTraceId != nil {
		return *m.HttpLogTraceId
	}
	return Default_Config_HttpLogTraceId
}

func (m *Config) GetL7LogPacketSize() uint32 {
	if m != nil && m.L7LogPacketSize != nil {
		return *m.L7LogPacketSize
	}
	return Default_Config_L7LogPacketSize
}

func (m *Config) GetL4LogCollectNpsThreshold() uint64 {
	if m != nil && m.L4LogCollectNpsThreshold != nil {
		return *m.L4LogCollectNpsThreshold
	}
	return Default_Config_L4LogCollectNpsThreshold
}

func (m *Config) GetL7LogCollectNpsThreshold() uint64 {
	if m != nil && m.L7LogCollectNpsThreshold != nil {
		return *m.L7LogCollectNpsThreshold
	}
	return Default_Config_L7LogCollectNpsThreshold
}

func (m *Config) GetHttpLogSpanId() string {
	if m != nil && m.HttpLogSpanId != nil {
		return *m.HttpLogSpanId
	}
	return Default_Config_HttpLogSpanId
}

func (m *Config) GetHttpLogXRequestId() string {
	if m != nil && m.HttpLogXRequestId != nil {
		return *m.HttpLogXRequestId
	}
	return Default_Config_HttpLogXRequestId
}

func (m *Config) GetL7LogStoreTapTypes() []uint32 {
	if m != nil {
		return m.L7LogStoreTapTypes
	}
	return nil
}

func (m *Config) GetL4PerformanceEnabled() bool {
	if m != nil && m.L4PerformanceEnabled != nil {
		return *m.L4PerformanceEnabled
	}
	return Default_Config_L4PerformanceEnabled
}

func (m *Config) GetL7MetricsEnabled() bool {
	if m != nil && m.L7MetricsEnabled != nil {
		return *m.L7MetricsEnabled
	}
	return Default_Config_L7MetricsEnabled
}

func (m *Config) GetExternalAgentHttpProxyEnabled() bool {
	if m != nil && m.ExternalAgentHttpProxyEnabled != nil {
		return *m.ExternalAgentHttpProxyEnabled
	}
	return Default_Config_ExternalAgentHttpProxyEnabled
}

func (m *Config) GetExternalAgentHttpProxyPort() uint32 {
	if m != nil && m.ExternalAgentHttpProxyPort != nil {
		return *m.ExternalAgentHttpProxyPort
	}
	return Default_Config_ExternalAgentHttpProxyPort
}

func (m *Config) GetPacketSequenceFlag() uint32 {
	if m != nil && m.PacketSequenceFlag != nil {
		return *m.PacketSequenceFlag
	}
	return Default_Config_PacketSequenceFlag
}

func (m *Config) GetSysFreeMemoryLimit() uint32 {
	if m != nil && m.SysFreeMemoryLimit != nil {
		return *m.SysFreeMemoryLimit
	}
	return Default_Config_SysFreeMemoryLimit
}

func (m *Config) GetLogFileSize() uint32 {
	if m != nil && m.LogFileSize != nil {
		return *m.LogFileSize
	}
	return Default_Config_LogFileSize
}

func (m *Config) GetTapMode() TapMode {
	if m != nil && m.TapMode != nil {
		return *m.TapMode
	}
	return Default_Config_TapMode
}

func (m *Config) GetLocalConfig() string {
	if m != nil && m.LocalConfig != nil {
		return *m.LocalConfig
	}
	return ""
}

type Segment struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Mac                  []string `protobuf:"bytes,2,rep,name=mac" json:"mac,omitempty"`
	InterfaceId          []uint32 `protobuf:"varint,3,rep,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Segment) Reset()         { *m = Segment{} }
func (m *Segment) String() string { return proto.CompactTextString(m) }
func (*Segment) ProtoMessage()    {}
func (*Segment) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{5}
}
func (m *Segment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Segment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Segment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Segment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segment.Merge(m, src)
}
func (m *Segment) XXX_Size() int {
	return m.Size()
}
func (m *Segment) XXX_DiscardUnknown() {
	xxx_messageInfo_Segment.DiscardUnknown(m)
}

var xxx_messageInfo_Segment proto.InternalMessageInfo

func (m *Segment) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Segment) GetMac() []string {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *Segment) GetInterfaceId() []uint32 {
	if m != nil {
		return m.InterfaceId
	}
	return nil
}

type IpResource struct {
	Ip                   *string  `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Masklen              *uint32  `protobuf:"varint,2,opt,name=masklen,def=32" json:"masklen,omitempty"`
	SubnetId             *uint32  `protobuf:"varint,3,opt,name=subnet_id,json=subnetId,def=0" json:"subnet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpResource) Reset()         { *m = IpResource{} }
func (m *IpResource) String() string { return proto.CompactTextString(m) }
func (*IpResource) ProtoMessage()    {}
func (*IpResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{6}
}
func (m *IpResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpResource.Merge(m, src)
}
func (m *IpResource) XXX_Size() int {
	return m.Size()
}
func (m *IpResource) XXX_DiscardUnknown() {
	xxx_messageInfo_IpResource.DiscardUnknown(m)
}

var xxx_messageInfo_IpResource proto.InternalMessageInfo

const Default_IpResource_Masklen uint32 = 32
const Default_IpResource_SubnetId uint32 = 0

func (m *IpResource) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *IpResource) GetMasklen() uint32 {
	if m != nil && m.Masklen != nil {
		return *m.Masklen
	}
	return Default_IpResource_Masklen
}

func (m *IpResource) GetSubnetId() uint32 {
	if m != nil && m.SubnetId != nil {
		return *m.SubnetId
	}
	return Default_IpResource_SubnetId
}

type Interface struct {
	Id                   *uint32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DeviceType           *uint32       `protobuf:"varint,2,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	DeviceId             *uint32       `protobuf:"varint,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	IfType               *uint32       `protobuf:"varint,4,opt,name=if_type,json=ifType" json:"if_type,omitempty"`
	EpcId                *uint32       `protobuf:"varint,6,opt,name=epc_id,json=epcId" json:"epc_id,omitempty"`
	LaunchServer         *string       `protobuf:"bytes,7,opt,name=launch_server,json=launchServer" json:"launch_server,omitempty"`
	IpResources          []*IpResource `protobuf:"bytes,8,rep,name=ip_resources,json=ipResources" json:"ip_resources,omitempty"`
	LaunchServerId       *uint32       `protobuf:"varint,9,opt,name=launch_server_id,json=launchServerId" json:"launch_server_id,omitempty"`
	RegionId             *uint32       `protobuf:"varint,10,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	Mac                  *uint64       `protobuf:"varint,11,opt,name=mac" json:"mac,omitempty"`
	PodNodeId            *uint32       `protobuf:"varint,21,opt,name=pod_node_id,json=podNodeId" json:"pod_node_id,omitempty"`
	AzId                 *uint32       `protobuf:"varint,22,opt,name=az_id,json=azId" json:"az_id,omitempty"`
	PodGroupId           *uint32       `protobuf:"varint,23,opt,name=pod_group_id,json=podGroupId" json:"pod_group_id,omitempty"`
	PodNsId              *uint32       `protobuf:"varint,24,opt,name=pod_ns_id,json=podNsId" json:"pod_ns_id,omitempty"`
	PodId                *uint32       `protobuf:"varint,25,opt,name=pod_id,json=podId" json:"pod_id,omitempty"`
	PodClusterId         *uint32       `protobuf:"varint,26,opt,name=pod_cluster_id,json=podClusterId" json:"pod_cluster_id,omitempty"`
	IsVipInterface       *bool         `protobuf:"varint,100,opt,name=is_vip_interface,json=isVipInterface,def=0" json:"is_vip_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{7}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

const Default_Interface_IsVipInterface bool = false

func (m *Interface) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Interface) GetDeviceType() uint32 {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return 0
}

func (m *Interface) GetDeviceId() uint32 {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return 0
}

func (m *Interface) GetIfType() uint32 {
	if m != nil && m.IfType != nil {
		return *m.IfType
	}
	return 0
}

func (m *Interface) GetEpcId() uint32 {
	if m != nil && m.EpcId != nil {
		return *m.EpcId
	}
	return 0
}

func (m *Interface) GetLaunchServer() string {
	if m != nil && m.LaunchServer != nil {
		return *m.LaunchServer
	}
	return ""
}

func (m *Interface) GetIpResources() []*IpResource {
	if m != nil {
		return m.IpResources
	}
	return nil
}

func (m *Interface) GetLaunchServerId() uint32 {
	if m != nil && m.LaunchServerId != nil {
		return *m.LaunchServerId
	}
	return 0
}

func (m *Interface) GetRegionId() uint32 {
	if m != nil && m.RegionId != nil {
		return *m.RegionId
	}
	return 0
}

func (m *Interface) GetMac() uint64 {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return 0
}

func (m *Interface) GetPodNodeId() uint32 {
	if m != nil && m.PodNodeId != nil {
		return *m.PodNodeId
	}
	return 0
}

func (m *Interface) GetAzId() uint32 {
	if m != nil && m.AzId != nil {
		return *m.AzId
	}
	return 0
}

func (m *Interface) GetPodGroupId() uint32 {
	if m != nil && m.PodGroupId != nil {
		return *m.PodGroupId
	}
	return 0
}

func (m *Interface) GetPodNsId() uint32 {
	if m != nil && m.PodNsId != nil {
		return *m.PodNsId
	}
	return 0
}

func (m *Interface) GetPodId() uint32 {
	if m != nil && m.PodId != nil {
		return *m.PodId
	}
	return 0
}

func (m *Interface) GetPodClusterId() uint32 {
	if m != nil && m.PodClusterId != nil {
		return *m.PodClusterId
	}
	return 0
}

func (m *Interface) GetIsVipInterface() bool {
	if m != nil && m.IsVipInterface != nil {
		return *m.IsVipInterface
	}
	return Default_Interface_IsVipInterface
}

// 字段含义查看README
type Group struct {
	Id                   *uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EpcId                *uint32    `protobuf:"varint,2,opt,name=epc_id,json=epcId,def=0" json:"epc_id,omitempty"`
	Type                 *GroupType `protobuf:"varint,3,opt,name=type,enum=trident.GroupType" json:"type,omitempty"`
	Ips                  []string   `protobuf:"bytes,5,rep,name=ips" json:"ips,omitempty"`
	IpRanges             []string   `protobuf:"bytes,6,rep,name=ip_ranges,json=ipRanges" json:"ip_ranges,omitempty"`
	BusinessId           *uint32    `protobuf:"varint,7,opt,name=business_id,json=businessId" json:"business_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{8}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

const Default_Group_EpcId uint32 = 0

func (m *Group) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Group) GetEpcId() uint32 {
	if m != nil && m.EpcId != nil {
		return *m.EpcId
	}
	return Default_Group_EpcId
}

func (m *Group) GetType() GroupType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return GroupType_NAMED
}

func (m *Group) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *Group) GetIpRanges() []string {
	if m != nil {
		return m.IpRanges
	}
	return nil
}

func (m *Group) GetBusinessId() uint32 {
	if m != nil && m.BusinessId != nil {
		return *m.BusinessId
	}
	return 0
}

type Service struct {
	EpcId                *uint32      `protobuf:"varint,2,opt,name=epc_id,json=epcId,def=0" json:"epc_id,omitempty"`
	Ips                  []string     `protobuf:"bytes,5,rep,name=ips" json:"ips,omitempty"`
	IpRanges             []string     `protobuf:"bytes,6,rep,name=ip_ranges,json=ipRanges" json:"ip_ranges,omitempty"`
	Protocol             *uint32      `protobuf:"varint,7,opt,name=protocol,def=256" json:"protocol,omitempty"`
	ServerPorts          *string      `protobuf:"bytes,8,opt,name=server_ports,json=serverPorts" json:"server_ports,omitempty"`
	Type                 *ServiceType `protobuf:"varint,9,opt,name=type,enum=trident.ServiceType" json:"type,omitempty"`
	Id                   *uint32      `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{9}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return m.Size()
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

const Default_Service_EpcId uint32 = 0
const Default_Service_Protocol uint32 = 256

func (m *Service) GetEpcId() uint32 {
	if m != nil && m.EpcId != nil {
		return *m.EpcId
	}
	return Default_Service_EpcId
}

func (m *Service) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *Service) GetIpRanges() []string {
	if m != nil {
		return m.IpRanges
	}
	return nil
}

func (m *Service) GetProtocol() uint32 {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Default_Service_Protocol
}

func (m *Service) GetServerPorts() string {
	if m != nil && m.ServerPorts != nil {
		return *m.ServerPorts
	}
	return ""
}

func (m *Service) GetType() ServiceType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ServiceType_POD_SERVICE
}

func (m *Service) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type Groups struct {
	Groups               []*Group   `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
	Svcs                 []*Service `protobuf:"bytes,2,rep,name=svcs" json:"svcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Groups) Reset()         { *m = Groups{} }
func (m *Groups) String() string { return proto.CompactTextString(m) }
func (*Groups) ProtoMessage()    {}
func (*Groups) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{10}
}
func (m *Groups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Groups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Groups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Groups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups.Merge(m, src)
}
func (m *Groups) XXX_Size() int {
	return m.Size()
}
func (m *Groups) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups.DiscardUnknown(m)
}

var xxx_messageInfo_Groups proto.InternalMessageInfo

func (m *Groups) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Groups) GetSvcs() []*Service {
	if m != nil {
		return m.Svcs
	}
	return nil
}

type PeerConnection struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LocalEpcId           *uint32  `protobuf:"varint,2,opt,name=local_epc_id,json=localEpcId" json:"local_epc_id,omitempty"`
	RemoteEpcId          *uint32  `protobuf:"varint,3,opt,name=remote_epc_id,json=remoteEpcId" json:"remote_epc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerConnection) Reset()         { *m = PeerConnection{} }
func (m *PeerConnection) String() string { return proto.CompactTextString(m) }
func (*PeerConnection) ProtoMessage()    {}
func (*PeerConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{11}
}
func (m *PeerConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerConnection.Merge(m, src)
}
func (m *PeerConnection) XXX_Size() int {
	return m.Size()
}
func (m *PeerConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerConnection.DiscardUnknown(m)
}

var xxx_messageInfo_PeerConnection proto.InternalMessageInfo

func (m *PeerConnection) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerConnection) GetLocalEpcId() uint32 {
	if m != nil && m.LocalEpcId != nil {
		return *m.LocalEpcId
	}
	return 0
}

func (m *PeerConnection) GetRemoteEpcId() uint32 {
	if m != nil && m.RemoteEpcId != nil {
		return *m.RemoteEpcId
	}
	return 0
}

type Cidr struct {
	Prefix               *string   `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	Type                 *CidrType `protobuf:"varint,2,opt,name=type,enum=trident.CidrType" json:"type,omitempty"`
	EpcId                *int32    `protobuf:"varint,3,opt,name=epc_id,json=epcId" json:"epc_id,omitempty"`
	SubnetId             *uint32   `protobuf:"varint,4,opt,name=subnet_id,json=subnetId" json:"subnet_id,omitempty"`
	RegionId             *uint32   `protobuf:"varint,5,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	AzId                 *uint32   `protobuf:"varint,6,opt,name=az_id,json=azId" json:"az_id,omitempty"`
	TunnelId             *uint32   `protobuf:"varint,7,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	IsVip                *bool     `protobuf:"varint,20,opt,name=is_vip,json=isVip,def=0" json:"is_vip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Cidr) Reset()         { *m = Cidr{} }
func (m *Cidr) String() string { return proto.CompactTextString(m) }
func (*Cidr) ProtoMessage()    {}
func (*Cidr) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{12}
}
func (m *Cidr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cidr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cidr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cidr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cidr.Merge(m, src)
}
func (m *Cidr) XXX_Size() int {
	return m.Size()
}
func (m *Cidr) XXX_DiscardUnknown() {
	xxx_messageInfo_Cidr.DiscardUnknown(m)
}

var xxx_messageInfo_Cidr proto.InternalMessageInfo

const Default_Cidr_IsVip bool = false

func (m *Cidr) GetPrefix() string {
	if m != nil && m.Prefix != nil {
		return *m.Prefix
	}
	return ""
}

func (m *Cidr) GetType() CidrType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CidrType_WAN
}

func (m *Cidr) GetEpcId() int32 {
	if m != nil && m.EpcId != nil {
		return *m.EpcId
	}
	return 0
}

func (m *Cidr) GetSubnetId() uint32 {
	if m != nil && m.SubnetId != nil {
		return *m.SubnetId
	}
	return 0
}

func (m *Cidr) GetRegionId() uint32 {
	if m != nil && m.RegionId != nil {
		return *m.RegionId
	}
	return 0
}

func (m *Cidr) GetAzId() uint32 {
	if m != nil && m.AzId != nil {
		return *m.AzId
	}
	return 0
}

func (m *Cidr) GetTunnelId() uint32 {
	if m != nil && m.TunnelId != nil {
		return *m.TunnelId
	}
	return 0
}

func (m *Cidr) GetIsVip() bool {
	if m != nil && m.IsVip != nil {
		return *m.IsVip
	}
	return Default_Cidr_IsVip
}

type PlatformData struct {
	Interfaces           []*Interface      `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
	PeerConnections      []*PeerConnection `protobuf:"bytes,3,rep,name=peer_connections,json=peerConnections" json:"peer_connections,omitempty"`
	Cidrs                []*Cidr           `protobuf:"bytes,4,rep,name=cidrs" json:"cidrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PlatformData) Reset()         { *m = PlatformData{} }
func (m *PlatformData) String() string { return proto.CompactTextString(m) }
func (*PlatformData) ProtoMessage()    {}
func (*PlatformData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{13}
}
func (m *PlatformData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlatformData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlatformData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlatformData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformData.Merge(m, src)
}
func (m *PlatformData) XXX_Size() int {
	return m.Size()
}
func (m *PlatformData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformData.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformData proto.InternalMessageInfo

func (m *PlatformData) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *PlatformData) GetPeerConnections() []*PeerConnection {
	if m != nil {
		return m.PeerConnections
	}
	return nil
}

func (m *PlatformData) GetCidrs() []*Cidr {
	if m != nil {
		return m.Cidrs
	}
	return nil
}

type NpbAction struct {
	TunnelType           *TunnelType `protobuf:"varint,1,opt,name=tunnel_type,json=tunnelType,enum=trident.TunnelType,def=0" json:"tunnel_type,omitempty"`
	TunnelId             *uint32     `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	TunnelIp             *string     `protobuf:"bytes,3,opt,name=tunnel_ip,json=tunnelIp" json:"tunnel_ip,omitempty"`
	TapSide              *TapSide    `protobuf:"varint,4,opt,name=tap_side,json=tapSide,enum=trident.TapSide" json:"tap_side,omitempty"`
	PayloadSlice         *uint32     `protobuf:"varint,5,opt,name=payload_slice,json=payloadSlice,def=65535" json:"payload_slice,omitempty"`
	NpbAclGroupId        *uint32     `protobuf:"varint,6,opt,name=npb_acl_group_id,json=npbAclGroupId" json:"npb_acl_group_id,omitempty"`
	TunnelIpId           *uint32     `protobuf:"varint,7,opt,name=tunnel_ip_id,json=tunnelIpId" json:"tunnel_ip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NpbAction) Reset()         { *m = NpbAction{} }
func (m *NpbAction) String() string { return proto.CompactTextString(m) }
func (*NpbAction) ProtoMessage()    {}
func (*NpbAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{14}
}
func (m *NpbAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpbAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpbAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpbAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpbAction.Merge(m, src)
}
func (m *NpbAction) XXX_Size() int {
	return m.Size()
}
func (m *NpbAction) XXX_DiscardUnknown() {
	xxx_messageInfo_NpbAction.DiscardUnknown(m)
}

var xxx_messageInfo_NpbAction proto.InternalMessageInfo

const Default_NpbAction_TunnelType TunnelType = TunnelType_VXLAN
const Default_NpbAction_PayloadSlice uint32 = 65535

func (m *NpbAction) GetTunnelType() TunnelType {
	if m != nil && m.TunnelType != nil {
		return *m.TunnelType
	}
	return Default_NpbAction_TunnelType
}

func (m *NpbAction) GetTunnelId() uint32 {
	if m != nil && m.TunnelId != nil {
		return *m.TunnelId
	}
	return 0
}

func (m *NpbAction) GetTunnelIp() string {
	if m != nil && m.TunnelIp != nil {
		return *m.TunnelIp
	}
	return ""
}

func (m *NpbAction) GetTapSide() TapSide {
	if m != nil && m.TapSide != nil {
		return *m.TapSide
	}
	return TapSide_SRC
}

func (m *NpbAction) GetPayloadSlice() uint32 {
	if m != nil && m.PayloadSlice != nil {
		return *m.PayloadSlice
	}
	return Default_NpbAction_PayloadSlice
}

func (m *NpbAction) GetNpbAclGroupId() uint32 {
	if m != nil && m.NpbAclGroupId != nil {
		return *m.NpbAclGroupId
	}
	return 0
}

func (m *NpbAction) GetTunnelIpId() uint32 {
	if m != nil && m.TunnelIpId != nil {
		return *m.TunnelIpId
	}
	return 0
}

// 字段含义查看README
type FlowAcl struct {
	Id                   *uint32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TapType              *uint32      `protobuf:"varint,2,opt,name=tap_type,json=tapType" json:"tap_type,omitempty"`
	Protocol             *uint32      `protobuf:"varint,6,opt,name=protocol,def=256" json:"protocol,omitempty"`
	SrcPorts             *string      `protobuf:"bytes,7,opt,name=src_ports,json=srcPorts" json:"src_ports,omitempty"`
	DstPorts             *string      `protobuf:"bytes,8,opt,name=dst_ports,json=dstPorts" json:"dst_ports,omitempty"`
	Vlan                 *uint32      `protobuf:"varint,9,opt,name=vlan" json:"vlan,omitempty"`
	NpbActions           []*NpbAction `protobuf:"bytes,11,rep,name=npb_actions,json=npbActions" json:"npb_actions,omitempty"`
	SrcGroupIds          []int32      `protobuf:"varint,12,rep,name=src_group_ids,json=srcGroupIds" json:"src_group_ids,omitempty"`
	DstGroupIds          []int32      `protobuf:"varint,13,rep,name=dst_group_ids,json=dstGroupIds" json:"dst_group_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FlowAcl) Reset()         { *m = FlowAcl{} }
func (m *FlowAcl) String() string { return proto.CompactTextString(m) }
func (*FlowAcl) ProtoMessage()    {}
func (*FlowAcl) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{15}
}
func (m *FlowAcl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowAcl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowAcl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowAcl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowAcl.Merge(m, src)
}
func (m *FlowAcl) XXX_Size() int {
	return m.Size()
}
func (m *FlowAcl) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowAcl.DiscardUnknown(m)
}

var xxx_messageInfo_FlowAcl proto.InternalMessageInfo

const Default_FlowAcl_Protocol uint32 = 256

func (m *FlowAcl) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FlowAcl) GetTapType() uint32 {
	if m != nil && m.TapType != nil {
		return *m.TapType
	}
	return 0
}

func (m *FlowAcl) GetProtocol() uint32 {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Default_FlowAcl_Protocol
}

func (m *FlowAcl) GetSrcPorts() string {
	if m != nil && m.SrcPorts != nil {
		return *m.SrcPorts
	}
	return ""
}

func (m *FlowAcl) GetDstPorts() string {
	if m != nil && m.DstPorts != nil {
		return *m.DstPorts
	}
	return ""
}

func (m *FlowAcl) GetVlan() uint32 {
	if m != nil && m.Vlan != nil {
		return *m.Vlan
	}
	return 0
}

func (m *FlowAcl) GetNpbActions() []*NpbAction {
	if m != nil {
		return m.NpbActions
	}
	return nil
}

func (m *FlowAcl) GetSrcGroupIds() []int32 {
	if m != nil {
		return m.SrcGroupIds
	}
	return nil
}

func (m *FlowAcl) GetDstGroupIds() []int32 {
	if m != nil {
		return m.DstGroupIds
	}
	return nil
}

type FlowAcls struct {
	FlowAcl              []*FlowAcl `protobuf:"bytes,1,rep,name=flow_acl,json=flowAcl" json:"flow_acl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FlowAcls) Reset()         { *m = FlowAcls{} }
func (m *FlowAcls) String() string { return proto.CompactTextString(m) }
func (*FlowAcls) ProtoMessage()    {}
func (*FlowAcls) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{16}
}
func (m *FlowAcls) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowAcls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowAcls.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowAcls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowAcls.Merge(m, src)
}
func (m *FlowAcls) XXX_Size() int {
	return m.Size()
}
func (m *FlowAcls) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowAcls.DiscardUnknown(m)
}

var xxx_messageInfo_FlowAcls proto.InternalMessageInfo

func (m *FlowAcls) GetFlowAcl() []*FlowAcl {
	if m != nil {
		return m.FlowAcl
	}
	return nil
}

type PodIp struct {
	PodId                *uint32  `protobuf:"varint,1,opt,name=pod_id,json=podId" json:"pod_id,omitempty"`
	PodName              *string  `protobuf:"bytes,2,opt,name=pod_name,json=podName" json:"pod_name,omitempty"`
	EpcId                *uint32  `protobuf:"varint,3,opt,name=epc_id,json=epcId" json:"epc_id,omitempty"`
	Ip                   *string  `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	PodClusterId         *uint32  `protobuf:"varint,5,opt,name=pod_cluster_id,json=podClusterId" json:"pod_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodIp) Reset()         { *m = PodIp{} }
func (m *PodIp) String() string { return proto.CompactTextString(m) }
func (*PodIp) ProtoMessage()    {}
func (*PodIp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{17}
}
func (m *PodIp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodIp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodIp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodIp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodIp.Merge(m, src)
}
func (m *PodIp) XXX_Size() int {
	return m.Size()
}
func (m *PodIp) XXX_DiscardUnknown() {
	xxx_messageInfo_PodIp.DiscardUnknown(m)
}

var xxx_messageInfo_PodIp proto.InternalMessageInfo

func (m *PodIp) GetPodId() uint32 {
	if m != nil && m.PodId != nil {
		return *m.PodId
	}
	return 0
}

func (m *PodIp) GetPodName() string {
	if m != nil && m.PodName != nil {
		return *m.PodName
	}
	return ""
}

func (m *PodIp) GetEpcId() uint32 {
	if m != nil && m.EpcId != nil {
		return *m.EpcId
	}
	return 0
}

func (m *PodIp) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *PodIp) GetPodClusterId() uint32 {
	if m != nil && m.PodClusterId != nil {
		return *m.PodClusterId
	}
	return 0
}

type VtapIp struct {
	VtapId               *uint32  `protobuf:"varint,1,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	EpcId                *uint32  `protobuf:"varint,2,opt,name=epc_id,json=epcId" json:"epc_id,omitempty"`
	Ip                   *string  `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	PodClusterId         *uint32  `protobuf:"varint,4,opt,name=pod_cluster_id,json=podClusterId" json:"pod_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VtapIp) Reset()         { *m = VtapIp{} }
func (m *VtapIp) String() string { return proto.CompactTextString(m) }
func (*VtapIp) ProtoMessage()    {}
func (*VtapIp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{18}
}
func (m *VtapIp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VtapIp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VtapIp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VtapIp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VtapIp.Merge(m, src)
}
func (m *VtapIp) XXX_Size() int {
	return m.Size()
}
func (m *VtapIp) XXX_DiscardUnknown() {
	xxx_messageInfo_VtapIp.DiscardUnknown(m)
}

var xxx_messageInfo_VtapIp proto.InternalMessageInfo

func (m *VtapIp) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

func (m *VtapIp) GetEpcId() uint32 {
	if m != nil && m.EpcId != nil {
		return *m.EpcId
	}
	return 0
}

func (m *VtapIp) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *VtapIp) GetPodClusterId() uint32 {
	if m != nil && m.PodClusterId != nil {
		return *m.PodClusterId
	}
	return 0
}

type SkipInterface struct {
	// 若该接口对应的虚拟机内已经部署采集器,
	// 发送此接口给虚拟机所在宿主机采集器
	Mac                  *uint64  `protobuf:"varint,1,opt,name=mac" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkipInterface) Reset()         { *m = SkipInterface{} }
func (m *SkipInterface) String() string { return proto.CompactTextString(m) }
func (*SkipInterface) ProtoMessage()    {}
func (*SkipInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{19}
}
func (m *SkipInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkipInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkipInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkipInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkipInterface.Merge(m, src)
}
func (m *SkipInterface) XXX_Size() int {
	return m.Size()
}
func (m *SkipInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_SkipInterface.DiscardUnknown(m)
}

var xxx_messageInfo_SkipInterface proto.InternalMessageInfo

func (m *SkipInterface) GetMac() uint64 {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return 0
}

type SyncResponse struct {
	Status               *Status          `protobuf:"varint,1,opt,name=status,enum=trident.Status" json:"status,omitempty"`
	Config               *Config          `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	Revision             *string          `protobuf:"bytes,4,opt,name=revision" json:"revision,omitempty"`
	SelfUpdateUrl        *string          `protobuf:"bytes,5,opt,name=self_update_url,json=selfUpdateUrl" json:"self_update_url,omitempty"`
	VersionPlatformData  *uint64          `protobuf:"varint,6,opt,name=version_platform_data,json=versionPlatformData,def=0" json:"version_platform_data,omitempty"`
	VersionAcls          *uint64          `protobuf:"varint,7,opt,name=version_acls,json=versionAcls,def=0" json:"version_acls,omitempty"`
	VersionGroups        *uint64          `protobuf:"varint,8,opt,name=version_groups,json=versionGroups,def=0" json:"version_groups,omitempty"`
	LocalSegments        []*Segment       `protobuf:"bytes,10,rep,name=local_segments,json=localSegments" json:"local_segments,omitempty"`
	RemoteSegments       []*Segment       `protobuf:"bytes,11,rep,name=remote_segments,json=remoteSegments" json:"remote_segments,omitempty"`
	PlatformData         []byte           `protobuf:"bytes,12,opt,name=platform_data,json=platformData" json:"platform_data,omitempty"`
	FlowAcls             []byte           `protobuf:"bytes,13,opt,name=flow_acls,json=flowAcls" json:"flow_acls,omitempty"`
	Groups               []byte           `protobuf:"bytes,15,opt,name=groups" json:"groups,omitempty"`
	TapTypes             []*TapType       `protobuf:"bytes,16,rep,name=tap_types,json=tapTypes" json:"tap_types,omitempty"`
	PodIps               []*PodIp         `protobuf:"bytes,17,rep,name=pod_ips,json=podIps" json:"pod_ips,omitempty"`
	VtapIps              []*VtapIp        `protobuf:"bytes,18,rep,name=vtap_ips,json=vtapIps" json:"vtap_ips,omitempty"`
	SkipInterface        []*SkipInterface `protobuf:"bytes,19,rep,name=skip_interface,json=skipInterface" json:"skip_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SyncResponse) Reset()         { *m = SyncResponse{} }
func (m *SyncResponse) String() string { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()    {}
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{20}
}
func (m *SyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResponse.Merge(m, src)
}
func (m *SyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResponse proto.InternalMessageInfo

const Default_SyncResponse_VersionPlatformData uint64 = 0
const Default_SyncResponse_VersionAcls uint64 = 0
const Default_SyncResponse_VersionGroups uint64 = 0

func (m *SyncResponse) GetStatus() Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Status_SUCCESS
}

func (m *SyncResponse) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SyncResponse) GetRevision() string {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return ""
}

func (m *SyncResponse) GetSelfUpdateUrl() string {
	if m != nil && m.SelfUpdateUrl != nil {
		return *m.SelfUpdateUrl
	}
	return ""
}

func (m *SyncResponse) GetVersionPlatformData() uint64 {
	if m != nil && m.VersionPlatformData != nil {
		return *m.VersionPlatformData
	}
	return Default_SyncResponse_VersionPlatformData
}

func (m *SyncResponse) GetVersionAcls() uint64 {
	if m != nil && m.VersionAcls != nil {
		return *m.VersionAcls
	}
	return Default_SyncResponse_VersionAcls
}

func (m *SyncResponse) GetVersionGroups() uint64 {
	if m != nil && m.VersionGroups != nil {
		return *m.VersionGroups
	}
	return Default_SyncResponse_VersionGroups
}

func (m *SyncResponse) GetLocalSegments() []*Segment {
	if m != nil {
		return m.LocalSegments
	}
	return nil
}

func (m *SyncResponse) GetRemoteSegments() []*Segment {
	if m != nil {
		return m.RemoteSegments
	}
	return nil
}

func (m *SyncResponse) GetPlatformData() []byte {
	if m != nil {
		return m.PlatformData
	}
	return nil
}

func (m *SyncResponse) GetFlowAcls() []byte {
	if m != nil {
		return m.FlowAcls
	}
	return nil
}

func (m *SyncResponse) GetGroups() []byte {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *SyncResponse) GetTapTypes() []*TapType {
	if m != nil {
		return m.TapTypes
	}
	return nil
}

func (m *SyncResponse) GetPodIps() []*PodIp {
	if m != nil {
		return m.PodIps
	}
	return nil
}

func (m *SyncResponse) GetVtapIps() []*VtapIp {
	if m != nil {
		return m.VtapIps
	}
	return nil
}

func (m *SyncResponse) GetSkipInterface() []*SkipInterface {
	if m != nil {
		return m.SkipInterface
	}
	return nil
}

type UpgradeRequest struct {
	CtrlIp               *string  `protobuf:"bytes,1,opt,name=ctrl_ip,json=ctrlIp" json:"ctrl_ip,omitempty"`
	CtrlMac              *string  `protobuf:"bytes,3,opt,name=ctrl_mac,json=ctrlMac" json:"ctrl_mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeRequest) Reset()         { *m = UpgradeRequest{} }
func (m *UpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeRequest) ProtoMessage()    {}
func (*UpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{21}
}
func (m *UpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeRequest.Merge(m, src)
}
func (m *UpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeRequest proto.InternalMessageInfo

func (m *UpgradeRequest) GetCtrlIp() string {
	if m != nil && m.CtrlIp != nil {
		return *m.CtrlIp
	}
	return ""
}

func (m *UpgradeRequest) GetCtrlMac() string {
	if m != nil && m.CtrlMac != nil {
		return *m.CtrlMac
	}
	return ""
}

type UpgradeResponse struct {
	Status               *Status  `protobuf:"varint,1,opt,name=status,enum=trident.Status" json:"status,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Md5                  *string  `protobuf:"bytes,3,opt,name=md5" json:"md5,omitempty"`
	TotalLen             *uint64  `protobuf:"varint,4,opt,name=total_len,json=totalLen" json:"total_len,omitempty"`
	PktCount             *uint32  `protobuf:"varint,5,opt,name=pkt_count,json=pktCount" json:"pkt_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeResponse) Reset()         { *m = UpgradeResponse{} }
func (m *UpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*UpgradeResponse) ProtoMessage()    {}
func (*UpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{22}
}
func (m *UpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeResponse.Merge(m, src)
}
func (m *UpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeResponse proto.InternalMessageInfo

func (m *UpgradeResponse) GetStatus() Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Status_SUCCESS
}

func (m *UpgradeResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UpgradeResponse) GetMd5() string {
	if m != nil && m.Md5 != nil {
		return *m.Md5
	}
	return ""
}

func (m *UpgradeResponse) GetTotalLen() uint64 {
	if m != nil && m.TotalLen != nil {
		return *m.TotalLen
	}
	return 0
}

func (m *UpgradeResponse) GetPktCount() uint32 {
	if m != nil && m.PktCount != nil {
		return *m.PktCount
	}
	return 0
}

type NtpRequest struct {
	CtrlIp               *string  `protobuf:"bytes,1,opt,name=ctrl_ip,json=ctrlIp" json:"ctrl_ip,omitempty"`
	Request              []byte   `protobuf:"bytes,10,opt,name=request" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NtpRequest) Reset()         { *m = NtpRequest{} }
func (m *NtpRequest) String() string { return proto.CompactTextString(m) }
func (*NtpRequest) ProtoMessage()    {}
func (*NtpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{23}
}
func (m *NtpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NtpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NtpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NtpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NtpRequest.Merge(m, src)
}
func (m *NtpRequest) XXX_Size() int {
	return m.Size()
}
func (m *NtpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NtpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NtpRequest proto.InternalMessageInfo

func (m *NtpRequest) GetCtrlIp() string {
	if m != nil && m.CtrlIp != nil {
		return *m.CtrlIp
	}
	return ""
}

func (m *NtpRequest) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

type NtpResponse struct {
	Response             []byte   `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NtpResponse) Reset()         { *m = NtpResponse{} }
func (m *NtpResponse) String() string { return proto.CompactTextString(m) }
func (*NtpResponse) ProtoMessage()    {}
func (*NtpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{24}
}
func (m *NtpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NtpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NtpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NtpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NtpResponse.Merge(m, src)
}
func (m *NtpResponse) XXX_Size() int {
	return m.Size()
}
func (m *NtpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NtpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NtpResponse proto.InternalMessageInfo

func (m *NtpResponse) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

type GenesisPlatformData struct {
	Ips                  []*Ip            `protobuf:"bytes,7,rep,name=ips" json:"ips,omitempty"`
	PlatformEnabled      *bool            `protobuf:"varint,10,opt,name=platform_enabled,json=platformEnabled" json:"platform_enabled,omitempty"`
	RawHostname          *string          `protobuf:"bytes,11,opt,name=raw_hostname,json=rawHostname" json:"raw_hostname,omitempty"`
	RawAllVmXml          *string          `protobuf:"bytes,12,opt,name=raw_all_vm_xml,json=rawAllVmXml" json:"raw_all_vm_xml,omitempty"`
	RawVmStates          *string          `protobuf:"bytes,13,opt,name=raw_vm_states,json=rawVmStates" json:"raw_vm_states,omitempty"`
	RawOvsInterfaces     *string          `protobuf:"bytes,14,opt,name=raw_ovs_interfaces,json=rawOvsInterfaces" json:"raw_ovs_interfaces,omitempty"`
	RawOvsPorts          *string          `protobuf:"bytes,15,opt,name=raw_ovs_ports,json=rawOvsPorts" json:"raw_ovs_ports,omitempty"`
	RawBrctlShow         *string          `protobuf:"bytes,16,opt,name=raw_brctl_show,json=rawBrctlShow" json:"raw_brctl_show,omitempty"`
	RawVlanConfig        *string          `protobuf:"bytes,17,opt,name=raw_vlan_config,json=rawVlanConfig" json:"raw_vlan_config,omitempty"`
	LldpInfo             []*Lldp          `protobuf:"bytes,20,rep,name=lldp_info,json=lldpInfo" json:"lldp_info,omitempty"`
	RawIpAddrs           []string         `protobuf:"bytes,31,rep,name=raw_ip_addrs,json=rawIpAddrs" json:"raw_ip_addrs,omitempty"`
	Interfaces           []*InterfaceInfo `protobuf:"bytes,32,rep,name=interfaces" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GenesisPlatformData) Reset()         { *m = GenesisPlatformData{} }
func (m *GenesisPlatformData) String() string { return proto.CompactTextString(m) }
func (*GenesisPlatformData) ProtoMessage()    {}
func (*GenesisPlatformData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{25}
}
func (m *GenesisPlatformData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisPlatformData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisPlatformData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisPlatformData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisPlatformData.Merge(m, src)
}
func (m *GenesisPlatformData) XXX_Size() int {
	return m.Size()
}
func (m *GenesisPlatformData) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisPlatformData.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisPlatformData proto.InternalMessageInfo

func (m *GenesisPlatformData) GetIps() []*Ip {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *GenesisPlatformData) GetPlatformEnabled() bool {
	if m != nil && m.PlatformEnabled != nil {
		return *m.PlatformEnabled
	}
	return false
}

func (m *GenesisPlatformData) GetRawHostname() string {
	if m != nil && m.RawHostname != nil {
		return *m.RawHostname
	}
	return ""
}

func (m *GenesisPlatformData) GetRawAllVmXml() string {
	if m != nil && m.RawAllVmXml != nil {
		return *m.RawAllVmXml
	}
	return ""
}

func (m *GenesisPlatformData) GetRawVmStates() string {
	if m != nil && m.RawVmStates != nil {
		return *m.RawVmStates
	}
	return ""
}

func (m *GenesisPlatformData) GetRawOvsInterfaces() string {
	if m != nil && m.RawOvsInterfaces != nil {
		return *m.RawOvsInterfaces
	}
	return ""
}

func (m *GenesisPlatformData) GetRawOvsPorts() string {
	if m != nil && m.RawOvsPorts != nil {
		return *m.RawOvsPorts
	}
	return ""
}

func (m *GenesisPlatformData) GetRawBrctlShow() string {
	if m != nil && m.RawBrctlShow != nil {
		return *m.RawBrctlShow
	}
	return ""
}

func (m *GenesisPlatformData) GetRawVlanConfig() string {
	if m != nil && m.RawVlanConfig != nil {
		return *m.RawVlanConfig
	}
	return ""
}

func (m *GenesisPlatformData) GetLldpInfo() []*Lldp {
	if m != nil {
		return m.LldpInfo
	}
	return nil
}

func (m *GenesisPlatformData) GetRawIpAddrs() []string {
	if m != nil {
		return m.RawIpAddrs
	}
	return nil
}

func (m *GenesisPlatformData) GetInterfaces() []*InterfaceInfo {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type Ip struct {
	LastSeen             *uint32  `protobuf:"varint,2,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	Mac                  *uint64  `protobuf:"varint,3,opt,name=mac" json:"mac,omitempty"`
	Ip                   []byte   `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	PortUuid             *string  `protobuf:"bytes,9,opt,name=port_uuid,json=portUuid" json:"port_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ip) Reset()         { *m = Ip{} }
func (m *Ip) String() string { return proto.CompactTextString(m) }
func (*Ip) ProtoMessage()    {}
func (*Ip) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{26}
}
func (m *Ip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ip.Merge(m, src)
}
func (m *Ip) XXX_Size() int {
	return m.Size()
}
func (m *Ip) XXX_DiscardUnknown() {
	xxx_messageInfo_Ip.DiscardUnknown(m)
}

var xxx_messageInfo_Ip proto.InternalMessageInfo

func (m *Ip) GetLastSeen() uint32 {
	if m != nil && m.LastSeen != nil {
		return *m.LastSeen
	}
	return 0
}

func (m *Ip) GetMac() uint64 {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return 0
}

func (m *Ip) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Ip) GetPortUuid() string {
	if m != nil && m.PortUuid != nil {
		return *m.PortUuid
	}
	return ""
}

type Lldp struct {
	Interface            *string  `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
	SystemName           *string  `protobuf:"bytes,2,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
	ManagementAddress    *string  `protobuf:"bytes,5,opt,name=management_address,json=managementAddress" json:"management_address,omitempty"`
	PortId               *string  `protobuf:"bytes,10,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	PortDescription      *string  `protobuf:"bytes,11,opt,name=port_description,json=portDescription" json:"port_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lldp) Reset()         { *m = Lldp{} }
func (m *Lldp) String() string { return proto.CompactTextString(m) }
func (*Lldp) ProtoMessage()    {}
func (*Lldp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{27}
}
func (m *Lldp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lldp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lldp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lldp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lldp.Merge(m, src)
}
func (m *Lldp) XXX_Size() int {
	return m.Size()
}
func (m *Lldp) XXX_DiscardUnknown() {
	xxx_messageInfo_Lldp.DiscardUnknown(m)
}

var xxx_messageInfo_Lldp proto.InternalMessageInfo

func (m *Lldp) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

func (m *Lldp) GetSystemName() string {
	if m != nil && m.SystemName != nil {
		return *m.SystemName
	}
	return ""
}

func (m *Lldp) GetManagementAddress() string {
	if m != nil && m.ManagementAddress != nil {
		return *m.ManagementAddress
	}
	return ""
}

func (m *Lldp) GetPortId() string {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return ""
}

func (m *Lldp) GetPortDescription() string {
	if m != nil && m.PortDescription != nil {
		return *m.PortDescription
	}
	return ""
}

type InterfaceInfo struct {
	Mac *uint64 `protobuf:"varint,1,opt,name=mac" json:"mac,omitempty"`
	// ip/masklen
	Ip                   []string `protobuf:"bytes,2,rep,name=ip" json:"ip,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DeviceId             *string  `protobuf:"bytes,4,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	TapIndex             *uint32  `protobuf:"varint,5,opt,name=tap_index,json=tapIndex" json:"tap_index,omitempty"`
	DeviceName           *string  `protobuf:"bytes,6,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfaceInfo) Reset()         { *m = InterfaceInfo{} }
func (m *InterfaceInfo) String() string { return proto.CompactTextString(m) }
func (*InterfaceInfo) ProtoMessage()    {}
func (*InterfaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{28}
}
func (m *InterfaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceInfo.Merge(m, src)
}
func (m *InterfaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceInfo proto.InternalMessageInfo

func (m *InterfaceInfo) GetMac() uint64 {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return 0
}

func (m *InterfaceInfo) GetIp() []string {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *InterfaceInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterfaceInfo) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *InterfaceInfo) GetTapIndex() uint32 {
	if m != nil && m.TapIndex != nil {
		return *m.TapIndex
	}
	return 0
}

func (m *InterfaceInfo) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

type GenesisSyncRequest struct {
	Version              *uint64              `protobuf:"varint,1,opt,name=version,def=0" json:"version,omitempty"`
	TridentType          *common.TridentType  `protobuf:"varint,2,opt,name=trident_type,json=tridentType,enum=common.TridentType" json:"trident_type,omitempty"`
	SourceIp             *string              `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	VtapId               *uint32              `protobuf:"varint,4,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	KubernetesClusterId  *string              `protobuf:"bytes,5,opt,name=kubernetes_cluster_id,json=kubernetesClusterId" json:"kubernetes_cluster_id,omitempty"`
	NatIp                *string              `protobuf:"bytes,6,opt,name=nat_ip,json=natIp" json:"nat_ip,omitempty"`
	PlatformData         *GenesisPlatformData `protobuf:"bytes,9,opt,name=platform_data,json=platformData" json:"platform_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GenesisSyncRequest) Reset()         { *m = GenesisSyncRequest{} }
func (m *GenesisSyncRequest) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncRequest) ProtoMessage()    {}
func (*GenesisSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{29}
}
func (m *GenesisSyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncRequest.Merge(m, src)
}
func (m *GenesisSyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncRequest proto.InternalMessageInfo

const Default_GenesisSyncRequest_Version uint64 = 0

func (m *GenesisSyncRequest) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_GenesisSyncRequest_Version
}

func (m *GenesisSyncRequest) GetTridentType() common.TridentType {
	if m != nil && m.TridentType != nil {
		return *m.TridentType
	}
	return common.TridentType_TT_UNKNOWN
}

func (m *GenesisSyncRequest) GetSourceIp() string {
	if m != nil && m.SourceIp != nil {
		return *m.SourceIp
	}
	return ""
}

func (m *GenesisSyncRequest) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

func (m *GenesisSyncRequest) GetKubernetesClusterId() string {
	if m != nil && m.KubernetesClusterId != nil {
		return *m.KubernetesClusterId
	}
	return ""
}

func (m *GenesisSyncRequest) GetNatIp() string {
	if m != nil && m.NatIp != nil {
		return *m.NatIp
	}
	return ""
}

func (m *GenesisSyncRequest) GetPlatformData() *GenesisPlatformData {
	if m != nil {
		return m.PlatformData
	}
	return nil
}

type GenesisSyncResponse struct {
	Version              *uint64  `protobuf:"varint,1,opt,name=version,def=0" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSyncResponse) Reset()         { *m = GenesisSyncResponse{} }
func (m *GenesisSyncResponse) String() string { return proto.CompactTextString(m) }
func (*GenesisSyncResponse) ProtoMessage()    {}
func (*GenesisSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{30}
}
func (m *GenesisSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSyncResponse.Merge(m, src)
}
func (m *GenesisSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSyncResponse proto.InternalMessageInfo

const Default_GenesisSyncResponse_Version uint64 = 0

func (m *GenesisSyncResponse) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_GenesisSyncResponse_Version
}

type KubernetesAPISyncRequest struct {
	ClusterId            *string                     `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	Version              *uint64                     `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	ErrorMsg             *string                     `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	VtapId               *uint32                     `protobuf:"varint,4,opt,name=vtap_id,json=vtapId" json:"vtap_id,omitempty"`
	SourceIp             *string                     `protobuf:"bytes,5,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	Entries              []*common.KubernetesAPIInfo `protobuf:"bytes,10,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *KubernetesAPISyncRequest) Reset()         { *m = KubernetesAPISyncRequest{} }
func (m *KubernetesAPISyncRequest) String() string { return proto.CompactTextString(m) }
func (*KubernetesAPISyncRequest) ProtoMessage()    {}
func (*KubernetesAPISyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{31}
}
func (m *KubernetesAPISyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesAPISyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesAPISyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesAPISyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesAPISyncRequest.Merge(m, src)
}
func (m *KubernetesAPISyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesAPISyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesAPISyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesAPISyncRequest proto.InternalMessageInfo

func (m *KubernetesAPISyncRequest) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

func (m *KubernetesAPISyncRequest) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *KubernetesAPISyncRequest) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

func (m *KubernetesAPISyncRequest) GetVtapId() uint32 {
	if m != nil && m.VtapId != nil {
		return *m.VtapId
	}
	return 0
}

func (m *KubernetesAPISyncRequest) GetSourceIp() string {
	if m != nil && m.SourceIp != nil {
		return *m.SourceIp
	}
	return ""
}

func (m *KubernetesAPISyncRequest) GetEntries() []*common.KubernetesAPIInfo {
	if m != nil {
		return m.Entries
	}
	return nil
}

type KubernetesAPISyncResponse struct {
	Version              *uint64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesAPISyncResponse) Reset()         { *m = KubernetesAPISyncResponse{} }
func (m *KubernetesAPISyncResponse) String() string { return proto.CompactTextString(m) }
func (*KubernetesAPISyncResponse) ProtoMessage()    {}
func (*KubernetesAPISyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{32}
}
func (m *KubernetesAPISyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesAPISyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesAPISyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesAPISyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesAPISyncResponse.Merge(m, src)
}
func (m *KubernetesAPISyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesAPISyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesAPISyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesAPISyncResponse proto.InternalMessageInfo

func (m *KubernetesAPISyncResponse) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type KubernetesClusterIDRequest struct {
	CaMd5                *string  `protobuf:"bytes,1,opt,name=ca_md5,json=caMd5" json:"ca_md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesClusterIDRequest) Reset()         { *m = KubernetesClusterIDRequest{} }
func (m *KubernetesClusterIDRequest) String() string { return proto.CompactTextString(m) }
func (*KubernetesClusterIDRequest) ProtoMessage()    {}
func (*KubernetesClusterIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{33}
}
func (m *KubernetesClusterIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesClusterIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesClusterIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesClusterIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesClusterIDRequest.Merge(m, src)
}
func (m *KubernetesClusterIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesClusterIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesClusterIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesClusterIDRequest proto.InternalMessageInfo

func (m *KubernetesClusterIDRequest) GetCaMd5() string {
	if m != nil && m.CaMd5 != nil {
		return *m.CaMd5
	}
	return ""
}

type KubernetesClusterIDResponse struct {
	ErrorMsg             *string  `protobuf:"bytes,1,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	ClusterId            *string  `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesClusterIDResponse) Reset()         { *m = KubernetesClusterIDResponse{} }
func (m *KubernetesClusterIDResponse) String() string { return proto.CompactTextString(m) }
func (*KubernetesClusterIDResponse) ProtoMessage()    {}
func (*KubernetesClusterIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfcd7d3a0c01b85, []int{34}
}
func (m *KubernetesClusterIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesClusterIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesClusterIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesClusterIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesClusterIDResponse.Merge(m, src)
}
func (m *KubernetesClusterIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesClusterIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesClusterIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesClusterIDResponse proto.InternalMessageInfo

func (m *KubernetesClusterIDResponse) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

func (m *KubernetesClusterIDResponse) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

func init() {
	proto.RegisterEnum("trident.State", State_name, State_value)
	proto.RegisterEnum("trident.Exception", Exception_name, Exception_value)
	proto.RegisterEnum("trident.Status", Status_name, Status_value)
	proto.RegisterEnum("trident.TapMode", TapMode_name, TapMode_value)
	proto.RegisterEnum("trident.IfMacSource", IfMacSource_name, IfMacSource_value)
	proto.RegisterEnum("trident.SocketType", SocketType_name, SocketType_value)
	proto.RegisterEnum("trident.PacketType", PacketType_name, PacketType_value)
	proto.RegisterEnum("trident.CaptureSocketType", CaptureSocketType_name, CaptureSocketType_value)
	proto.RegisterEnum("trident.VlanMode", VlanMode_name, VlanMode_value)
	proto.RegisterEnum("trident.DecapType", DecapType_name, DecapType_value)
	proto.RegisterEnum("trident.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("trident.GroupType", GroupType_name, GroupType_value)
	proto.RegisterEnum("trident.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("trident.CidrType", CidrType_name, CidrType_value)
	proto.RegisterEnum("trident.Action", Action_name, Action_value)
	proto.RegisterEnum("trident.TapSide", TapSide_name, TapSide_value)
	proto.RegisterEnum("trident.TunnelType", TunnelType_name, TunnelType_value)
	proto.RegisterType((*CommunicationVtap)(nil), "trident.CommunicationVtap")
	proto.RegisterType((*TsdbReportInfo)(nil), "trident.TsdbReportInfo")
	proto.RegisterType((*SyncRequest)(nil), "trident.SyncRequest")
	proto.RegisterType((*TapType)(nil), "trident.TapType")
	proto.RegisterType((*Config)(nil), "trident.Config")
	proto.RegisterType((*Segment)(nil), "trident.Segment")
	proto.RegisterType((*IpResource)(nil), "trident.IpResource")
	proto.RegisterType((*Interface)(nil), "trident.Interface")
	proto.RegisterType((*Group)(nil), "trident.Group")
	proto.RegisterType((*Service)(nil), "trident.Service")
	proto.RegisterType((*Groups)(nil), "trident.Groups")
	proto.RegisterType((*PeerConnection)(nil), "trident.PeerConnection")
	proto.RegisterType((*Cidr)(nil), "trident.Cidr")
	proto.RegisterType((*PlatformData)(nil), "trident.PlatformData")
	proto.RegisterType((*NpbAction)(nil), "trident.NpbAction")
	proto.RegisterType((*FlowAcl)(nil), "trident.FlowAcl")
	proto.RegisterType((*FlowAcls)(nil), "trident.FlowAcls")
	proto.RegisterType((*PodIp)(nil), "trident.PodIp")
	proto.RegisterType((*VtapIp)(nil), "trident.VtapIp")
	proto.RegisterType((*SkipInterface)(nil), "trident.SkipInterface")
	proto.RegisterType((*SyncResponse)(nil), "trident.SyncResponse")
	proto.RegisterType((*UpgradeRequest)(nil), "trident.UpgradeRequest")
	proto.RegisterType((*UpgradeResponse)(nil), "trident.UpgradeResponse")
	proto.RegisterType((*NtpRequest)(nil), "trident.NtpRequest")
	proto.RegisterType((*NtpResponse)(nil), "trident.NtpResponse")
	proto.RegisterType((*GenesisPlatformData)(nil), "trident.GenesisPlatformData")
	proto.RegisterType((*Ip)(nil), "trident.Ip")
	proto.RegisterType((*Lldp)(nil), "trident.Lldp")
	proto.RegisterType((*InterfaceInfo)(nil), "trident.InterfaceInfo")
	proto.RegisterType((*GenesisSyncRequest)(nil), "trident.GenesisSyncRequest")
	proto.RegisterType((*GenesisSyncResponse)(nil), "trident.GenesisSyncResponse")
	proto.RegisterType((*KubernetesAPISyncRequest)(nil), "trident.KubernetesAPISyncRequest")
	proto.RegisterType((*KubernetesAPISyncResponse)(nil), "trident.KubernetesAPISyncResponse")
	proto.RegisterType((*KubernetesClusterIDRequest)(nil), "trident.KubernetesClusterIDRequest")
	proto.RegisterType((*KubernetesClusterIDResponse)(nil), "trident.KubernetesClusterIDResponse")
}

func init() { proto.RegisterFile("trident.proto", fileDescriptor_6bfcd7d3a0c01b85) }

var fileDescriptor_6bfcd7d3a0c01b85 = []byte{
	// 5559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x3b, 0x4b, 0x70, 0xdb, 0x48,
	0x76, 0xe6, 0x4f, 0x24, 0x1f, 0x3f, 0x82, 0x5a, 0x1f, 0xc3, 0xb2, 0xc7, 0x96, 0x39, 0x9e, 0x19,
	0x8d, 0x76, 0x6d, 0xcb, 0x92, 0x65, 0xcf, 0x78, 0x76, 0x6b, 0x97, 0x22, 0x29, 0x1b, 0x6b, 0x8a,
	0xe4, 0x36, 0x29, 0xd9, 0xde, 0xcd, 0x06, 0x81, 0x80, 0x96, 0x84, 0x32, 0x08, 0x60, 0x01, 0x50,
	0x96, 0xa7, 0xe6, 0xe0, 0x53, 0x0e, 0xb9, 0x26, 0xd9, 0xa4, 0x72, 0xda, 0xd3, 0x56, 0xa5, 0x52,
	0x9b, 0xef, 0x25, 0x87, 0x1c, 0x53, 0xa9, 0xa4, 0x92, 0xc3, 0xde, 0x73, 0x49, 0x6d, 0xaa, 0x72,
	0xcf, 0x21, 0x49, 0xe5, 0x92, 0x4a, 0xbd, 0x6e, 0xfc, 0x48, 0xd9, 0xce, 0x4c, 0x74, 0xa0, 0x81,
	0xf7, 0x5e, 0xbf, 0x7e, 0xfd, 0xfa, 0xfd, 0xfa, 0x35, 0x0c, 0xb5, 0xc0, 0x33, 0x0d, 0x66, 0x07,
	0x77, 0x5c, 0xcf, 0x09, 0x1c, 0x52, 0x0c, 0x5f, 0x57, 0xab, 0xba, 0x33, 0x1e, 0x3b, 0xb6, 0x00,
	0x37, 0x0e, 0x61, 0xa1, 0xe5, 0x8c, 0xc7, 0x13, 0xdb, 0xd4, 0xb5, 0xc0, 0x74, 0xec, 0xc3, 0x40,
	0x73, 0xc9, 0x65, 0x28, 0x9e, 0x05, 0x9a, 0xab, 0x9a, 0x86, 0x9c, 0x59, 0xcb, 0xac, 0xd7, 0xe8,
	0x1c, 0xbe, 0x2a, 0x06, 0x59, 0x07, 0xc9, 0xd2, 0xfc, 0x40, 0xd5, 0xf4, 0xc0, 0x3c, 0x63, 0x6a,
	0x60, 0x8e, 0x99, 0x9c, 0xe5, 0x14, 0x75, 0x84, 0x37, 0x39, 0x78, 0x64, 0x8e, 0x59, 0xa3, 0x09,
	0xf5, 0x91, 0x6f, 0x1c, 0x51, 0xe6, 0x3a, 0x5e, 0xa0, 0xd8, 0xc7, 0x0e, 0xb9, 0x0b, 0x4b, 0xae,
	0xae, 0xb9, 0xaa, 0xa1, 0x05, 0x9a, 0x3a, 0x76, 0x26, 0x76, 0xa0, 0xba, 0x5a, 0x70, 0x2a, 0xe7,
	0xd7, 0x32, 0xeb, 0x65, 0xba, 0x80, 0xb8, 0xb6, 0x16, 0x68, 0xfb, 0x88, 0x19, 0x68, 0xc1, 0x69,
	0xe3, 0xbf, 0xe7, 0xa0, 0x32, 0x7c, 0x6d, 0xeb, 0x94, 0xfd, 0x74, 0xc2, 0xfc, 0x80, 0x5c, 0x85,
	0xf2, 0x91, 0xe3, 0x04, 0x62, 0x56, 0x21, 0x57, 0x09, 0x01, 0x38, 0x1f, 0xb9, 0x0d, 0xf3, 0xba,
	0x63, 0x1f, 0x9b, 0x27, 0xaa, 0xa6, 0xeb, 0xcc, 0x0d, 0x98, 0xc1, 0x05, 0x2b, 0x3d, 0xca, 0x07,
	0xde, 0x84, 0xd1, 0xba, 0x40, 0x36, 0x43, 0x1c, 0xb9, 0x05, 0x05, 0x3f, 0xd0, 0x02, 0xc6, 0x67,
	0xaf, 0x6f, 0xd5, 0xef, 0x44, 0xca, 0x1a, 0x22, 0x94, 0x0a, 0x24, 0x59, 0x85, 0x92, 0xc7, 0xce,
	0x4c, 0xdf, 0x74, 0x6c, 0xb9, 0xc0, 0xc5, 0x8c, 0xdf, 0xc9, 0x0d, 0x28, 0xb3, 0x73, 0xe4, 0x86,
	0xc8, 0xb9, 0xb5, 0xcc, 0x7a, 0xfe, 0x51, 0x66, 0x93, 0x26, 0x30, 0x72, 0x13, 0xaa, 0xae, 0xe7,
	0xe8, 0xcc, 0xf7, 0x55, 0x5b, 0x1b, 0x33, 0xb9, 0xc8, 0x19, 0x54, 0x42, 0x58, 0x4f, 0x1b, 0x33,
	0xb2, 0x05, 0x25, 0x54, 0xf3, 0xd8, 0x31, 0x98, 0x5c, 0xe2, 0x82, 0x48, 0xb1, 0x20, 0x23, 0xcd,
	0xdd, 0x77, 0x0c, 0xf6, 0xa8, 0xd0, 0xed, 0xb7, 0x9a, 0x5d, 0x5a, 0x0c, 0xc4, 0x3b, 0xd9, 0x81,
	0xe5, 0x33, 0xe6, 0xa1, 0x08, 0xaa, 0x6b, 0x69, 0xc1, 0xb1, 0xe3, 0x8d, 0xb9, 0x4a, 0xe5, 0x72,
	0x24, 0xc3, 0x62, 0x88, 0x1f, 0x84, 0x68, 0xd4, 0x2a, 0xb9, 0x05, 0xd5, 0x68, 0x98, 0xa6, 0x5b,
	0xbe, 0x0c, 0x11, 0x75, 0x25, 0x04, 0x37, 0x75, 0xcb, 0x27, 0xeb, 0x50, 0x8f, 0xa8, 0x4e, 0x3c,
	0x67, 0xe2, 0xfa, 0x72, 0x25, 0xa2, 0xab, 0x85, 0x88, 0xc7, 0x1c, 0x8e, 0x26, 0xa2, 0x07, 0x9e,
	0xa5, 0x9a, 0xae, 0xbc, 0xcc, 0x17, 0x36, 0x87, 0xaf, 0x8a, 0x4b, 0x08, 0xe4, 0x4f, 0x1d, 0x3f,
	0x90, 0x57, 0x38, 0x94, 0x3f, 0x93, 0x2b, 0x50, 0xc2, 0x7f, 0x55, 0xd3, 0xf5, 0xe5, 0xcb, 0x6b,
	0xb9, 0xf5, 0x32, 0x2d, 0xe2, 0xbb, 0xe2, 0xfa, 0x88, 0xe2, 0x7c, 0xc6, 0x9a, 0x2e, 0x5f, 0xe1,
	0x43, 0x38, 0xdf, 0x7d, 0x4d, 0x27, 0xf7, 0x60, 0x99, 0x5b, 0x21, 0x97, 0x44, 0x35, 0x0d, 0xd5,
	0x13, 0x86, 0x20, 0xaf, 0x72, 0x3a, 0x82, 0x48, 0x2e, 0x8d, 0x62, 0x44, 0x26, 0xf2, 0x14, 0x16,
	0xf5, 0xb4, 0x35, 0xab, 0x48, 0xe3, 0xcb, 0x37, 0xd6, 0x72, 0xeb, 0x95, 0xad, 0xd5, 0x58, 0xb7,
	0x17, 0x2c, 0x9e, 0x12, 0x7d, 0x16, 0x24, 0x96, 0xe8, 0x4e, 0x54, 0x7b, 0x32, 0x96, 0xd7, 0x84,
	0x17, 0xe8, 0xee, 0xa4, 0x37, 0x19, 0x93, 0x1b, 0x50, 0x19, 0xb3, 0xb1, 0xe3, 0xbd, 0x56, 0x7d,
	0xf3, 0x4b, 0x26, 0xdf, 0x44, 0x15, 0x51, 0x10, 0xa0, 0xa1, 0xf9, 0x25, 0x43, 0x1d, 0x68, 0x9e,
	0x7e, 0x2a, 0x37, 0x84, 0x0e, 0xf0, 0x99, 0xd4, 0x21, 0xeb, 0xf8, 0xf2, 0x87, 0x1c, 0x92, 0x75,
	0x7c, 0xf2, 0x11, 0xd4, 0x5f, 0x32, 0xcf, 0x66, 0x96, 0x1a, 0x2a, 0x56, 0xbe, 0xc5, 0x71, 0x35,
	0x01, 0x3d, 0x14, 0x40, 0xd2, 0x04, 0x29, 0xf0, 0x8d, 0x23, 0xd5, 0xe3, 0x8e, 0xa4, 0x9a, 0xf6,
	0xb1, 0x23, 0x7f, 0x6b, 0x2d, 0xb3, 0x5e, 0xd9, 0xba, 0x9c, 0x98, 0xca, 0x94, 0xa3, 0xd1, 0x7a,
	0x30, 0xed, 0x78, 0x5b, 0xb0, 0xfc, 0x72, 0x72, 0x84, 0x5c, 0x03, 0xe6, 0xab, 0xba, 0x35, 0xf1,
	0x03, 0xe6, 0xa1, 0x6f, 0xdf, 0xe6, 0x13, 0x2e, 0x26, 0xc8, 0x96, 0xc0, 0x29, 0x46, 0xe3, 0x17,
	0x19, 0x28, 0x8e, 0x34, 0x77, 0xf4, 0xda, 0x65, 0xb8, 0x45, 0xb8, 0x0d, 0xc1, 0x6b, 0x37, 0x72,
	0x3b, 0x34, 0x46, 0x8e, 0xba, 0x0f, 0x15, 0x57, 0xd3, 0x5f, 0xb2, 0x40, 0x60, 0xb3, 0xdc, 0x86,
	0x17, 0x63, 0xc1, 0x06, 0x1c, 0x87, 0x94, 0x14, 0xdc, 0xf8, 0x19, 0xd5, 0x73, 0x66, 0x69, 0xb6,
	0x9c, 0xe3, 0xcc, 0xf8, 0x33, 0x3a, 0xb7, 0xef, 0x4c, 0x3c, 0x9d, 0xa1, 0x45, 0x89, 0x90, 0x50,
	0x12, 0x00, 0xc5, 0x8d, 0x24, 0xc0, 0x15, 0x71, 0x3f, 0x14, 0x12, 0x0c, 0x1c, 0x2f, 0x68, 0xfc,
	0xec, 0x1a, 0xcc, 0xb5, 0xb8, 0x6f, 0x93, 0xeb, 0x50, 0x64, 0xb6, 0x76, 0x64, 0x31, 0x11, 0xb5,
	0x22, 0xd7, 0x8f, 0x80, 0xe4, 0x1a, 0x94, 0xc6, 0xda, 0xb9, 0xaa, 0xbb, 0x13, 0x5f, 0x04, 0xad,
	0x47, 0x99, 0x7b, 0xb4, 0x38, 0xd6, 0xce, 0x5b, 0xee, 0xc4, 0x27, 0x0d, 0x00, 0xc4, 0x8a, 0x5d,
	0x14, 0xa2, 0x3d, 0xca, 0x3d, 0x7c, 0xf0, 0x19, 0x2d, 0x8f, 0xb5, 0xf3, 0x7d, 0x0e, 0x25, 0x9f,
	0x40, 0xcd, 0x7f, 0x6d, 0xeb, 0xaa, 0x69, 0x07, 0xcc, 0x3b, 0xd3, 0x2c, 0x2e, 0x68, 0xed, 0x51,
	0xf6, 0xc1, 0x26, 0xad, 0x22, 0x42, 0x09, 0xe1, 0xe4, 0x53, 0xa8, 0x63, 0x04, 0xf1, 0x13, 0xca,
	0x42, 0x4c, 0x59, 0xe3, 0x98, 0x98, 0xf4, 0x33, 0x58, 0x3a, 0xb1, 0x9c, 0x23, 0xcd, 0x52, 0x5d,
	0xd7, 0x57, 0x83, 0x53, 0x8f, 0xf9, 0xa7, 0x8e, 0x65, 0x84, 0x21, 0x65, 0x6e, 0x6b, 0x13, 0xff,
	0x28, 0x11, 0x34, 0x03, 0xd7, 0x1f, 0x45, 0x14, 0x64, 0x0c, 0x8b, 0x3c, 0x48, 0x23, 0xa7, 0x63,
	0x4d, 0x67, 0xaa, 0xc7, 0x4e, 0xd8, 0x39, 0x0f, 0x24, 0xe5, 0x47, 0xdf, 0xfd, 0xcd, 0xf5, 0x40,
	0x73, 0xef, 0x6c, 0x7c, 0xa5, 0x6b, 0x96, 0x79, 0x67, 0xe3, 0xab, 0x33, 0x16, 0x9c, 0xde, 0xd9,
	0xf8, 0x2a, 0xfc, 0xb5, 0x7f, 0xec, 0xf8, 0xee, 0xf9, 0x4f, 0xee, 0x6c, 0x7c, 0x65, 0x9d, 0xeb,
	0xf8, 0xeb, 0x7c, 0xf5, 0xe3, 0xcd, 0xdb, 0x9f, 0x6b, 0xb7, 0x8f, 0x7f, 0xf2, 0x2d, 0xf5, 0xf4,
	0xd3, 0x5b, 0x74, 0x01, 0xe3, 0x7d, 0xc4, 0x98, 0x22, 0xdf, 0xd8, 0xb1, 0xcb, 0x29, 0xc7, 0xbe,
	0x0d, 0xf3, 0x9e, 0xff, 0xda, 0xb7, 0x9c, 0x13, 0x35, 0x52, 0x3d, 0xa4, 0xa3, 0x6e, 0x88, 0xec,
	0x84, 0x3b, 0xd0, 0x80, 0x8a, 0x33, 0x09, 0xdc, 0x49, 0xa0, 0xf2, 0xfd, 0xaf, 0x88, 0x4d, 0xd8,
	0xa4, 0x20, 0xa0, 0x87, 0x68, 0x08, 0x2b, 0x90, 0x1b, 0x07, 0x13, 0xb9, 0xca, 0x71, 0xf9, 0x7b,
	0x3b, 0x9b, 0x9b, 0x14, 0x01, 0xe4, 0x01, 0x2c, 0xd8, 0xee, 0x91, 0x7a, 0x34, 0xa5, 0xa4, 0x1a,
	0x57, 0x12, 0xdc, 0xdb, 0x8c, 0xfe, 0xe8, 0xbc, 0xed, 0x1e, 0xed, 0xa6, 0xb5, 0xb4, 0x05, 0x0b,
	0xba, 0x63, 0x59, 0x4c, 0x0f, 0x1c, 0x2f, 0x16, 0xb2, 0xce, 0x85, 0x2c, 0x1c, 0x6b, 0x96, 0xcf,
	0xa8, 0x14, 0xe3, 0x23, 0x39, 0x3f, 0x83, 0xe5, 0xd0, 0xac, 0x4f, 0x99, 0x66, 0xb0, 0x64, 0xdc,
	0x7c, 0x6a, 0x71, 0x8b, 0x82, 0xe4, 0x09, 0xa7, 0x88, 0x46, 0x6e, 0x82, 0x14, 0x47, 0xe5, 0x68,
	0x90, 0x94, 0x9e, 0x6c, 0x3e, 0x42, 0x47, 0x23, 0xbe, 0x80, 0x95, 0x94, 0x77, 0x6a, 0xae, 0x19,
	0x8f, 0x5b, 0x48, 0x8f, 0x5b, 0x4a, 0x88, 0x9a, 0xae, 0x19, 0x0d, 0x6e, 0xc3, 0x07, 0x3e, 0xf3,
	0xce, 0x98, 0xa7, 0x06, 0xe7, 0xea, 0x91, 0x66, 0x1b, 0xaf, 0x4c, 0x23, 0x38, 0x4d, 0x29, 0x88,
	0x44, 0xe1, 0x7b, 0x55, 0xd0, 0x8d, 0xce, 0x77, 0x23, 0xaa, 0x44, 0x45, 0xdf, 0x01, 0x39, 0x19,
	0xeb, 0x7a, 0xce, 0x11, 0x4b, 0xec, 0x76, 0x91, 0x33, 0xc8, 0xde, 0xdb, 0xa4, 0x2b, 0x31, 0xcd,
	0x00, 0x49, 0x62, 0x03, 0x1e, 0xc0, 0xa2, 0xae, 0xb9, 0xc1, 0xc4, 0x63, 0xaa, 0xef, 0x24, 0xb1,
	0x60, 0x99, 0xc7, 0x82, 0x54, 0xcc, 0x15, 0x34, 0x43, 0x27, 0x0a, 0x03, 0x8f, 0xf2, 0xcd, 0x83,
	0x51, 0x9f, 0x2e, 0xe8, 0xb3, 0x08, 0xf2, 0x05, 0xd4, 0x70, 0xab, 0xd1, 0x46, 0x44, 0x6e, 0x5c,
	0xe1, 0xbc, 0x16, 0x62, 0x5e, 0x68, 0x28, 0x3c, 0x39, 0xe6, 0x7b, 0xfd, 0x5e, 0x87, 0x56, 0x6c,
	0xf7, 0x28, 0x02, 0x91, 0x4f, 0x40, 0xb2, 0xee, 0xab, 0x68, 0x91, 0x51, 0xd0, 0x12, 0x39, 0xa7,
	0x46, 0x6b, 0xd6, 0xfd, 0xae, 0x73, 0x12, 0x46, 0x35, 0x9f, 0x6c, 0x0a, 0x83, 0x32, 0x98, 0x31,
	0x71, 0x63, 0x9d, 0xcb, 0xa9, 0x0d, 0x46, 0x53, 0x6a, 0x23, 0x36, 0xd2, 0xf6, 0xf7, 0xa1, 0x66,
	0x1e, 0x63, 0xa6, 0x52, 0x45, 0x64, 0xe2, 0x09, 0xab, 0xbe, 0xb5, 0x14, 0xcb, 0xa5, 0x1c, 0xef,
	0x6b, 0xfa, 0x90, 0xe3, 0x1e, 0xcd, 0x29, 0x7b, 0xea, 0x7e, 0xb3, 0x45, 0x2b, 0x66, 0x02, 0x24,
	0x3b, 0xb0, 0xc4, 0x53, 0xda, 0xb1, 0xe5, 0xbc, 0x52, 0xef, 0xf9, 0xf1, 0xb4, 0x57, 0x53, 0xd3,
	0x2e, 0x20, 0xc5, 0x9e, 0xe5, 0xbc, 0xba, 0xe7, 0x47, 0x13, 0x7f, 0x0a, 0x35, 0x83, 0x1d, 0x4d,
	0x12, 0x27, 0xbb, 0x96, 0xa2, 0xaf, 0x72, 0x54, 0x44, 0x7a, 0x03, 0x2a, 0x9a, 0xad, 0x59, 0xaf,
	0xbf, 0xc4, 0x10, 0xef, 0xca, 0x37, 0xb8, 0xb3, 0x42, 0x04, 0x52, 0x5c, 0xb2, 0x05, 0x04, 0xe3,
	0x1c, 0xf3, 0x75, 0xcd, 0x65, 0xaa, 0xcf, 0x74, 0xc7, 0x36, 0x7c, 0x91, 0xe0, 0x1e, 0xe5, 0xb7,
	0x1f, 0x6c, 0x6e, 0x52, 0x69, 0xac, 0x9d, 0x77, 0x38, 0x7a, 0x28, 0xb0, 0xe4, 0x0e, 0x2c, 0xba,
	0x9e, 0x73, 0xfe, 0x5a, 0xd5, 0x1d, 0x3b, 0xf0, 0xd0, 0x5b, 0x38, 0xf3, 0x46, 0x58, 0xb9, 0x21,
	0xaa, 0x15, 0x63, 0x14, 0x97, 0x5c, 0x87, 0xb2, 0xc7, 0x4e, 0x30, 0xff, 0x9a, 0x06, 0x4f, 0x79,
	0xdc, 0xcb, 0x4b, 0x02, 0xa6, 0x18, 0xe4, 0x13, 0xa8, 0xbb, 0x8e, 0x91, 0x4e, 0x45, 0xb7, 0x22,
	0xa2, 0xaa, 0xeb, 0x18, 0x71, 0x1a, 0x22, 0x32, 0xcc, 0x31, 0x57, 0x47, 0x82, 0x8f, 0x22, 0x82,
	0x02, 0x73, 0x75, 0xc5, 0x20, 0x1b, 0x50, 0x8b, 0xd7, 0xc9, 0xf3, 0xc2, 0xc7, 0x9c, 0xa0, 0xb0,
	0xbd, 0xb9, 0xb9, 0xbd, 0x4d, 0xab, 0x11, 0x0e, 0x73, 0x04, 0xf9, 0x1c, 0x96, 0x2f, 0x88, 0xcf,
	0xc7, 0x7c, 0x92, 0x8c, 0xd9, 0xa1, 0x8b, 0x33, 0xeb, 0xe0, 0x43, 0x53, 0x95, 0xf0, 0xfa, 0x54,
	0x25, 0xbc, 0x0b, 0xd5, 0x70, 0xd7, 0x85, 0xb9, 0x7f, 0x1a, 0xa6, 0xbe, 0xb0, 0xb8, 0x1e, 0x09,
	0x1c, 0xb7, 0x73, 0x18, 0x8d, 0xd4, 0x83, 0xde, 0xd3, 0x5e, 0xff, 0x59, 0x8f, 0x56, 0x82, 0x04,
	0x41, 0xba, 0xb0, 0x9c, 0x84, 0xa6, 0xb4, 0xef, 0xdc, 0x9e, 0xc9, 0xa3, 0x29, 0xa7, 0xc9, 0x8d,
	0x5a, 0x03, 0xba, 0x18, 0x0f, 0x4b, 0x79, 0x0d, 0x85, 0x15, 0xdd, 0x19, 0xbb, 0x1e, 0xf3, 0xfd,
	0x19, 0x76, 0x77, 0xde, 0xcd, 0xae, 0x48, 0x9b, 0xcf, 0xd4, 0x83, 0xf6, 0x80, 0x2e, 0x25, 0x63,
	0x53, 0x3c, 0xdb, 0x80, 0x4e, 0x30, 0xc5, 0xec, 0xee, 0xd7, 0x60, 0x86, 0xee, 0x9b, 0xe2, 0x72,
	0x0f, 0x16, 0x93, 0xca, 0xdf, 0x63, 0x01, 0xb3, 0x79, 0xd1, 0xbc, 0x2d, 0xb6, 0xf4, 0x61, 0x52,
	0xfb, 0xd3, 0x08, 0x47, 0x76, 0x92, 0xa0, 0x12, 0x46, 0x62, 0x5e, 0x6a, 0xdd, 0x17, 0x1b, 0xf6,
	0x60, 0x67, 0x67, 0x7b, 0x27, 0x8e, 0x1c, 0xa2, 0xca, 0xe0, 0x85, 0x57, 0x07, 0xae, 0x99, 0x76,
	0x78, 0x38, 0x09, 0x03, 0x23, 0x2f, 0x9b, 0x22, 0xbf, 0xd9, 0x49, 0xf9, 0xcd, 0x95, 0x88, 0x72,
	0xc8, 0x09, 0x71, 0xbb, 0x23, 0x27, 0xba, 0x09, 0x95, 0x68, 0xf6, 0x23, 0xf7, 0x58, 0x7e, 0xc0,
	0x33, 0xea, 0x25, 0x0a, 0x21, 0x70, 0xd7, 0x3d, 0x26, 0xf7, 0x61, 0x31, 0x9e, 0xc9, 0x4c, 0xe2,
	0xc7, 0xc3, 0xb4, 0x23, 0x47, 0x04, 0x8a, 0x9b, 0x04, 0x7b, 0xc9, 0x32, 0x8f, 0xce, 0x4c, 0x2f,
	0x50, 0xcf, 0xc7, 0x96, 0x38, 0xff, 0x7c, 0x87, 0x73, 0x5f, 0xb8, 0xcb, 0x02, 0xfd, 0x6e, 0x88,
	0xbc, 0xfb, 0x53, 0x36, 0x9e, 0xd0, 0x7a, 0xf8, 0xf6, 0x7c, 0x6c, 0xe1, 0x79, 0x88, 0xac, 0x43,
	0x8d, 0x87, 0xb5, 0x38, 0xb8, 0x33, 0x51, 0xa4, 0x6c, 0x6f, 0x6e, 0xd2, 0xaa, 0xe5, 0x9c, 0x24,
	0x01, 0xfd, 0x26, 0x94, 0x91, 0xd2, 0x62, 0x67, 0xcc, 0x92, 0x8f, 0x39, 0xff, 0xbc, 0xd2, 0xdb,
	0xeb, 0xd3, 0x92, 0xe5, 0x9c, 0x74, 0x11, 0x4a, 0xee, 0x80, 0x84, 0x8c, 0x34, 0x23, 0xc5, 0xef,
	0x44, 0xf0, 0xc3, 0x94, 0x3b, 0x2f, 0x90, 0x09, 0xcb, 0xbb, 0xb0, 0x10, 0x9d, 0x66, 0x92, 0x01,
	0xa7, 0xa2, 0xa8, 0xb9, 0xb7, 0x49, 0xa5, 0x10, 0x99, 0x0c, 0x08, 0xa5, 0x4d, 0xb6, 0xfb, 0x1f,
	0x32, 0x82, 0x7a, 0x5b, 0x48, 0x9b, 0xec, 0xf5, 0xc7, 0x50, 0xb1, 0x83, 0x44, 0x85, 0xff, 0x98,
	0x2e, 0xde, 0xc0, 0x0e, 0x62, 0xe5, 0x6d, 0x01, 0x18, 0x4c, 0x8f, 0x2a, 0xd1, 0x7f, 0xca, 0xac,
	0xe5, 0xd6, 0xeb, 0x5b, 0x24, 0x36, 0xc4, 0x36, 0xe2, 0x78, 0xad, 0x59, 0x36, 0xa2, 0x47, 0xd2,
	0x82, 0xe5, 0xd3, 0x20, 0x70, 0x79, 0x3e, 0x08, 0x63, 0x80, 0x65, 0x32, 0x3b, 0x90, 0x7f, 0x99,
	0xe5, 0x6a, 0x99, 0x7f, 0x7e, 0x7b, 0xcf, 0xf1, 0x5e, 0x69, 0x9e, 0xc1, 0x0c, 0x7c, 0xa2, 0x04,
	0xc9, 0xbb, 0xce, 0xc9, 0x80, 0x07, 0x03, 0x4e, 0x4b, 0xbe, 0x03, 0x0b, 0x31, 0x93, 0xc0, 0xc3,
	0x4a, 0xcb, 0x34, 0xe4, 0x3f, 0x15, 0x0c, 0x24, 0x0e, 0x70, 0x35, 0x8f, 0xd9, 0xc1, 0xb7, 0xd7,
	0xfc, 0x57, 0x9f, 0xd1, 0x7a, 0xc8, 0x61, 0x84, 0x08, 0x05, 0xc5, 0x26, 0xd6, 0x43, 0x21, 0x40,
	0xca, 0x92, 0xff, 0x2c, 0x1b, 0x16, 0x38, 0x9b, 0x5b, 0xf7, 0xe9, 0xbc, 0xf5, 0x10, 0xa7, 0x4c,
	0xec, 0x78, 0x0f, 0xae, 0x85, 0x49, 0x2c, 0xf4, 0x74, 0xd5, 0x9e, 0xaa, 0x7b, 0xfe, 0x3c, 0xcb,
	0xd3, 0x72, 0x81, 0x17, 0x3e, 0x54, 0xe6, 0x89, 0xad, 0x25, 0x28, 0x7b, 0xe9, 0xe2, 0x07, 0xf9,
	0x3c, 0x7c, 0x0f, 0x9f, 0xbf, 0x98, 0xe1, 0xf3, 0xf0, 0x1d, 0x7c, 0x1e, 0x81, 0x14, 0x6b, 0xc0,
	0x77, 0x35, 0x1e, 0xd7, 0xff, 0xf2, 0x5d, 0x0a, 0xa8, 0x85, 0x0a, 0x18, 0xba, 0x1a, 0x06, 0xfb,
	0xef, 0xa5, 0xb6, 0xe0, 0x3c, 0x3a, 0xc3, 0x21, 0x83, 0xbf, 0x12, 0x0c, 0xaa, 0xcf, 0x6f, 0x87,
	0xc7, 0xb7, 0xdb, 0x4a, 0x9b, 0x2e, 0x84, 0x83, 0x9f, 0x87, 0x30, 0xc5, 0x20, 0xdb, 0xb0, 0x12,
	0x2e, 0xc2, 0x0f, 0x1c, 0x8f, 0xa5, 0xf2, 0xfa, 0xef, 0xe6, 0x78, 0x62, 0x27, 0x5c, 0xee, 0x21,
	0x22, 0xe3, 0xec, 0xfe, 0x05, 0xac, 0x58, 0xf7, 0x55, 0x97, 0x79, 0x58, 0x6b, 0x69, 0xb6, 0xce,
	0x62, 0xfb, 0xfa, 0xbd, 0x5c, 0xca, 0xbe, 0x96, 0xac, 0xfb, 0x83, 0x84, 0x26, 0xb2, 0xb4, 0x6d,
	0xbe, 0x65, 0x63, 0x16, 0x78, 0xa6, 0x9e, 0x24, 0xe9, 0xdf, 0x4f, 0x0f, 0x94, 0xac, 0x87, 0xfb,
	0x02, 0x1f, 0x0d, 0x1a, 0xc0, 0x4d, 0x76, 0x1e, 0x30, 0xcf, 0xd6, 0x2c, 0x55, 0x3b, 0xc1, 0xc4,
	0xc0, 0x97, 0x2d, 0xac, 0x2e, 0xe2, 0xf1, 0xb3, 0x5c, 0xba, 0xa8, 0xfb, 0x20, 0x1a, 0xd0, 0x44,
	0xfa, 0x27, 0x41, 0xe0, 0x72, 0xb3, 0x8b, 0x38, 0xfe, 0x00, 0xae, 0xbf, 0x9b, 0x23, 0x4f, 0x60,
	0x7f, 0x90, 0x0b, 0x33, 0xd8, 0x67, 0x9b, 0x9f, 0x3d, 0xa0, 0xab, 0x6f, 0x67, 0xc7, 0x13, 0xd9,
	0x7d, 0x58, 0x8a, 0xcc, 0x0f, 0x15, 0x8b, 0x0a, 0x39, 0xb6, 0xb4, 0x13, 0xf9, 0x8f, 0x72, 0x51,
	0x62, 0x25, 0x02, 0x3f, 0x0c, 0xd1, 0x7b, 0x96, 0x76, 0x42, 0x76, 0x60, 0xd9, 0x7f, 0xed, 0xab,
	0xc7, 0x1e, 0x63, 0xe1, 0xc9, 0x48, 0xb5, 0xcc, 0xb1, 0x19, 0xc8, 0xff, 0x91, 0x0c, 0xf3, 0x5f,
	0xfb, 0x7b, 0x1e, 0x63, 0xe2, 0x88, 0xd4, 0x45, 0x2c, 0xd6, 0x2b, 0xb8, 0x5d, 0xc7, 0xa6, 0xc5,
	0x84, 0xb5, 0xff, 0x67, 0x2e, 0xb2, 0xf6, 0xcd, 0x4d, 0x5a, 0xb1, 0x9c, 0x93, 0x3d, 0xd3, 0x62,
	0xdc, 0xd2, 0xb7, 0x53, 0x2d, 0x90, 0xff, 0xca, 0x7d, 0xcd, 0x1e, 0x48, 0x03, 0xaa, 0x96, 0xa3,
	0x6b, 0x96, 0x2a, 0xba, 0x3a, 0xf2, 0xff, 0xe4, 0x44, 0x6f, 0x85, 0x03, 0xc5, 0x69, 0xb0, 0xd1,
	0x83, 0xe2, 0x90, 0x9d, 0x8c, 0xd1, 0x7f, 0xeb, 0x90, 0x8d, 0x3b, 0x59, 0x59, 0xd3, 0x20, 0x12,
	0xe4, 0xc6, 0x9a, 0x2e, 0x67, 0x79, 0x27, 0x02, 0x1f, 0xc9, 0x4d, 0xa8, 0x26, 0xc7, 0x28, 0xd3,
	0x90, 0x85, 0x5d, 0x55, 0x62, 0x98, 0x62, 0x34, 0x7e, 0x04, 0xa0, 0xb8, 0x94, 0x89, 0xca, 0x8f,
	0xb3, 0x74, 0x39, 0xcb, 0x32, 0xcd, 0x9a, 0x2e, 0xb9, 0x06, 0xc5, 0xb1, 0xe6, 0xbf, 0xb4, 0x98,
	0x1d, 0x1e, 0x2d, 0xb3, 0xdb, 0x5b, 0x34, 0x02, 0x61, 0x3d, 0xe4, 0x4f, 0x8e, 0x6c, 0x16, 0x08,
	0xde, 0x51, 0x3d, 0x24, 0x60, 0x8a, 0xd1, 0xf8, 0x79, 0x1e, 0xca, 0xf1, 0x69, 0xeb, 0x82, 0xb8,
	0x37, 0xa0, 0x62, 0xb0, 0x33, 0x53, 0x67, 0xc9, 0x21, 0xbb, 0x46, 0x41, 0x80, 0x78, 0x90, 0xbb,
	0x0a, 0xe5, 0x90, 0x20, 0x62, 0x4f, 0x4b, 0x02, 0xa0, 0x18, 0x58, 0xc1, 0x98, 0xc7, 0x62, 0x64,
	0x5e, 0x54, 0x30, 0xe6, 0x31, 0x1f, 0xb5, 0x1c, 0xd7, 0x56, 0x73, 0x1c, 0x1e, 0x16, 0x56, 0x1f,
	0x42, 0xcd, 0xd2, 0x26, 0xb6, 0x7e, 0x1a, 0x26, 0xd0, 0xb0, 0x6f, 0x55, 0x15, 0x40, 0x91, 0x2b,
	0xc9, 0x03, 0xa8, 0x9a, 0xae, 0xea, 0x85, 0xda, 0xf0, 0xe5, 0x12, 0x6f, 0xb0, 0x24, 0x45, 0x41,
	0xa2, 0x29, 0x5a, 0x31, 0xe3, 0x67, 0x5f, 0xf4, 0x0f, 0x53, 0xcc, 0x71, 0xf6, 0x72, 0xd4, 0x3f,
	0x4c, 0xf8, 0x2b, 0x06, 0xae, 0x29, 0x29, 0x21, 0x41, 0xac, 0x29, 0xae, 0x1f, 0xc3, 0x0d, 0xe4,
	0xbd, 0x29, 0xb1, 0x81, 0xd7, 0xa1, 0x82, 0x15, 0xa5, 0xed, 0x18, 0x5c, 0x09, 0xcb, 0x7c, 0x40,
	0xd9, 0x75, 0x8c, 0x9e, 0x63, 0xa0, 0x16, 0x16, 0xa1, 0xa0, 0x7d, 0x89, 0x98, 0x15, 0xd1, 0x73,
	0xd0, 0xbe, 0x54, 0x0c, 0xb2, 0x06, 0x58, 0x6d, 0xc6, 0xfd, 0x25, 0xf9, 0xb2, 0xd0, 0xac, 0xeb,
	0x18, 0x61, 0x5b, 0x89, 0xac, 0x42, 0x99, 0xb3, 0xf5, 0x11, 0x2d, 0x8b, 0xce, 0x03, 0x32, 0xf5,
	0x15, 0x03, 0xf5, 0x87, 0x38, 0xd3, 0xe0, 0xc7, 0x80, 0x1a, 0x2d, 0xb8, 0x8e, 0xa1, 0x18, 0xe4,
	0xd6, 0x85, 0xda, 0x76, 0x95, 0xa3, 0xa7, 0x0b, 0xdb, 0xbb, 0x20, 0x99, 0xbe, 0x7a, 0x66, 0xa6,
	0x8e, 0xef, 0xb2, 0x91, 0x0e, 0x0d, 0x75, 0xd3, 0x3f, 0x34, 0x93, 0x23, 0x78, 0xe3, 0x8f, 0x33,
	0x50, 0xe0, 0x52, 0x5d, 0x30, 0x8f, 0xa4, 0x46, 0xce, 0xce, 0xd4, 0xc8, 0x1f, 0x43, 0x9e, 0xef,
	0xbb, 0x70, 0xab, 0x24, 0x53, 0x72, 0x3e, 0x3c, 0x53, 0x72, 0x3c, 0xaa, 0xd3, 0x74, 0x7d, 0xb9,
	0x20, 0xfc, 0xc1, 0x74, 0x7d, 0xd4, 0x3e, 0xee, 0xaf, 0x66, 0x9f, 0x30, 0x5f, 0x9e, 0xe3, 0xf0,
	0x92, 0xe9, 0x52, 0xfe, 0x8e, 0xf6, 0x78, 0x34, 0xf1, 0x4d, 0x1b, 0x6b, 0x01, 0xd3, 0xe0, 0xf6,
	0x51, 0xa3, 0x10, 0x81, 0x14, 0xa3, 0xf1, 0xab, 0x0c, 0xfa, 0x9e, 0x87, 0x06, 0xf8, 0x1e, 0xe9,
	0xbe, 0xf1, 0xac, 0x25, 0xde, 0xb1, 0xd6, 0x1d, 0x4b, 0x4c, 0xf9, 0x28, 0xb7, 0xb5, 0xf3, 0x80,
	0xc6, 0x40, 0xf4, 0xe1, 0x54, 0xc9, 0xe7, 0x8b, 0x3e, 0x08, 0xad, 0xf8, 0x71, 0x75, 0x87, 0xe6,
	0x27, 0x14, 0x52, 0x9e, 0x39, 0xb7, 0x85, 0xc2, 0xa6, 0x54, 0x22, 0x94, 0x0c, 0x91, 0x92, 0x1b,
	0x87, 0x30, 0x17, 0x36, 0x3e, 0x3f, 0x86, 0xb9, 0xb0, 0x35, 0x9a, 0xe1, 0x46, 0x5f, 0x9f, 0x56,
	0x2b, 0x0d, 0xb1, 0xe4, 0x16, 0xe4, 0xfd, 0x33, 0xdd, 0xe7, 0x51, 0xa6, 0x92, 0x8a, 0x69, 0xe1,
	0x5c, 0x94, 0x63, 0x1b, 0xc7, 0x50, 0x1f, 0x30, 0xe6, 0xb5, 0x1c, 0xdb, 0x66, 0x3a, 0xaf, 0x86,
	0x66, 0xb7, 0x77, 0x2d, 0x8a, 0x75, 0x69, 0x35, 0x52, 0xe0, 0xb0, 0x0e, 0x57, 0x64, 0x03, 0x6a,
	0x1e, 0x1b, 0x3b, 0x01, 0x8b, 0x48, 0x44, 0x08, 0xa8, 0x08, 0x20, 0xa7, 0x69, 0xfc, 0x5b, 0x06,
	0xf2, 0x2d, 0xd3, 0xf0, 0xc8, 0x0a, 0xcc, 0xb9, 0x1e, 0x3b, 0x36, 0xcf, 0xc3, 0xe0, 0x15, 0xbe,
	0x91, 0x8f, 0x42, 0xd5, 0x64, 0x67, 0x8e, 0xda, 0x38, 0x28, 0xa5, 0x97, 0x24, 0x68, 0xe0, 0x24,
	0x85, 0x68, 0x2f, 0xaf, 0xa6, 0x03, 0x9c, 0x08, 0x33, 0x71, 0x74, 0x9b, 0x76, 0xe5, 0xc2, 0x8c,
	0x2b, 0xc7, 0x8e, 0x39, 0x97, 0x72, 0xcc, 0xab, 0x50, 0x0e, 0x26, 0xb6, 0xcd, 0xac, 0xc4, 0xbe,
	0x4a, 0x02, 0xa0, 0x18, 0xe4, 0x1a, 0xcc, 0x09, 0xd7, 0x91, 0x97, 0xd2, 0x0e, 0x53, 0xe0, 0x0e,
	0xd3, 0xf8, 0x93, 0x0c, 0x54, 0xa7, 0x1a, 0xdf, 0x5b, 0x00, 0xb1, 0x8b, 0x45, 0x7b, 0x96, 0xb8,
	0x42, 0xd2, 0xe3, 0x4a, 0x51, 0x91, 0x5d, 0x90, 0x5c, 0xc6, 0x3c, 0x4c, 0x2f, 0xe1, 0xb6, 0xf8,
	0x3c, 0x25, 0xa4, 0x9b, 0xae, 0xd3, 0xdb, 0x46, 0xe7, 0xdd, 0xa9, 0x77, 0x9f, 0x7c, 0x08, 0x05,
	0xdd, 0x34, 0x3c, 0x5f, 0xce, 0xf3, 0x81, 0xb5, 0x29, 0x8d, 0x52, 0x81, 0x6b, 0xfc, 0x22, 0x0b,
	0xe5, 0x9e, 0x7b, 0xd4, 0x14, 0x5b, 0xff, 0x05, 0x54, 0xc2, 0x65, 0xc7, 0xbd, 0xd6, 0xf4, 0x49,
	0x6b, 0xc4, 0x71, 0xfc, 0xa4, 0x55, 0x38, 0x7c, 0xde, 0x6d, 0xf6, 0x28, 0x04, 0x31, 0x68, 0x5a,
	0x67, 0xd9, 0x19, 0x9d, 0xa5, 0x90, 0xae, 0x2c, 0x92, 0x65, 0x84, 0x74, 0xc9, 0xb7, 0x44, 0x0a,
	0xf6, 0x4d, 0x23, 0xba, 0x0e, 0x99, 0xca, 0xc0, 0x43, 0xd3, 0x60, 0x3c, 0xf5, 0xe2, 0x03, 0x9e,
	0xbb, 0x5d, 0xed, 0xb5, 0xe5, 0x68, 0x86, 0xea, 0x5b, 0xa6, 0xce, 0xc2, 0xc6, 0x66, 0x78, 0x24,
	0xab, 0x86, 0xb8, 0x21, 0xa2, 0xc8, 0x27, 0x20, 0xe1, 0xe9, 0x51, 0xd3, 0xad, 0x24, 0xc6, 0x8a,
	0x6d, 0xc6, 0x03, 0x62, 0x53, 0xb7, 0xa2, 0x30, 0xbb, 0x06, 0xd5, 0x58, 0xbc, 0x54, 0x48, 0x89,
	0x24, 0xc4, 0x0c, 0x99, 0x85, 0xe2, 0x9e, 0xe5, 0xbc, 0x6a, 0xea, 0xd6, 0x05, 0x0f, 0x49, 0xf7,
	0xa7, 0xb3, 0xd3, 0xfd, 0xe9, 0x74, 0xd0, 0x98, 0x7b, 0x5b, 0xd0, 0x40, 0xc3, 0xf5, 0xf4, 0x30,
	0x62, 0x14, 0xc3, 0xb6, 0xb3, 0xa7, 0x8b, 0x70, 0x81, 0x79, 0xd5, 0x0f, 0xa6, 0xc2, 0x49, 0xc9,
	0xf0, 0x03, 0x81, 0x8c, 0x9a, 0xd8, 0xe5, 0x54, 0x13, 0x7b, 0x1b, 0x2a, 0x62, 0xc1, 0xc2, 0x64,
	0x2a, 0x33, 0xc6, 0x16, 0xef, 0x34, 0x05, 0x3b, 0x7a, 0xf4, 0xd1, 0x7d, 0x51, 0x84, 0x48, 0x43,
	0xbe, 0x5c, 0x5d, 0xcb, 0xad, 0x17, 0x68, 0xc5, 0xf7, 0xf4, 0x50, 0x3f, 0x9c, 0x06, 0x25, 0x49,
	0x68, 0x6a, 0x82, 0xc6, 0xf0, 0x83, 0x88, 0xa6, 0xf1, 0x10, 0x4a, 0xa1, 0x86, 0x7c, 0xdc, 0x52,
	0xde, 0x62, 0xd2, 0x74, 0x2b, 0x34, 0xf9, 0x64, 0x4b, 0x43, 0x22, 0x5a, 0x3c, 0x16, 0x0f, 0x8d,
	0xdf, 0xce, 0x40, 0x61, 0xe0, 0x18, 0x8a, 0x9b, 0x4a, 0x69, 0x99, 0x74, 0x4a, 0xbb, 0x02, 0x25,
	0x9e, 0x05, 0xb5, 0xf0, 0xb6, 0xaf, 0x2c, 0x92, 0xa0, 0x36, 0x9e, 0x8d, 0x07, 0x71, 0x11, 0x21,
	0xca, 0xa3, 0x7c, 0x5c, 0x1e, 0x5d, 0x4c, 0x8a, 0x85, 0x8b, 0x49, 0xb1, 0x61, 0xc3, 0xdc, 0x61,
	0xa0, 0xb9, 0xca, 0x7b, 0x2e, 0x20, 0x97, 0xa7, 0xd3, 0xc9, 0xf4, 0x7c, 0xb9, 0xf7, 0xcc, 0x97,
	0x7f, 0xcb, 0x7c, 0x37, 0xa1, 0x36, 0x7c, 0x99, 0x4a, 0xb2, 0x51, 0x5d, 0x91, 0x89, 0xeb, 0x8a,
	0xc6, 0xdf, 0x14, 0xa0, 0x2a, 0xee, 0x20, 0x7d, 0xd7, 0xb1, 0x7d, 0xb4, 0xe9, 0x39, 0x3f, 0xd0,
	0x82, 0x89, 0x1f, 0xba, 0xe7, 0xfc, 0xd4, 0xcd, 0xe1, 0xc4, 0xa7, 0x21, 0x1a, 0x09, 0xc3, 0xea,
	0x34, 0xcb, 0xaf, 0x6b, 0xe6, 0x53, 0xb7, 0x4f, 0x08, 0xa6, 0x21, 0x7a, 0xea, 0x92, 0x31, 0x3f,
	0x73, 0xc9, 0xf8, 0x31, 0xcc, 0xfb, 0xcc, 0x3a, 0x56, 0x27, 0xae, 0xa1, 0x05, 0x4c, 0x9d, 0x78,
	0x56, 0x78, 0x0f, 0x59, 0x43, 0xf0, 0x01, 0x87, 0x1e, 0x78, 0xd6, 0xbb, 0x2f, 0x05, 0xe7, 0xbe,
	0xd1, 0xa5, 0x60, 0xf1, 0x6b, 0x5e, 0x0a, 0x96, 0xde, 0x71, 0x29, 0xf8, 0x10, 0xea, 0x22, 0x57,
	0xf9, 0xa2, 0xf2, 0xf6, 0x65, 0xb8, 0x90, 0xfd, 0x38, 0x82, 0xd6, 0x38, 0x5d, 0xf8, 0xe6, 0x93,
	0xcf, 0x61, 0x3e, 0x4c, 0x61, 0xf1, 0xc8, 0xca, 0x3b, 0x46, 0xd6, 0x05, 0x61, 0x3c, 0xf4, 0x43,
	0xa8, 0x4d, 0x2f, 0xb9, 0xba, 0x96, 0x59, 0xaf, 0xd2, 0xaa, 0x9b, 0x5e, 0xe8, 0x55, 0x28, 0x47,
	0xfe, 0xe0, 0xf3, 0x4b, 0x83, 0x2a, 0x2d, 0x1d, 0x47, 0xce, 0xb2, 0x12, 0x67, 0xf4, 0x79, 0x8e,
	0x89, 0x32, 0xf8, 0x6d, 0x28, 0x27, 0x47, 0x4d, 0x69, 0x46, 0x9c, 0xf0, 0xa0, 0x49, 0x4b, 0x41,
	0x74, 0xe2, 0xfc, 0x04, 0x8a, 0xdc, 0x79, 0x5c, 0x5f, 0x5e, 0x98, 0xa9, 0x0c, 0xb8, 0x77, 0x51,
	0xf4, 0x2d, 0xc5, 0xf5, 0xc9, 0x06, 0x94, 0x84, 0x71, 0xbb, 0xbe, 0x4c, 0x38, 0x65, 0x62, 0x1b,
	0xc2, 0xfe, 0x29, 0xb7, 0x7e, 0xa4, 0xfd, 0x2e, 0xd4, 0xfd, 0x97, 0x53, 0x55, 0xe2, 0x22, 0x1f,
	0xb1, 0x92, 0xe8, 0x25, 0x6d, 0xc1, 0xb4, 0xe6, 0xa7, 0x5f, 0x1b, 0x6d, 0xa8, 0x1f, 0xb8, 0x27,
	0x9e, 0x66, 0xb0, 0xe8, 0x86, 0x34, 0x75, 0x6f, 0x9b, 0x99, 0xba, 0xb7, 0x4d, 0x5f, 0xc4, 0xe6,
	0xa6, 0x2e, 0x62, 0x1b, 0x3f, 0xcf, 0xc0, 0x7c, 0xcc, 0xe6, 0x9b, 0xfa, 0x81, 0x0c, 0x45, 0xdd,
	0xb1, 0x03, 0x66, 0x07, 0xdc, 0x11, 0xaa, 0x34, 0x7a, 0xe5, 0xde, 0x66, 0xec, 0x84, 0x93, 0xe1,
	0x23, 0x4f, 0x53, 0x4e, 0xa0, 0x59, 0x2a, 0x9e, 0xa3, 0xf2, 0xdc, 0x0b, 0x4b, 0x1c, 0xd0, 0x65,
	0xfc, 0x86, 0xd0, 0x7d, 0x19, 0xa8, 0xba, 0x33, 0xb1, 0xa3, 0x5b, 0xc0, 0x92, 0xfb, 0x32, 0x68,
	0xe1, 0x7b, 0xe3, 0x7b, 0x00, 0xbd, 0xc0, 0xfd, 0x3f, 0x17, 0x29, 0x43, 0x31, 0xba, 0x44, 0x06,
	0x21, 0x4c, 0xf8, 0xda, 0xf8, 0x14, 0x2a, 0x9c, 0x41, 0xb8, 0x3c, 0xee, 0x94, 0xe2, 0x99, 0xb3,
	0xa8, 0xd2, 0xf8, 0xbd, 0xf1, 0xef, 0x39, 0x58, 0x7c, 0xcc, 0x6c, 0xe6, 0x9b, 0xfe, 0x94, 0x37,
	0x7d, 0x20, 0x0a, 0xda, 0x22, 0xdf, 0xa0, 0x4a, 0xfa, 0x2c, 0xc4, 0xab, 0xdb, 0x4f, 0xdf, 0x72,
	0x35, 0xc4, 0x2f, 0xcb, 0x2e, 0xde, 0x09, 0xdd, 0x84, 0xaa, 0xa7, 0xbd, 0x52, 0x4f, 0x1d, 0x3f,
	0xe0, 0x41, 0xb7, 0x22, 0x4a, 0x59, 0x4f, 0x7b, 0xf5, 0x24, 0x04, 0x91, 0x0f, 0xa1, 0x8e, 0x24,
	0x9a, 0x65, 0xa9, 0x67, 0x63, 0xf5, 0x7c, 0x6c, 0x71, 0xbb, 0x17, 0x44, 0x4d, 0xcb, 0x3a, 0x1c,
	0x3f, 0x1f, 0x5b, 0xbc, 0x32, 0xd4, 0x5e, 0x21, 0x01, 0xff, 0x9e, 0x41, 0x98, 0xbe, 0xa0, 0x39,
	0x1c, 0xf3, 0x2f, 0x1d, 0x7c, 0xf2, 0x6d, 0x20, 0x48, 0xe3, 0x9c, 0xf9, 0x6a, 0xaa, 0x4e, 0xaa,
	0x73, 0x42, 0xc9, 0xd3, 0x5e, 0xf5, 0xcf, 0x7c, 0x25, 0xa9, 0x8c, 0x42, 0x8e, 0x48, 0x2d, 0xd2,
	0xe2, 0x7c, 0xcc, 0xb1, 0x7f, 0xe6, 0x8b, 0xcc, 0x78, 0x4b, 0x88, 0x76, 0xe4, 0xe9, 0x81, 0xa5,
	0xfa, 0xa7, 0xce, 0x2b, 0x7e, 0x03, 0x56, 0xa6, 0xb8, 0xa6, 0x5d, 0x04, 0x0e, 0x4f, 0x9d, 0x57,
	0x18, 0xda, 0xb8, 0x6c, 0x96, 0x66, 0x47, 0xc7, 0xf8, 0x05, 0x11, 0xda, 0x50, 0x3a, 0x4b, 0xb3,
	0xc3, 0x5b, 0xdd, 0x0d, 0x28, 0x5b, 0x96, 0xe1, 0x8a, 0x9b, 0xef, 0xa5, 0x99, 0x5a, 0xaa, 0x6b,
	0x19, 0x2e, 0x2d, 0x21, 0x9e, 0xdf, 0x74, 0xaf, 0x09, 0xbd, 0x99, 0xae, 0xaa, 0x19, 0x58, 0x7a,
	0xdd, 0xe0, 0x67, 0x08, 0xf0, 0xb4, 0x57, 0x8a, 0xdb, 0x44, 0x08, 0x79, 0x30, 0x55, 0x0d, 0xae,
	0xcd, 0xf8, 0x52, 0xbc, 0x50, 0x7e, 0x8f, 0x9e, 0xa2, 0x6c, 0xfc, 0x16, 0x64, 0x15, 0x17, 0x4d,
	0x90, 0x7f, 0xfe, 0xe2, 0xb3, 0xe8, 0x9c, 0x4f, 0x4b, 0x08, 0x18, 0x32, 0x66, 0x47, 0xc9, 0x23,
	0x97, 0x1c, 0x4a, 0x93, 0x2c, 0x58, 0xe5, 0x59, 0x09, 0x2d, 0xd8, 0xf1, 0x02, 0x75, 0x32, 0x09,
	0x8f, 0xbd, 0x65, 0x5a, 0x42, 0xc0, 0xc1, 0xc4, 0x34, 0x1a, 0x7f, 0x9d, 0x81, 0x3c, 0x2e, 0x87,
	0x5c, 0x83, 0x72, 0xe2, 0xed, 0xc2, 0x7c, 0x13, 0x00, 0x1e, 0xbe, 0xfc, 0xd7, 0x7e, 0xc0, 0xc6,
	0xe9, 0x74, 0x0c, 0x02, 0xc4, 0x33, 0xf2, 0x6d, 0x20, 0x63, 0xcd, 0xd6, 0x4e, 0x18, 0x86, 0x47,
	0xae, 0x07, 0xe6, 0xfb, 0x61, 0xd6, 0x58, 0x48, 0x30, 0x4d, 0x81, 0x40, 0x57, 0x11, 0x1f, 0x16,
	0x08, 0x63, 0xc4, 0x03, 0x81, 0xe3, 0x61, 0xd5, 0x8e, 0xe6, 0x8a, 0x08, 0x83, 0xf9, 0xba, 0x67,
	0x8a, 0xcf, 0x5c, 0x84, 0x1d, 0xce, 0x23, 0xbc, 0x9d, 0x80, 0x31, 0x3e, 0xd4, 0xa6, 0x54, 0x77,
	0x31, 0x91, 0x86, 0xba, 0x10, 0x2d, 0x17, 0xd4, 0x05, 0x81, 0x3c, 0x5f, 0x80, 0xf0, 0x7e, 0xfe,
	0x3c, 0xdd, 0xc7, 0x08, 0x53, 0x61, 0xdc, 0xc7, 0xb8, 0x2a, 0xa2, 0xb1, 0x69, 0x1b, 0xec, 0x3c,
	0x72, 0x7f, 0x7e, 0x49, 0x6d, 0xb0, 0xf3, 0x54, 0x8b, 0x84, 0x33, 0x9d, 0x13, 0x5a, 0x11, 0x20,
	0xd4, 0x4a, 0xe3, 0x97, 0x59, 0x20, 0xa1, 0xcf, 0x4e, 0x7f, 0x52, 0x54, 0x8c, 0xbe, 0xbe, 0xc8,
	0x44, 0x39, 0x2d, 0x82, 0x90, 0x07, 0x33, 0x57, 0x3c, 0xd9, 0x77, 0x5e, 0xf1, 0x4c, 0x5f, 0xeb,
	0x4c, 0x7d, 0xca, 0x90, 0x9b, 0xf9, 0x94, 0x21, 0x55, 0xd9, 0xe4, 0xa7, 0x2a, 0x9b, 0x77, 0x7e,
	0xa5, 0x51, 0x78, 0xe7, 0x57, 0x1a, 0x58, 0x0d, 0xd9, 0x5a, 0x80, 0xd3, 0x88, 0x15, 0x17, 0x6c,
	0x2d, 0x50, 0x5c, 0xd2, 0x9c, 0x4d, 0x89, 0x65, 0x5e, 0x81, 0x5c, 0x4b, 0x4e, 0xaa, 0x17, 0xa3,
	0xd7, 0x74, 0xc2, 0x6c, 0x6c, 0xc5, 0x21, 0x6e, 0xaa, 0xfa, 0x79, 0x9f, 0xbe, 0x1a, 0xff, 0x9c,
	0x01, 0xf9, 0x69, 0x72, 0x4b, 0x3d, 0x50, 0xd2, 0x9a, 0xfe, 0x00, 0x20, 0xb5, 0xa6, 0xd0, 0xac,
	0xf5, 0xd4, 0x45, 0x5f, 0xcc, 0x98, 0xb7, 0xa4, 0x93, 0x5d, 0xb8, 0x0a, 0x65, 0xe6, 0x79, 0x8e,
	0xa7, 0x8e, 0xfd, 0x93, 0x48, 0x9b, 0x1c, 0xb0, 0xef, 0x9f, 0xbc, 0x5b, 0x9b, 0x53, 0x7b, 0x50,
	0x98, 0xd9, 0x83, 0x6d, 0x28, 0x32, 0x3b, 0xf0, 0x4c, 0x16, 0xd5, 0x27, 0x57, 0xa2, 0x3d, 0x9d,
	0x12, 0x9f, 0x07, 0x81, 0x88, 0xb2, 0xb1, 0x03, 0x57, 0xde, 0xb2, 0xb8, 0x50, 0x2f, 0xf2, 0x8c,
	0x5e, 0x12, 0xa5, 0x6c, 0xc3, 0xea, 0xd3, 0x0b, 0x3b, 0xd7, 0x8e, 0xb4, 0xb2, 0x0c, 0x73, 0xba,
	0xa6, 0x62, 0x16, 0x14, 0x1a, 0x29, 0xe8, 0xda, 0xbe, 0xb1, 0xd3, 0x78, 0x01, 0x57, 0xdf, 0x3a,
	0x28, 0xde, 0x85, 0x94, 0x4a, 0x32, 0x33, 0x2a, 0x99, 0x56, 0x74, 0x76, 0x46, 0xd1, 0x1b, 0xc7,
	0x50, 0xe0, 0x81, 0x9f, 0x2c, 0xc3, 0x42, 0xa7, 0x77, 0xa8, 0xd0, 0x7e, 0x6f, 0xbf, 0xd3, 0x1b,
	0xa9, 0xad, 0x27, 0x9d, 0xd6, 0x53, 0xe9, 0x12, 0xa9, 0x42, 0xa9, 0xad, 0x0c, 0x9b, 0xbb, 0xdd,
	0x4e, 0x5b, 0xca, 0x90, 0x0a, 0x14, 0xe9, 0x41, 0xaf, 0xa7, 0xf4, 0x1e, 0x4b, 0x59, 0x52, 0x83,
	0x32, 0xed, 0xec, 0xf6, 0xfb, 0x23, 0x7c, 0xcd, 0x21, 0xe5, 0x70, 0x44, 0x3b, 0xc3, 0x61, 0xa7,
	0x2d, 0xe5, 0x49, 0x1d, 0x80, 0x76, 0x86, 0x23, 0xaa, 0xb4, 0x46, 0x9d, 0xb6, 0x54, 0xd8, 0xf8,
	0x9d, 0x3c, 0x94, 0x3b, 0xf1, 0xb7, 0x70, 0x00, 0x73, 0xbd, 0x3e, 0xdd, 0x6f, 0x76, 0xa5, 0x4b,
	0x64, 0x11, 0xe6, 0xdb, 0xca, 0xf0, 0xa9, 0xda, 0xeb, 0x8f, 0xd4, 0x4e, 0xaf, 0x7f, 0xf0, 0xf8,
	0x89, 0x94, 0x21, 0x04, 0xea, 0xfb, 0x9d, 0xfd, 0x34, 0x2c, 0x8b, 0x12, 0xb6, 0xfa, 0xb4, 0xb3,
	0xa7, 0x74, 0x3b, 0xea, 0xa8, 0xdf, 0x57, 0xf7, 0x9b, 0xbd, 0x17, 0x52, 0x1e, 0xe7, 0xed, 0x0d,
	0x76, 0xd5, 0xbd, 0x83, 0x61, 0x47, 0x2a, 0x91, 0xeb, 0xb0, 0x8a, 0x6f, 0xbb, 0x83, 0xa1, 0x3a,
	0x7a, 0x42, 0x3b, 0xc3, 0x27, 0xfd, 0x6e, 0x5b, 0xed, 0x3c, 0x6f, 0x75, 0x3a, 0xed, 0x4e, 0x5b,
	0x92, 0xc8, 0x02, 0xd4, 0x10, 0xdf, 0xeb, 0xab, 0x8f, 0x9f, 0xa9, 0x4d, 0x3a, 0x90, 0xd6, 0xc8,
	0x07, 0x70, 0x85, 0x3e, 0x57, 0x07, 0x6f, 0x1f, 0xf1, 0x7d, 0x72, 0x19, 0x48, 0xb3, 0xd7, 0xec,
	0xbe, 0xf8, 0x51, 0x87, 0xa6, 0x86, 0xbd, 0xc9, 0x90, 0x55, 0x58, 0x56, 0x7a, 0x87, 0xcd, 0xae,
	0xd2, 0x56, 0x5b, 0xfd, 0xde, 0x9e, 0xf2, 0xf8, 0x80, 0x36, 0x47, 0x4a, 0xbf, 0x27, 0xbd, 0xc9,
	0x92, 0xeb, 0x70, 0x05, 0x99, 0x35, 0xdb, 0x6f, 0xe3, 0xf9, 0x26, 0x4f, 0x6e, 0xc0, 0xea, 0x80,
	0xf6, 0x5b, 0x9d, 0xe1, 0x5b, 0x27, 0x7d, 0x83, 0xeb, 0xb8, 0x12, 0x31, 0xe7, 0xcd, 0xee, 0x70,
	0x0a, 0x15, 0x57, 0x2f, 0xbd, 0x91, 0xc8, 0x0a, 0x2c, 0x44, 0x3a, 0x50, 0x07, 0xfd, 0xae, 0xd2,
	0x52, 0x3a, 0x43, 0xe9, 0xcd, 0x1a, 0xc2, 0xf7, 0x68, 0xa7, 0xa3, 0xa2, 0xf6, 0x12, 0x7e, 0xb8,
	0x8a, 0x85, 0x6e, 0x5f, 0x0c, 0x4f, 0xc1, 0xdf, 0x64, 0xc8, 0x07, 0x70, 0xb9, 0xd5, 0xef, 0x8d,
	0x68, 0xbf, 0xdb, 0xed, 0x50, 0x75, 0xd8, 0x6f, 0x3d, 0xed, 0x8c, 0xd4, 0x0e, 0xa5, 0x7d, 0x2a,
	0xbd, 0x79, 0x93, 0x25, 0x57, 0x61, 0x39, 0x5e, 0xfd, 0x0c, 0x32, 0x4f, 0x56, 0x40, 0x42, 0x65,
	0xce, 0xc0, 0x51, 0x78, 0x59, 0xe9, 0x8d, 0x3a, 0x8f, 0x85, 0x3e, 0x66, 0xf1, 0xd2, 0xc6, 0x0f,
	0x60, 0x4e, 0x54, 0x85, 0x68, 0x50, 0xc3, 0x83, 0x16, 0xea, 0x41, 0xba, 0x84, 0x56, 0xb1, 0xd7,
	0x54, 0x84, 0xa5, 0xd5, 0xa0, 0xfc, 0xa4, 0xd3, 0xa4, 0xa3, 0xdd, 0x4e, 0x73, 0x24, 0x65, 0x89,
	0x0c, 0x4b, 0xad, 0xee, 0xc1, 0x70, 0xd4, 0xa1, 0xaa, 0xd2, 0xe6, 0x66, 0xb1, 0xd7, 0x3f, 0xe8,
	0xb5, 0x25, 0xd8, 0xf8, 0x9c, 0x7f, 0x98, 0xc6, 0xaf, 0x01, 0xca, 0x20, 0x2e, 0x06, 0x04, 0xab,
	0x7d, 0x85, 0xcf, 0x97, 0x41, 0x03, 0x89, 0x96, 0x20, 0x65, 0x91, 0xa8, 0xdd, 0x69, 0x35, 0x07,
	0x52, 0x6e, 0xe3, 0x11, 0x54, 0x52, 0x5f, 0x68, 0xe0, 0x18, 0xf1, 0x8d, 0x86, 0x74, 0x09, 0xe5,
	0x52, 0xf6, 0xd4, 0x5e, 0x73, 0xbf, 0x23, 0x8c, 0x51, 0xd9, 0x53, 0xbb, 0xca, 0xee, 0xa1, 0x42,
	0x47, 0xea, 0xf3, 0xfd, 0xae, 0x94, 0xdd, 0xd8, 0x01, 0x48, 0xdd, 0x68, 0xa3, 0x5f, 0x88, 0xbb,
	0x6e, 0xe9, 0x12, 0x29, 0x42, 0x6e, 0xd4, 0x1a, 0x48, 0x19, 0x7c, 0x40, 0x48, 0x96, 0x94, 0x20,
	0xcf, 0xf7, 0x2d, 0xb7, 0x71, 0x02, 0x90, 0x7c, 0x04, 0x87, 0x33, 0x0e, 0x9a, 0xa8, 0x1b, 0x29,
	0x83, 0x72, 0x0d, 0xf7, 0xba, 0xfd, 0x67, 0x52, 0x16, 0x7d, 0xa7, 0xd7, 0x19, 0xe1, 0x8b, 0x7a,
	0xb8, 0x23, 0xe5, 0x88, 0x04, 0xd5, 0x5e, 0x67, 0x84, 0xce, 0xd5, 0xdc, 0x47, 0x48, 0x7e, 0x8a,
	0xe2, 0x73, 0xa9, 0x30, 0x43, 0xf1, 0xb9, 0x34, 0xb7, 0x31, 0x84, 0x85, 0x0b, 0x5f, 0xd8, 0xa0,
	0x1c, 0xcd, 0x83, 0x51, 0x5f, 0xba, 0x84, 0x03, 0x9a, 0x7b, 0xaa, 0x98, 0x5c, 0x3d, 0xbc, 0x27,
	0x65, 0x66, 0x20, 0x5b, 0x52, 0x76, 0x06, 0xb2, 0x2d, 0xe5, 0x36, 0xd6, 0xa1, 0x14, 0x7f, 0x57,
	0x53, 0x02, 0xfe, 0xb1, 0x8d, 0x74, 0x09, 0x9f, 0x0e, 0xbb, 0xcd, 0x9e, 0x94, 0xc1, 0xa7, 0x1f,
	0x2a, 0xbd, 0x1f, 0x4a, 0xd9, 0x0d, 0x1d, 0xca, 0xf1, 0xfd, 0x2b, 0xf7, 0x70, 0x54, 0xb9, 0x3a,
	0x7a, 0x31, 0xe8, 0xa8, 0xe1, 0xa8, 0x25, 0x90, 0x52, 0x40, 0xde, 0xbf, 0x92, 0x32, 0x33, 0xa4,
	0xca, 0x40, 0x41, 0xf5, 0xad, 0x00, 0x49, 0x01, 0x47, 0x9d, 0x5e, 0xab, 0xd3, 0x1b, 0x49, 0xb9,
	0x8d, 0xbf, 0xcd, 0x01, 0xb4, 0x93, 0x6b, 0x8f, 0xcb, 0xb0, 0xd8, 0xee, 0x1c, 0x2a, 0xad, 0x8e,
	0xa0, 0x0b, 0x3f, 0xb1, 0x90, 0x2e, 0xe1, 0xfe, 0xa5, 0x11, 0x87, 0xfb, 0xd1, 0x44, 0x29, 0xd8,
	0x63, 0x54, 0x7c, 0x03, 0xae, 0xa7, 0x81, 0xa3, 0x27, 0x0a, 0x6d, 0xab, 0x83, 0x26, 0x1d, 0xbd,
	0x50, 0x05, 0x5c, 0xca, 0x61, 0x14, 0x9a, 0x66, 0xf6, 0xac, 0xb9, 0x27, 0xe5, 0xc9, 0x35, 0x90,
	0xd3, 0xe0, 0xde, 0x70, 0xa0, 0x1e, 0x3e, 0x6e, 0x8e, 0x3a, 0xcf, 0x9a, 0x2f, 0xa4, 0x02, 0xb9,
	0x0a, 0x97, 0xd3, 0xd8, 0x27, 0xfd, 0xe1, 0x28, 0xe2, 0x38, 0x87, 0x21, 0x6b, 0x6a, 0x68, 0x67,
	0xf4, 0xac, 0x4f, 0x9f, 0x46, 0xf8, 0x22, 0xb9, 0x02, 0xcb, 0x69, 0x7c, 0xfb, 0x49, 0x6b, 0xa0,
	0x0e, 0xfa, 0x74, 0x24, 0x95, 0x67, 0x57, 0x31, 0xe8, 0xb7, 0x25, 0x98, 0x9d, 0x6c, 0xd0, 0x6f,
	0xab, 0xc3, 0x0e, 0xe5, 0xcc, 0x2a, 0xb3, 0x93, 0xd1, 0x4e, 0x5b, 0x19, 0xaa, 0x4a, 0x6f, 0x38,
	0x6a, 0xf6, 0x5a, 0x1d, 0xa9, 0x3a, 0xbb, 0x0e, 0xda, 0x4e, 0x61, 0x6b, 0xe8, 0x86, 0xb3, 0xac,
	0x7b, 0xfd, 0x76, 0x47, 0xaa, 0xcf, 0x8e, 0xeb, 0xf6, 0x9b, 0x6d, 0x75, 0xb7, 0xd9, 0xe5, 0xe3,
	0xe6, 0x67, 0x45, 0xea, 0x35, 0x47, 0x6a, 0xa4, 0x1c, 0x69, 0xe3, 0x23, 0x28, 0xc7, 0x37, 0x10,
	0xe8, 0x06, 0xe8, 0x75, 0x6d, 0xe9, 0x12, 0x86, 0x80, 0x66, 0xaf, 0xdf, 0x7b, 0xb1, 0xdf, 0x3f,
	0x18, 0x4a, 0x99, 0x8d, 0x3e, 0x54, 0x52, 0x7d, 0x79, 0x32, 0x0f, 0x95, 0xf4, 0xca, 0x2e, 0xa1,
	0x4f, 0x74, 0x77, 0xe3, 0xf7, 0x0c, 0x12, 0xe0, 0x3c, 0x11, 0x80, 0xbb, 0x15, 0x7d, 0x1c, 0xbf,
	0xe7, 0x36, 0xae, 0x41, 0x29, 0xea, 0x66, 0xa3, 0xab, 0x3e, 0xe3, 0x06, 0x58, 0x84, 0x1c, 0x5a,
	0x62, 0x76, 0xe3, 0x3a, 0xcc, 0x85, 0x6d, 0xd8, 0x25, 0x90, 0x42, 0x27, 0x68, 0x35, 0x07, 0xa3,
	0x03, 0x8a, 0xe9, 0x2e, 0xb3, 0xf1, 0x11, 0x8f, 0x3b, 0xbc, 0x07, 0x5a, 0x84, 0xdc, 0x90, 0xb6,
	0xc4, 0xe0, 0xf6, 0x70, 0x24, 0x1c, 0x7e, 0xb7, 0x3f, 0x7a, 0x22, 0xe5, 0x36, 0xbe, 0x07, 0x90,
	0xf4, 0x69, 0x71, 0x75, 0xc2, 0xd2, 0xb9, 0xb8, 0x8f, 0x69, 0x47, 0xed, 0xd0, 0xe1, 0x20, 0xf2,
	0x9d, 0x01, 0x86, 0xa5, 0x6c, 0x94, 0xd0, 0xda, 0xb4, 0x3f, 0x90, 0x72, 0x5b, 0x7f, 0x97, 0x17,
	0x1d, 0xa7, 0x53, 0xcf, 0xb1, 0xcd, 0x2f, 0x99, 0x47, 0x76, 0x20, 0x8f, 0xef, 0x24, 0x75, 0x5d,
	0x91, 0xd4, 0x55, 0xab, 0xcb, 0x33, 0xd0, 0xf0, 0x8c, 0x7a, 0x89, 0x3c, 0x84, 0xfc, 0x60, 0xe2,
	0x9f, 0x7e, 0xc3, 0x61, 0x9b, 0x19, 0xf2, 0x5d, 0xa8, 0x36, 0xc3, 0xaf, 0xa7, 0xfe, 0x3f, 0xf3,
	0x7e, 0x1f, 0x8a, 0x61, 0xaf, 0x80, 0x24, 0xcd, 0xf2, 0xe9, 0x26, 0xc4, 0xaa, 0x7c, 0x11, 0x91,
	0x12, 0xe0, 0x3e, 0x14, 0x7e, 0x38, 0x61, 0xde, 0x6b, 0x92, 0xb4, 0xbe, 0x93, 0xb3, 0xfd, 0xea,
	0xd2, 0x34, 0x30, 0x9e, 0xf7, 0x07, 0x50, 0x49, 0x55, 0xac, 0xe4, 0xea, 0x6c, 0xb1, 0x9b, 0x16,
	0xfe, 0xda, 0xdb, 0x91, 0x31, 0xaf, 0xdf, 0x80, 0x85, 0x0b, 0xb5, 0x1e, 0xb9, 0x19, 0x0f, 0x7a,
	0x57, 0x91, 0xbb, 0xda, 0x78, 0x1f, 0x49, 0xcc, 0x9d, 0xc1, 0xca, 0x63, 0x16, 0xbc, 0xa5, 0xc0,
	0x23, 0x1f, 0xbe, 0x65, 0xfc, 0x6c, 0xcd, 0xb8, 0x7a, 0xeb, 0xfd, 0x44, 0xd1, 0x34, 0xbb, 0x57,
	0xfe, 0xfe, 0xd7, 0xd7, 0x33, 0xbf, 0xfa, 0xf5, 0xf5, 0xcc, 0xbf, 0xfc, 0xfa, 0x7a, 0xe6, 0x0f,
	0xff, 0xf5, 0xfa, 0xa5, 0x1f, 0x45, 0xff, 0x05, 0xe4, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x29,
	0x01, 0x39, 0xd5, 0x1b, 0x32, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SynchronizerClient is the client API for Synchronizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SynchronizerClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	Push(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Synchronizer_PushClient, error)
	AnalyzerSync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (Synchronizer_UpgradeClient, error)
	Query(ctx context.Context, in *NtpRequest, opts ...grpc.CallOption) (*NtpResponse, error)
	GenesisSync(ctx context.Context, in *GenesisSyncRequest, opts ...grpc.CallOption) (*GenesisSyncResponse, error)
	KubernetesAPISync(ctx context.Context, in *KubernetesAPISyncRequest, opts ...grpc.CallOption) (*KubernetesAPISyncResponse, error)
	GetKubernetesClusterID(ctx context.Context, in *KubernetesClusterIDRequest, opts ...grpc.CallOption) (*KubernetesClusterIDResponse, error)
}

type synchronizerClient struct {
	cc *grpc.ClientConn
}

func NewSynchronizerClient(cc *grpc.ClientConn) SynchronizerClient {
	return &synchronizerClient{cc}
}

func (c *synchronizerClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/trident.Synchronizer/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) Push(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Synchronizer_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synchronizer_serviceDesc.Streams[0], "/trident.Synchronizer/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &synchronizerPushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synchronizer_PushClient interface {
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type synchronizerPushClient struct {
	grpc.ClientStream
}

func (x *synchronizerPushClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synchronizerClient) AnalyzerSync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/trident.Synchronizer/AnalyzerSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (Synchronizer_UpgradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synchronizer_serviceDesc.Streams[1], "/trident.Synchronizer/Upgrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &synchronizerUpgradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synchronizer_UpgradeClient interface {
	Recv() (*UpgradeResponse, error)
	grpc.ClientStream
}

type synchronizerUpgradeClient struct {
	grpc.ClientStream
}

func (x *synchronizerUpgradeClient) Recv() (*UpgradeResponse, error) {
	m := new(UpgradeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synchronizerClient) Query(ctx context.Context, in *NtpRequest, opts ...grpc.CallOption) (*NtpResponse, error) {
	out := new(NtpResponse)
	err := c.cc.Invoke(ctx, "/trident.Synchronizer/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) GenesisSync(ctx context.Context, in *GenesisSyncRequest, opts ...grpc.CallOption) (*GenesisSyncResponse, error) {
	out := new(GenesisSyncResponse)
	err := c.cc.Invoke(ctx, "/trident.Synchronizer/GenesisSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) KubernetesAPISync(ctx context.Context, in *KubernetesAPISyncRequest, opts ...grpc.CallOption) (*KubernetesAPISyncResponse, error) {
	out := new(KubernetesAPISyncResponse)
	err := c.cc.Invoke(ctx, "/trident.Synchronizer/KubernetesAPISync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) GetKubernetesClusterID(ctx context.Context, in *KubernetesClusterIDRequest, opts ...grpc.CallOption) (*KubernetesClusterIDResponse, error) {
	out := new(KubernetesClusterIDResponse)
	err := c.cc.Invoke(ctx, "/trident.Synchronizer/GetKubernetesClusterID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynchronizerServer is the server API for Synchronizer service.
type SynchronizerServer interface {
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	Push(*SyncRequest, Synchronizer_PushServer) error
	AnalyzerSync(context.Context, *SyncRequest) (*SyncResponse, error)
	Upgrade(*UpgradeRequest, Synchronizer_UpgradeServer) error
	Query(context.Context, *NtpRequest) (*NtpResponse, error)
	GenesisSync(context.Context, *GenesisSyncRequest) (*GenesisSyncResponse, error)
	KubernetesAPISync(context.Context, *KubernetesAPISyncRequest) (*KubernetesAPISyncResponse, error)
	GetKubernetesClusterID(context.Context, *KubernetesClusterIDRequest) (*KubernetesClusterIDResponse, error)
}

// UnimplementedSynchronizerServer can be embedded to have forward compatible implementations.
type UnimplementedSynchronizerServer struct {
}

func (*UnimplementedSynchronizerServer) Sync(ctx context.Context, req *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedSynchronizerServer) Push(req *SyncRequest, srv Synchronizer_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedSynchronizerServer) AnalyzerSync(ctx context.Context, req *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzerSync not implemented")
}
func (*UnimplementedSynchronizerServer) Upgrade(req *UpgradeRequest, srv Synchronizer_UpgradeServer) error {
	return status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (*UnimplementedSynchronizerServer) Query(ctx context.Context, req *NtpRequest) (*NtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedSynchronizerServer) GenesisSync(ctx context.Context, req *GenesisSyncRequest) (*GenesisSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisSync not implemented")
}
func (*UnimplementedSynchronizerServer) KubernetesAPISync(ctx context.Context, req *KubernetesAPISyncRequest) (*KubernetesAPISyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KubernetesAPISync not implemented")
}
func (*UnimplementedSynchronizerServer) GetKubernetesClusterID(ctx context.Context, req *KubernetesClusterIDRequest) (*KubernetesClusterIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesClusterID not implemented")
}

func RegisterSynchronizerServer(s *grpc.Server, srv SynchronizerServer) {
	s.RegisterService(&_Synchronizer_serviceDesc, srv)
}

func _Synchronizer_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trident.Synchronizer/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynchronizerServer).Push(m, &synchronizerPushServer{stream})
}

type Synchronizer_PushServer interface {
	Send(*SyncResponse) error
	grpc.ServerStream
}

type synchronizerPushServer struct {
	grpc.ServerStream
}

func (x *synchronizerPushServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Synchronizer_AnalyzerSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).AnalyzerSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trident.Synchronizer/AnalyzerSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).AnalyzerSync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_Upgrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpgradeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynchronizerServer).Upgrade(m, &synchronizerUpgradeServer{stream})
}

type Synchronizer_UpgradeServer interface {
	Send(*UpgradeResponse) error
	grpc.ServerStream
}

type synchronizerUpgradeServer struct {
	grpc.ServerStream
}

func (x *synchronizerUpgradeServer) Send(m *UpgradeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Synchronizer_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trident.Synchronizer/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).Query(ctx, req.(*NtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_GenesisSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).GenesisSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trident.Synchronizer/GenesisSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).GenesisSync(ctx, req.(*GenesisSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_KubernetesAPISync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubernetesAPISyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).KubernetesAPISync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trident.Synchronizer/KubernetesAPISync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).KubernetesAPISync(ctx, req.(*KubernetesAPISyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_GetKubernetesClusterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubernetesClusterIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).GetKubernetesClusterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trident.Synchronizer/GetKubernetesClusterID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).GetKubernetesClusterID(ctx, req.(*KubernetesClusterIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Synchronizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trident.Synchronizer",
	HandlerType: (*SynchronizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Synchronizer_Sync_Handler,
		},
		{
			MethodName: "AnalyzerSync",
			Handler:    _Synchronizer_AnalyzerSync_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Synchronizer_Query_Handler,
		},
		{
			MethodName: "GenesisSync",
			Handler:    _Synchronizer_GenesisSync_Handler,
		},
		{
			MethodName: "KubernetesAPISync",
			Handler:    _Synchronizer_KubernetesAPISync_Handler,
		},
		{
			MethodName: "GetKubernetesClusterID",
			Handler:    _Synchronizer_GetKubernetesClusterID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Synchronizer_Push_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upgrade",
			Handler:       _Synchronizer_Upgrade_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trident.proto",
}

func (m *CommunicationVtap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunicationVtap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunicationVtap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastActiveTime != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.LastActiveTime))
		i--
		dAtA[i] = 0x10
	}
	if m.VtapId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TsdbReportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsdbReportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TsdbReportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PcapDataMountPath != nil {
		i -= len(*m.PcapDataMountPath)
		copy(dAtA[i:], *m.PcapDataMountPath)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.PcapDataMountPath)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KubernetesClusterId != nil {
		i -= len(*m.KubernetesClusterId)
		copy(dAtA[i:], *m.KubernetesClusterId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.KubernetesClusterId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.TsdbReportInfo != nil {
		{
			size, err := m.TsdbReportInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrident(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.KernelVersion != nil {
		i -= len(*m.KernelVersion)
		copy(dAtA[i:], *m.KernelVersion)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.KernelVersion)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.Os != nil {
		i -= len(*m.Os)
		copy(dAtA[i:], *m.Os)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Os)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.Arch != nil {
		i -= len(*m.Arch)
		copy(dAtA[i:], *m.Arch)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Arch)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.MemorySize != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.MemorySize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.CpuNum != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.CpuNum))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.CommunicationVtaps) > 0 {
		for iNdEx := len(m.CommunicationVtaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommunicationVtaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.VtapGroupIdRequest != nil {
		i -= len(*m.VtapGroupIdRequest)
		copy(dAtA[i:], *m.VtapGroupIdRequest)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.VtapGroupIdRequest)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.CtrlMac != nil {
		i -= len(*m.CtrlMac)
		copy(dAtA[i:], *m.CtrlMac)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.CtrlMac)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.HostIps) > 0 {
		for iNdEx := len(m.HostIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HostIps[iNdEx])
			copy(dAtA[i:], m.HostIps[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.HostIps[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.Host != nil {
		i -= len(*m.Host)
		copy(dAtA[i:], *m.Host)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Host)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.CtrlIp != nil {
		i -= len(*m.CtrlIp)
		copy(dAtA[i:], *m.CtrlIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.CtrlIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.VersionGroups != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VersionGroups))
		i--
		dAtA[i] = 0x58
	}
	if m.VersionAcls != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VersionAcls))
		i--
		dAtA[i] = 0x50
	}
	if m.VersionPlatformData != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VersionPlatformData))
		i--
		dAtA[i] = 0x48
	}
	if m.TapMode != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TapMode))
		i--
		dAtA[i] = 0x40
	}
	if m.ProcessName != nil {
		i -= len(*m.ProcessName)
		copy(dAtA[i:], *m.ProcessName)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ProcessName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Exception != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Exception))
		i--
		dAtA[i] = 0x30
	}
	if m.Revision != nil {
		i -= len(*m.Revision)
		copy(dAtA[i:], *m.Revision)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Revision)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.ConfigAccepted != nil {
		i--
		if *m.ConfigAccepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BootTime != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.BootTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TapType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TapType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TapType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TapPort != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TapPort))
		i--
		dAtA[i] = 0x28
	}
	if m.SourceIp != nil {
		i -= len(*m.SourceIp)
		copy(dAtA[i:], *m.SourceIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.SourceIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.Vlan != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Vlan))
		i--
		dAtA[i] = 0x18
	}
	if m.PacketType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PacketType))
		i--
		dAtA[i] = 0x10
	}
	if m.TapType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TapType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LocalConfig != nil {
		i -= len(*m.LocalConfig)
		copy(dAtA[i:], *m.LocalConfig)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.LocalConfig)))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xf2
	}
	if m.TapMode != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TapMode))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xb8
	}
	if m.LogFileSize != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.LogFileSize))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xb0
	}
	if m.SysFreeMemoryLimit != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.SysFreeMemoryLimit))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xa8
	}
	if m.PacketSequenceFlag != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PacketSequenceFlag))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xd0
	}
	if m.ExternalAgentHttpProxyPort != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.ExternalAgentHttpProxyPort))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xb8
	}
	if m.ExternalAgentHttpProxyEnabled != nil {
		i--
		if *m.ExternalAgentHttpProxyEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xb0
	}
	if m.L7MetricsEnabled != nil {
		i--
		if *m.L7MetricsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xa8
	}
	if m.L4PerformanceEnabled != nil {
		i--
		if *m.L4PerformanceEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xa0
	}
	if len(m.L7LogStoreTapTypes) > 0 {
		for iNdEx := len(m.L7LogStoreTapTypes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrident(dAtA, i, uint64(m.L7LogStoreTapTypes[iNdEx]))
			i--
			dAtA[i] = 0x19
			i--
			dAtA[i] = 0x98
		}
	}
	if m.HttpLogXRequestId != nil {
		i -= len(*m.HttpLogXRequestId)
		copy(dAtA[i:], *m.HttpLogXRequestId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.HttpLogXRequestId)))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0x9a
	}
	if m.HttpLogSpanId != nil {
		i -= len(*m.HttpLogSpanId)
		copy(dAtA[i:], *m.HttpLogSpanId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.HttpLogSpanId)))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0x92
	}
	if m.L7LogCollectNpsThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.L7LogCollectNpsThreshold))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0x88
	}
	if m.L4LogCollectNpsThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.L4LogCollectNpsThreshold))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0x80
	}
	if m.L7LogPacketSize != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.L7LogPacketSize))
		i--
		dAtA[i] = 0x12
		i--
		dAtA[i] = 0xf8
	}
	if m.HttpLogTraceId != nil {
		i -= len(*m.HttpLogTraceId)
		copy(dAtA[i:], *m.HttpLogTraceId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.HttpLogTraceId)))
		i--
		dAtA[i] = 0x12
		i--
		dAtA[i] = 0xf2
	}
	if m.HttpLogProxyClient != nil {
		i -= len(*m.HttpLogProxyClient)
		copy(dAtA[i:], *m.HttpLogProxyClient)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.HttpLogProxyClient)))
		i--
		dAtA[i] = 0x12
		i--
		dAtA[i] = 0xea
	}
	if len(m.DecapType) > 0 {
		for iNdEx := len(m.DecapType) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrident(dAtA, i, uint64(m.DecapType[iNdEx]))
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xe0
		}
	}
	if m.NtpEnabled != nil {
		i--
		if *m.NtpEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.LogRetention != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.LogRetention))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.ProcessThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.ProcessThreshold))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.ThreadThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.ThreadThreshold))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.LogLevel != nil {
		i -= len(*m.LogLevel)
		copy(dAtA[i:], *m.LogLevel)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.LogLevel)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.LogThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.LogThreshold))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.LibvirtXmlPath != nil {
		i -= len(*m.LibvirtXmlPath)
		copy(dAtA[i:], *m.LibvirtXmlPath)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.LibvirtXmlPath)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.InactiveIpEnabled != nil {
		i--
		if *m.InactiveIpEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.CaptureBpf != nil {
		i -= len(*m.CaptureBpf)
		copy(dAtA[i:], *m.CaptureBpf)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.CaptureBpf)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.InactiveServerPortEnabled != nil {
		i--
		if *m.InactiveServerPortEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.CapturePacketSize != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.CapturePacketSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.PcapDataRetention != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PcapDataRetention))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.NpbSocketType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.NpbSocketType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.CompressorSocketType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.CompressorSocketType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.CollectorSocketType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.CollectorSocketType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.TridentType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TridentType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.VtapId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.ProxyControllerPort != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.ProxyControllerPort))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.AnalyzerPort != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.AnalyzerPort))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.EpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.EpcId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.PodClusterId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodClusterId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.RegionId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.RegionId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.ProxyControllerIp != nil {
		i -= len(*m.ProxyControllerIp)
		copy(dAtA[i:], *m.ProxyControllerIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ProxyControllerIp)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.MaxEscapeSeconds != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.MaxEscapeSeconds))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.AnalyzerIp != nil {
		i -= len(*m.AnalyzerIp)
		copy(dAtA[i:], *m.AnalyzerIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.AnalyzerIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.DebugEnabled != nil {
		i--
		if *m.DebugEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.VtapFlow_1SEnabled != nil {
		i--
		if *m.VtapFlow_1SEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.IfMacSource != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.IfMacSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.NpbDedupEnabled != nil {
		i--
		if *m.NpbDedupEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.L4LogTapTypes) > 0 {
		for iNdEx := len(m.L4LogTapTypes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrident(dAtA, i, uint64(m.L4LogTapTypes[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb8
		}
	}
	if m.NpbVlanMode != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.NpbVlanMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CaptureSocketType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.CaptureSocketType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.BandwidthProbeInterval != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.BandwidthProbeInterval))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ServerTxBandwidthThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.ServerTxBandwidthThreshold))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.KubernetesApiEnabled != nil {
		i--
		if *m.KubernetesApiEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PlatformEnabled != nil {
		i--
		if *m.PlatformEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PacketHeaderEnabled != nil {
		i--
		if *m.PacketHeaderEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.CollectorEnabled != nil {
		i--
		if *m.CollectorEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.NpbBpsThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.NpbBpsThreshold))
		i--
		dAtA[i] = 0x68
	}
	if m.Mtu != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Mtu))
		i--
		dAtA[i] = 0x60
	}
	if m.OutputVlan != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.OutputVlan))
		i--
		dAtA[i] = 0x58
	}
	if m.RsyslogEnabled != nil {
		i--
		if *m.RsyslogEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Host != nil {
		i -= len(*m.Host)
		copy(dAtA[i:], *m.Host)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Host)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TapInterfaceRegex != nil {
		i -= len(*m.TapInterfaceRegex)
		copy(dAtA[i:], *m.TapInterfaceRegex)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.TapInterfaceRegex)))
		i--
		dAtA[i] = 0x42
	}
	if m.GlobalPpsThreshold != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.GlobalPpsThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.StatsInterval != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.StatsInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.SyncInterval != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.SyncInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxMemory != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.MaxMemory))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxCpus != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.MaxCpus))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Segment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Segment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Segment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InterfaceId) > 0 {
		for iNdEx := len(m.InterfaceId) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrident(dAtA, i, uint64(m.InterfaceId[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.Mac) > 0 {
		for iNdEx := len(m.Mac) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mac[iNdEx])
			copy(dAtA[i:], m.Mac[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.Mac[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IpResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SubnetId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.SubnetId))
		i--
		dAtA[i] = 0x18
	}
	if m.Masklen != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Masklen))
		i--
		dAtA[i] = 0x10
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsVipInterface != nil {
		i--
		if *m.IsVipInterface {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.PodClusterId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodClusterId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.PodId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.PodNsId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodNsId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.PodGroupId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodGroupId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.AzId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.AzId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.PodNodeId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodNodeId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Mac != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Mac))
		i--
		dAtA[i] = 0x58
	}
	if m.RegionId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.RegionId))
		i--
		dAtA[i] = 0x50
	}
	if m.LaunchServerId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.LaunchServerId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.IpResources) > 0 {
		for iNdEx := len(m.IpResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IpResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.LaunchServer != nil {
		i -= len(*m.LaunchServer)
		copy(dAtA[i:], *m.LaunchServer)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.LaunchServer)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.EpcId))
		i--
		dAtA[i] = 0x30
	}
	if m.IfType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.IfType))
		i--
		dAtA[i] = 0x20
	}
	if m.DeviceId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.DeviceId))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviceType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.DeviceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BusinessId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.BusinessId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.IpRanges) > 0 {
		for iNdEx := len(m.IpRanges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpRanges[iNdEx])
			copy(dAtA[i:], m.IpRanges[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.IpRanges[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Ips) > 0 {
		for iNdEx := len(m.Ips) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ips[iNdEx])
			copy(dAtA[i:], m.Ips[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.Ips[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Type != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.EpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.EpcId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x50
	}
	if m.Type != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x48
	}
	if m.ServerPorts != nil {
		i -= len(*m.ServerPorts)
		copy(dAtA[i:], *m.ServerPorts)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ServerPorts)))
		i--
		dAtA[i] = 0x42
	}
	if m.Protocol != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Protocol))
		i--
		dAtA[i] = 0x38
	}
	if len(m.IpRanges) > 0 {
		for iNdEx := len(m.IpRanges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpRanges[iNdEx])
			copy(dAtA[i:], m.IpRanges[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.IpRanges[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Ips) > 0 {
		for iNdEx := len(m.Ips) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ips[iNdEx])
			copy(dAtA[i:], m.Ips[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.Ips[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.EpcId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Groups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Groups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Groups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Svcs) > 0 {
		for iNdEx := len(m.Svcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Svcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeerConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemoteEpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.RemoteEpcId))
		i--
		dAtA[i] = 0x18
	}
	if m.LocalEpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.LocalEpcId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Cidr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cidr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cidr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsVip != nil {
		i--
		if *m.IsVip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TunnelId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TunnelId))
		i--
		dAtA[i] = 0x38
	}
	if m.AzId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.AzId))
		i--
		dAtA[i] = 0x30
	}
	if m.RegionId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.RegionId))
		i--
		dAtA[i] = 0x28
	}
	if m.SubnetId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.SubnetId))
		i--
		dAtA[i] = 0x20
	}
	if m.EpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.EpcId))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Prefix != nil {
		i -= len(*m.Prefix)
		copy(dAtA[i:], *m.Prefix)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlatformData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlatformData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cidrs) > 0 {
		for iNdEx := len(m.Cidrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cidrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PeerConnections) > 0 {
		for iNdEx := len(m.PeerConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeerConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NpbAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpbAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpbAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TunnelIpId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TunnelIpId))
		i--
		dAtA[i] = 0x38
	}
	if m.NpbAclGroupId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.NpbAclGroupId))
		i--
		dAtA[i] = 0x30
	}
	if m.PayloadSlice != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PayloadSlice))
		i--
		dAtA[i] = 0x28
	}
	if m.TapSide != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TapSide))
		i--
		dAtA[i] = 0x20
	}
	if m.TunnelIp != nil {
		i -= len(*m.TunnelIp)
		copy(dAtA[i:], *m.TunnelIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.TunnelIp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TunnelId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TunnelId))
		i--
		dAtA[i] = 0x10
	}
	if m.TunnelType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TunnelType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowAcl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowAcl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowAcl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DstGroupIds) > 0 {
		for iNdEx := len(m.DstGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrident(dAtA, i, uint64(m.DstGroupIds[iNdEx]))
			i--
			dAtA[i] = 0x68
		}
	}
	if len(m.SrcGroupIds) > 0 {
		for iNdEx := len(m.SrcGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrident(dAtA, i, uint64(m.SrcGroupIds[iNdEx]))
			i--
			dAtA[i] = 0x60
		}
	}
	if len(m.NpbActions) > 0 {
		for iNdEx := len(m.NpbActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NpbActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Vlan != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Vlan))
		i--
		dAtA[i] = 0x48
	}
	if m.DstPorts != nil {
		i -= len(*m.DstPorts)
		copy(dAtA[i:], *m.DstPorts)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.DstPorts)))
		i--
		dAtA[i] = 0x42
	}
	if m.SrcPorts != nil {
		i -= len(*m.SrcPorts)
		copy(dAtA[i:], *m.SrcPorts)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.SrcPorts)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Protocol != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Protocol))
		i--
		dAtA[i] = 0x30
	}
	if m.TapType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TapType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowAcls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowAcls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowAcls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FlowAcl) > 0 {
		for iNdEx := len(m.FlowAcl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlowAcl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodIp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PodClusterId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodClusterId))
		i--
		dAtA[i] = 0x28
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x22
	}
	if m.EpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.EpcId))
		i--
		dAtA[i] = 0x18
	}
	if m.PodName != nil {
		i -= len(*m.PodName)
		copy(dAtA[i:], *m.PodName)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.PodName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PodId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VtapIp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VtapIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VtapIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PodClusterId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PodClusterId))
		i--
		dAtA[i] = 0x20
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpcId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.EpcId))
		i--
		dAtA[i] = 0x10
	}
	if m.VtapId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SkipInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkipInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkipInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mac != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Mac))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SkipInterface) > 0 {
		for iNdEx := len(m.SkipInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkipInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.VtapIps) > 0 {
		for iNdEx := len(m.VtapIps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VtapIps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.PodIps) > 0 {
		for iNdEx := len(m.PodIps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodIps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.TapTypes) > 0 {
		for iNdEx := len(m.TapTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TapTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Groups != nil {
		i -= len(m.Groups)
		copy(dAtA[i:], m.Groups)
		i = encodeVarintTrident(dAtA, i, uint64(len(m.Groups)))
		i--
		dAtA[i] = 0x7a
	}
	if m.FlowAcls != nil {
		i -= len(m.FlowAcls)
		copy(dAtA[i:], m.FlowAcls)
		i = encodeVarintTrident(dAtA, i, uint64(len(m.FlowAcls)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PlatformData != nil {
		i -= len(m.PlatformData)
		copy(dAtA[i:], m.PlatformData)
		i = encodeVarintTrident(dAtA, i, uint64(len(m.PlatformData)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.RemoteSegments) > 0 {
		for iNdEx := len(m.RemoteSegments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoteSegments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.LocalSegments) > 0 {
		for iNdEx := len(m.LocalSegments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LocalSegments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.VersionGroups != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VersionGroups))
		i--
		dAtA[i] = 0x40
	}
	if m.VersionAcls != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VersionAcls))
		i--
		dAtA[i] = 0x38
	}
	if m.VersionPlatformData != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VersionPlatformData))
		i--
		dAtA[i] = 0x30
	}
	if m.SelfUpdateUrl != nil {
		i -= len(*m.SelfUpdateUrl)
		copy(dAtA[i:], *m.SelfUpdateUrl)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.SelfUpdateUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Revision != nil {
		i -= len(*m.Revision)
		copy(dAtA[i:], *m.Revision)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Revision)))
		i--
		dAtA[i] = 0x22
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrident(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CtrlMac != nil {
		i -= len(*m.CtrlMac)
		copy(dAtA[i:], *m.CtrlMac)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.CtrlMac)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CtrlIp != nil {
		i -= len(*m.CtrlIp)
		copy(dAtA[i:], *m.CtrlIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.CtrlIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PktCount != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.PktCount))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalLen != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TotalLen))
		i--
		dAtA[i] = 0x20
	}
	if m.Md5 != nil {
		i -= len(*m.Md5)
		copy(dAtA[i:], *m.Md5)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Md5)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Content != nil {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTrident(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NtpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NtpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NtpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i = encodeVarintTrident(dAtA, i, uint64(len(m.Request)))
		i--
		dAtA[i] = 0x52
	}
	if m.CtrlIp != nil {
		i -= len(*m.CtrlIp)
		copy(dAtA[i:], *m.CtrlIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.CtrlIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NtpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NtpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NtpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Response != nil {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintTrident(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisPlatformData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisPlatformData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisPlatformData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.RawIpAddrs) > 0 {
		for iNdEx := len(m.RawIpAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawIpAddrs[iNdEx])
			copy(dAtA[i:], m.RawIpAddrs[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.RawIpAddrs[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.LldpInfo) > 0 {
		for iNdEx := len(m.LldpInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LldpInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.RawVlanConfig != nil {
		i -= len(*m.RawVlanConfig)
		copy(dAtA[i:], *m.RawVlanConfig)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.RawVlanConfig)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.RawBrctlShow != nil {
		i -= len(*m.RawBrctlShow)
		copy(dAtA[i:], *m.RawBrctlShow)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.RawBrctlShow)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RawOvsPorts != nil {
		i -= len(*m.RawOvsPorts)
		copy(dAtA[i:], *m.RawOvsPorts)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.RawOvsPorts)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RawOvsInterfaces != nil {
		i -= len(*m.RawOvsInterfaces)
		copy(dAtA[i:], *m.RawOvsInterfaces)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.RawOvsInterfaces)))
		i--
		dAtA[i] = 0x72
	}
	if m.RawVmStates != nil {
		i -= len(*m.RawVmStates)
		copy(dAtA[i:], *m.RawVmStates)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.RawVmStates)))
		i--
		dAtA[i] = 0x6a
	}
	if m.RawAllVmXml != nil {
		i -= len(*m.RawAllVmXml)
		copy(dAtA[i:], *m.RawAllVmXml)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.RawAllVmXml)))
		i--
		dAtA[i] = 0x62
	}
	if m.RawHostname != nil {
		i -= len(*m.RawHostname)
		copy(dAtA[i:], *m.RawHostname)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.RawHostname)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PlatformEnabled != nil {
		i--
		if *m.PlatformEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Ips) > 0 {
		for iNdEx := len(m.Ips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	return len(dAtA) - i, nil
}

func (m *Ip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortUuid != nil {
		i -= len(*m.PortUuid)
		copy(dAtA[i:], *m.PortUuid)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.PortUuid)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Ip != nil {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTrident(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mac != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Mac))
		i--
		dAtA[i] = 0x18
	}
	if m.LastSeen != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.LastSeen))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Lldp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lldp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lldp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortDescription != nil {
		i -= len(*m.PortDescription)
		copy(dAtA[i:], *m.PortDescription)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.PortDescription)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PortId != nil {
		i -= len(*m.PortId)
		copy(dAtA[i:], *m.PortId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.PortId)))
		i--
		dAtA[i] = 0x52
	}
	if m.ManagementAddress != nil {
		i -= len(*m.ManagementAddress)
		copy(dAtA[i:], *m.ManagementAddress)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ManagementAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SystemName != nil {
		i -= len(*m.SystemName)
		copy(dAtA[i:], *m.SystemName)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.SystemName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeviceName != nil {
		i -= len(*m.DeviceName)
		copy(dAtA[i:], *m.DeviceName)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.DeviceName)))
		i--
		dAtA[i] = 0x32
	}
	if m.TapIndex != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TapIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.DeviceId != nil {
		i -= len(*m.DeviceId)
		copy(dAtA[i:], *m.DeviceId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.DeviceId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		for iNdEx := len(m.Ip) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ip[iNdEx])
			copy(dAtA[i:], m.Ip[iNdEx])
			i = encodeVarintTrident(dAtA, i, uint64(len(m.Ip[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Mac != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Mac))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlatformData != nil {
		{
			size, err := m.PlatformData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrident(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.NatIp != nil {
		i -= len(*m.NatIp)
		copy(dAtA[i:], *m.NatIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.NatIp)))
		i--
		dAtA[i] = 0x32
	}
	if m.KubernetesClusterId != nil {
		i -= len(*m.KubernetesClusterId)
		copy(dAtA[i:], *m.KubernetesClusterId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.KubernetesClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VtapId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceIp != nil {
		i -= len(*m.SourceIp)
		copy(dAtA[i:], *m.SourceIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.SourceIp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TridentType != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.TridentType))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesAPISyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesAPISyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesAPISyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrident(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.SourceIp != nil {
		i -= len(*m.SourceIp)
		copy(dAtA[i:], *m.SourceIp)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.SourceIp)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VtapId != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.VtapId))
		i--
		dAtA[i] = 0x20
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Version != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterId != nil {
		i -= len(*m.ClusterId)
		copy(dAtA[i:], *m.ClusterId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesAPISyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesAPISyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesAPISyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != nil {
		i = encodeVarintTrident(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesClusterIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesClusterIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesClusterIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CaMd5 != nil {
		i -= len(*m.CaMd5)
		copy(dAtA[i:], *m.CaMd5)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.CaMd5)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesClusterIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesClusterIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesClusterIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClusterId != nil {
		i -= len(*m.ClusterId)
		copy(dAtA[i:], *m.ClusterId)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintTrident(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrident(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrident(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommunicationVtap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VtapId != nil {
		n += 1 + sovTrident(uint64(*m.VtapId))
	}
	if m.LastActiveTime != nil {
		n += 1 + sovTrident(uint64(*m.LastActiveTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TsdbReportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PcapDataMountPath != nil {
		l = len(*m.PcapDataMountPath)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BootTime != nil {
		n += 1 + sovTrident(uint64(*m.BootTime))
	}
	if m.ConfigAccepted != nil {
		n += 2
	}
	if m.State != nil {
		n += 1 + sovTrident(uint64(*m.State))
	}
	if m.Revision != nil {
		l = len(*m.Revision)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Exception != nil {
		n += 1 + sovTrident(uint64(*m.Exception))
	}
	if m.ProcessName != nil {
		l = len(*m.ProcessName)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.TapMode != nil {
		n += 1 + sovTrident(uint64(*m.TapMode))
	}
	if m.VersionPlatformData != nil {
		n += 1 + sovTrident(uint64(*m.VersionPlatformData))
	}
	if m.VersionAcls != nil {
		n += 1 + sovTrident(uint64(*m.VersionAcls))
	}
	if m.VersionGroups != nil {
		n += 1 + sovTrident(uint64(*m.VersionGroups))
	}
	if m.CtrlIp != nil {
		l = len(*m.CtrlIp)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.Host != nil {
		l = len(*m.Host)
		n += 2 + l + sovTrident(uint64(l))
	}
	if len(m.HostIps) > 0 {
		for _, s := range m.HostIps {
			l = len(s)
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if m.CtrlMac != nil {
		l = len(*m.CtrlMac)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.VtapGroupIdRequest != nil {
		l = len(*m.VtapGroupIdRequest)
		n += 2 + l + sovTrident(uint64(l))
	}
	if len(m.CommunicationVtaps) > 0 {
		for _, e := range m.CommunicationVtaps {
			l = e.Size()
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if m.CpuNum != nil {
		n += 2 + sovTrident(uint64(*m.CpuNum))
	}
	if m.MemorySize != nil {
		n += 2 + sovTrident(uint64(*m.MemorySize))
	}
	if m.Arch != nil {
		l = len(*m.Arch)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.Os != nil {
		l = len(*m.Os)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.KernelVersion != nil {
		l = len(*m.KernelVersion)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.TsdbReportInfo != nil {
		l = m.TsdbReportInfo.Size()
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.KubernetesClusterId != nil {
		l = len(*m.KubernetesClusterId)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TapType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TapType != nil {
		n += 1 + sovTrident(uint64(*m.TapType))
	}
	if m.PacketType != nil {
		n += 1 + sovTrident(uint64(*m.PacketType))
	}
	if m.Vlan != nil {
		n += 1 + sovTrident(uint64(*m.Vlan))
	}
	if m.SourceIp != nil {
		l = len(*m.SourceIp)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.TapPort != nil {
		n += 1 + sovTrident(uint64(*m.TapPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.MaxCpus != nil {
		n += 1 + sovTrident(uint64(*m.MaxCpus))
	}
	if m.MaxMemory != nil {
		n += 1 + sovTrident(uint64(*m.MaxMemory))
	}
	if m.SyncInterval != nil {
		n += 1 + sovTrident(uint64(*m.SyncInterval))
	}
	if m.StatsInterval != nil {
		n += 1 + sovTrident(uint64(*m.StatsInterval))
	}
	if m.GlobalPpsThreshold != nil {
		n += 1 + sovTrident(uint64(*m.GlobalPpsThreshold))
	}
	if m.TapInterfaceRegex != nil {
		l = len(*m.TapInterfaceRegex)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Host != nil {
		l = len(*m.Host)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.RsyslogEnabled != nil {
		n += 2
	}
	if m.OutputVlan != nil {
		n += 1 + sovTrident(uint64(*m.OutputVlan))
	}
	if m.Mtu != nil {
		n += 1 + sovTrident(uint64(*m.Mtu))
	}
	if m.NpbBpsThreshold != nil {
		n += 1 + sovTrident(uint64(*m.NpbBpsThreshold))
	}
	if m.CollectorEnabled != nil {
		n += 2
	}
	if m.PacketHeaderEnabled != nil {
		n += 2
	}
	if m.PlatformEnabled != nil {
		n += 3
	}
	if m.KubernetesApiEnabled != nil {
		n += 3
	}
	if m.ServerTxBandwidthThreshold != nil {
		n += 2 + sovTrident(uint64(*m.ServerTxBandwidthThreshold))
	}
	if m.BandwidthProbeInterval != nil {
		n += 2 + sovTrident(uint64(*m.BandwidthProbeInterval))
	}
	if m.CaptureSocketType != nil {
		n += 2 + sovTrident(uint64(*m.CaptureSocketType))
	}
	if m.NpbVlanMode != nil {
		n += 2 + sovTrident(uint64(*m.NpbVlanMode))
	}
	if len(m.L4LogTapTypes) > 0 {
		for _, e := range m.L4LogTapTypes {
			n += 2 + sovTrident(uint64(e))
		}
	}
	if m.NpbDedupEnabled != nil {
		n += 3
	}
	if m.IfMacSource != nil {
		n += 2 + sovTrident(uint64(*m.IfMacSource))
	}
	if m.VtapFlow_1SEnabled != nil {
		n += 3
	}
	if m.DebugEnabled != nil {
		n += 3
	}
	if m.AnalyzerIp != nil {
		l = len(*m.AnalyzerIp)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.MaxEscapeSeconds != nil {
		n += 2 + sovTrident(uint64(*m.MaxEscapeSeconds))
	}
	if m.ProxyControllerIp != nil {
		l = len(*m.ProxyControllerIp)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.RegionId != nil {
		n += 2 + sovTrident(uint64(*m.RegionId))
	}
	if m.PodClusterId != nil {
		n += 2 + sovTrident(uint64(*m.PodClusterId))
	}
	if m.EpcId != nil {
		n += 2 + sovTrident(uint64(*m.EpcId))
	}
	if m.AnalyzerPort != nil {
		n += 2 + sovTrident(uint64(*m.AnalyzerPort))
	}
	if m.ProxyControllerPort != nil {
		n += 2 + sovTrident(uint64(*m.ProxyControllerPort))
	}
	if m.VtapId != nil {
		n += 2 + sovTrident(uint64(*m.VtapId))
	}
	if m.TridentType != nil {
		n += 2 + sovTrident(uint64(*m.TridentType))
	}
	if m.CollectorSocketType != nil {
		n += 2 + sovTrident(uint64(*m.CollectorSocketType))
	}
	if m.CompressorSocketType != nil {
		n += 2 + sovTrident(uint64(*m.CompressorSocketType))
	}
	if m.NpbSocketType != nil {
		n += 2 + sovTrident(uint64(*m.NpbSocketType))
	}
	if m.PcapDataRetention != nil {
		n += 2 + sovTrident(uint64(*m.PcapDataRetention))
	}
	if m.CapturePacketSize != nil {
		n += 2 + sovTrident(uint64(*m.CapturePacketSize))
	}
	if m.InactiveServerPortEnabled != nil {
		n += 3
	}
	if m.CaptureBpf != nil {
		l = len(*m.CaptureBpf)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.InactiveIpEnabled != nil {
		n += 3
	}
	if m.LibvirtXmlPath != nil {
		l = len(*m.LibvirtXmlPath)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.LogThreshold != nil {
		n += 2 + sovTrident(uint64(*m.LogThreshold))
	}
	if m.LogLevel != nil {
		l = len(*m.LogLevel)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.ThreadThreshold != nil {
		n += 2 + sovTrident(uint64(*m.ThreadThreshold))
	}
	if m.ProcessThreshold != nil {
		n += 2 + sovTrident(uint64(*m.ProcessThreshold))
	}
	if m.LogRetention != nil {
		n += 2 + sovTrident(uint64(*m.LogRetention))
	}
	if m.NtpEnabled != nil {
		n += 3
	}
	if len(m.DecapType) > 0 {
		for _, e := range m.DecapType {
			n += 2 + sovTrident(uint64(e))
		}
	}
	if m.HttpLogProxyClient != nil {
		l = len(*m.HttpLogProxyClient)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.HttpLogTraceId != nil {
		l = len(*m.HttpLogTraceId)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.L7LogPacketSize != nil {
		n += 2 + sovTrident(uint64(*m.L7LogPacketSize))
	}
	if m.L4LogCollectNpsThreshold != nil {
		n += 2 + sovTrident(uint64(*m.L4LogCollectNpsThreshold))
	}
	if m.L7LogCollectNpsThreshold != nil {
		n += 2 + sovTrident(uint64(*m.L7LogCollectNpsThreshold))
	}
	if m.HttpLogSpanId != nil {
		l = len(*m.HttpLogSpanId)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.HttpLogXRequestId != nil {
		l = len(*m.HttpLogXRequestId)
		n += 2 + l + sovTrident(uint64(l))
	}
	if len(m.L7LogStoreTapTypes) > 0 {
		for _, e := range m.L7LogStoreTapTypes {
			n += 2 + sovTrident(uint64(e))
		}
	}
	if m.L4PerformanceEnabled != nil {
		n += 3
	}
	if m.L7MetricsEnabled != nil {
		n += 3
	}
	if m.ExternalAgentHttpProxyEnabled != nil {
		n += 3
	}
	if m.ExternalAgentHttpProxyPort != nil {
		n += 2 + sovTrident(uint64(*m.ExternalAgentHttpProxyPort))
	}
	if m.PacketSequenceFlag != nil {
		n += 2 + sovTrident(uint64(*m.PacketSequenceFlag))
	}
	if m.SysFreeMemoryLimit != nil {
		n += 2 + sovTrident(uint64(*m.SysFreeMemoryLimit))
	}
	if m.LogFileSize != nil {
		n += 2 + sovTrident(uint64(*m.LogFileSize))
	}
	if m.TapMode != nil {
		n += 2 + sovTrident(uint64(*m.TapMode))
	}
	if m.LocalConfig != nil {
		l = len(*m.LocalConfig)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Segment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTrident(uint64(*m.Id))
	}
	if len(m.Mac) > 0 {
		for _, s := range m.Mac {
			l = len(s)
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.InterfaceId) > 0 {
		for _, e := range m.InterfaceId {
			n += 1 + sovTrident(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IpResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Masklen != nil {
		n += 1 + sovTrident(uint64(*m.Masklen))
	}
	if m.SubnetId != nil {
		n += 1 + sovTrident(uint64(*m.SubnetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTrident(uint64(*m.Id))
	}
	if m.DeviceType != nil {
		n += 1 + sovTrident(uint64(*m.DeviceType))
	}
	if m.DeviceId != nil {
		n += 1 + sovTrident(uint64(*m.DeviceId))
	}
	if m.IfType != nil {
		n += 1 + sovTrident(uint64(*m.IfType))
	}
	if m.EpcId != nil {
		n += 1 + sovTrident(uint64(*m.EpcId))
	}
	if m.LaunchServer != nil {
		l = len(*m.LaunchServer)
		n += 1 + l + sovTrident(uint64(l))
	}
	if len(m.IpResources) > 0 {
		for _, e := range m.IpResources {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.LaunchServerId != nil {
		n += 1 + sovTrident(uint64(*m.LaunchServerId))
	}
	if m.RegionId != nil {
		n += 1 + sovTrident(uint64(*m.RegionId))
	}
	if m.Mac != nil {
		n += 1 + sovTrident(uint64(*m.Mac))
	}
	if m.PodNodeId != nil {
		n += 2 + sovTrident(uint64(*m.PodNodeId))
	}
	if m.AzId != nil {
		n += 2 + sovTrident(uint64(*m.AzId))
	}
	if m.PodGroupId != nil {
		n += 2 + sovTrident(uint64(*m.PodGroupId))
	}
	if m.PodNsId != nil {
		n += 2 + sovTrident(uint64(*m.PodNsId))
	}
	if m.PodId != nil {
		n += 2 + sovTrident(uint64(*m.PodId))
	}
	if m.PodClusterId != nil {
		n += 2 + sovTrident(uint64(*m.PodClusterId))
	}
	if m.IsVipInterface != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTrident(uint64(*m.Id))
	}
	if m.EpcId != nil {
		n += 1 + sovTrident(uint64(*m.EpcId))
	}
	if m.Type != nil {
		n += 1 + sovTrident(uint64(*m.Type))
	}
	if len(m.Ips) > 0 {
		for _, s := range m.Ips {
			l = len(s)
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.IpRanges) > 0 {
		for _, s := range m.IpRanges {
			l = len(s)
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.BusinessId != nil {
		n += 1 + sovTrident(uint64(*m.BusinessId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpcId != nil {
		n += 1 + sovTrident(uint64(*m.EpcId))
	}
	if len(m.Ips) > 0 {
		for _, s := range m.Ips {
			l = len(s)
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.IpRanges) > 0 {
		for _, s := range m.IpRanges {
			l = len(s)
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.Protocol != nil {
		n += 1 + sovTrident(uint64(*m.Protocol))
	}
	if m.ServerPorts != nil {
		l = len(*m.ServerPorts)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTrident(uint64(*m.Type))
	}
	if m.Id != nil {
		n += 1 + sovTrident(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Groups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.Svcs) > 0 {
		for _, e := range m.Svcs {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTrident(uint64(*m.Id))
	}
	if m.LocalEpcId != nil {
		n += 1 + sovTrident(uint64(*m.LocalEpcId))
	}
	if m.RemoteEpcId != nil {
		n += 1 + sovTrident(uint64(*m.RemoteEpcId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cidr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = len(*m.Prefix)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTrident(uint64(*m.Type))
	}
	if m.EpcId != nil {
		n += 1 + sovTrident(uint64(*m.EpcId))
	}
	if m.SubnetId != nil {
		n += 1 + sovTrident(uint64(*m.SubnetId))
	}
	if m.RegionId != nil {
		n += 1 + sovTrident(uint64(*m.RegionId))
	}
	if m.AzId != nil {
		n += 1 + sovTrident(uint64(*m.AzId))
	}
	if m.TunnelId != nil {
		n += 1 + sovTrident(uint64(*m.TunnelId))
	}
	if m.IsVip != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlatformData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.PeerConnections) > 0 {
		for _, e := range m.PeerConnections {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.Cidrs) > 0 {
		for _, e := range m.Cidrs {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NpbAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelType != nil {
		n += 1 + sovTrident(uint64(*m.TunnelType))
	}
	if m.TunnelId != nil {
		n += 1 + sovTrident(uint64(*m.TunnelId))
	}
	if m.TunnelIp != nil {
		l = len(*m.TunnelIp)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.TapSide != nil {
		n += 1 + sovTrident(uint64(*m.TapSide))
	}
	if m.PayloadSlice != nil {
		n += 1 + sovTrident(uint64(*m.PayloadSlice))
	}
	if m.NpbAclGroupId != nil {
		n += 1 + sovTrident(uint64(*m.NpbAclGroupId))
	}
	if m.TunnelIpId != nil {
		n += 1 + sovTrident(uint64(*m.TunnelIpId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlowAcl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTrident(uint64(*m.Id))
	}
	if m.TapType != nil {
		n += 1 + sovTrident(uint64(*m.TapType))
	}
	if m.Protocol != nil {
		n += 1 + sovTrident(uint64(*m.Protocol))
	}
	if m.SrcPorts != nil {
		l = len(*m.SrcPorts)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.DstPorts != nil {
		l = len(*m.DstPorts)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Vlan != nil {
		n += 1 + sovTrident(uint64(*m.Vlan))
	}
	if len(m.NpbActions) > 0 {
		for _, e := range m.NpbActions {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.SrcGroupIds) > 0 {
		for _, e := range m.SrcGroupIds {
			n += 1 + sovTrident(uint64(e))
		}
	}
	if len(m.DstGroupIds) > 0 {
		for _, e := range m.DstGroupIds {
			n += 1 + sovTrident(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlowAcls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FlowAcl) > 0 {
		for _, e := range m.FlowAcl {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodId != nil {
		n += 1 + sovTrident(uint64(*m.PodId))
	}
	if m.PodName != nil {
		l = len(*m.PodName)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.EpcId != nil {
		n += 1 + sovTrident(uint64(*m.EpcId))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.PodClusterId != nil {
		n += 1 + sovTrident(uint64(*m.PodClusterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VtapIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VtapId != nil {
		n += 1 + sovTrident(uint64(*m.VtapId))
	}
	if m.EpcId != nil {
		n += 1 + sovTrident(uint64(*m.EpcId))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.PodClusterId != nil {
		n += 1 + sovTrident(uint64(*m.PodClusterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkipInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mac != nil {
		n += 1 + sovTrident(uint64(*m.Mac))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovTrident(uint64(*m.Status))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Revision != nil {
		l = len(*m.Revision)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.SelfUpdateUrl != nil {
		l = len(*m.SelfUpdateUrl)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.VersionPlatformData != nil {
		n += 1 + sovTrident(uint64(*m.VersionPlatformData))
	}
	if m.VersionAcls != nil {
		n += 1 + sovTrident(uint64(*m.VersionAcls))
	}
	if m.VersionGroups != nil {
		n += 1 + sovTrident(uint64(*m.VersionGroups))
	}
	if len(m.LocalSegments) > 0 {
		for _, e := range m.LocalSegments {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if len(m.RemoteSegments) > 0 {
		for _, e := range m.RemoteSegments {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.PlatformData != nil {
		l = len(m.PlatformData)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.FlowAcls != nil {
		l = len(m.FlowAcls)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Groups != nil {
		l = len(m.Groups)
		n += 1 + l + sovTrident(uint64(l))
	}
	if len(m.TapTypes) > 0 {
		for _, e := range m.TapTypes {
			l = e.Size()
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if len(m.PodIps) > 0 {
		for _, e := range m.PodIps {
			l = e.Size()
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if len(m.VtapIps) > 0 {
		for _, e := range m.VtapIps {
			l = e.Size()
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if len(m.SkipInterface) > 0 {
		for _, e := range m.SkipInterface {
			l = e.Size()
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CtrlIp != nil {
		l = len(*m.CtrlIp)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.CtrlMac != nil {
		l = len(*m.CtrlMac)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovTrident(uint64(*m.Status))
	}
	if m.Content != nil {
		l = len(m.Content)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Md5 != nil {
		l = len(*m.Md5)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.TotalLen != nil {
		n += 1 + sovTrident(uint64(*m.TotalLen))
	}
	if m.PktCount != nil {
		n += 1 + sovTrident(uint64(*m.PktCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NtpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CtrlIp != nil {
		l = len(*m.CtrlIp)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Request != nil {
		l = len(m.Request)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NtpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = len(m.Response)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisPlatformData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ips) > 0 {
		for _, e := range m.Ips {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.PlatformEnabled != nil {
		n += 2
	}
	if m.RawHostname != nil {
		l = len(*m.RawHostname)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.RawAllVmXml != nil {
		l = len(*m.RawAllVmXml)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.RawVmStates != nil {
		l = len(*m.RawVmStates)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.RawOvsInterfaces != nil {
		l = len(*m.RawOvsInterfaces)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.RawOvsPorts != nil {
		l = len(*m.RawOvsPorts)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.RawBrctlShow != nil {
		l = len(*m.RawBrctlShow)
		n += 2 + l + sovTrident(uint64(l))
	}
	if m.RawVlanConfig != nil {
		l = len(*m.RawVlanConfig)
		n += 2 + l + sovTrident(uint64(l))
	}
	if len(m.LldpInfo) > 0 {
		for _, e := range m.LldpInfo {
			l = e.Size()
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if len(m.RawIpAddrs) > 0 {
		for _, s := range m.RawIpAddrs {
			l = len(s)
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 2 + l + sovTrident(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastSeen != nil {
		n += 1 + sovTrident(uint64(*m.LastSeen))
	}
	if m.Mac != nil {
		n += 1 + sovTrident(uint64(*m.Mac))
	}
	if m.Ip != nil {
		l = len(m.Ip)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.PortUuid != nil {
		l = len(*m.PortUuid)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Lldp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.SystemName != nil {
		l = len(*m.SystemName)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.ManagementAddress != nil {
		l = len(*m.ManagementAddress)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.PortId != nil {
		l = len(*m.PortId)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.PortDescription != nil {
		l = len(*m.PortDescription)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mac != nil {
		n += 1 + sovTrident(uint64(*m.Mac))
	}
	if len(m.Ip) > 0 {
		for _, s := range m.Ip {
			l = len(s)
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.DeviceId != nil {
		l = len(*m.DeviceId)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.TapIndex != nil {
		n += 1 + sovTrident(uint64(*m.TapIndex))
	}
	if m.DeviceName != nil {
		l = len(*m.DeviceName)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovTrident(uint64(*m.Version))
	}
	if m.TridentType != nil {
		n += 1 + sovTrident(uint64(*m.TridentType))
	}
	if m.SourceIp != nil {
		l = len(*m.SourceIp)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovTrident(uint64(*m.VtapId))
	}
	if m.KubernetesClusterId != nil {
		l = len(*m.KubernetesClusterId)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.NatIp != nil {
		l = len(*m.NatIp)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.PlatformData != nil {
		l = m.PlatformData.Size()
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovTrident(uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KubernetesAPISyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != nil {
		l = len(*m.ClusterId)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovTrident(uint64(*m.Version))
	}
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.VtapId != nil {
		n += 1 + sovTrident(uint64(*m.VtapId))
	}
	if m.SourceIp != nil {
		l = len(*m.SourceIp)
		n += 1 + l + sovTrident(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovTrident(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KubernetesAPISyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovTrident(uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KubernetesClusterIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaMd5 != nil {
		l = len(*m.CaMd5)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KubernetesClusterIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.ClusterId != nil {
		l = len(*m.ClusterId)
		n += 1 + l + sovTrident(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTrident(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrident(x uint64) (n int) {
	return sovTrident(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommunicationVtap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunicationVtap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunicationVtap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastActiveTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastActiveTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsdbReportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsdbReportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsdbReportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcapDataMountPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PcapDataMountPath = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BootTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigAccepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ConfigAccepted = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v State
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Revision = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exception = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProcessName = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapMode", wireType)
			}
			var v TapMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TapMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapMode = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionPlatformData", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionPlatformData = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionAcls", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionAcls = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionGroups", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionGroups = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CtrlIp = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Host = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIps = append(m.HostIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CtrlMac = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapGroupIdRequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VtapGroupIdRequest = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationVtaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunicationVtaps = append(m.CommunicationVtaps, &CommunicationVtap{})
			if err := m.CommunicationVtaps[len(m.CommunicationVtaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuNum = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemorySize = &v
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Arch = &s
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Os = &s
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KernelVersion = &s
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsdbReportInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsdbReportInfo == nil {
				m.TsdbReportInfo = &TsdbReportInfo{}
			}
			if err := m.TsdbReportInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KubernetesClusterId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TapType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TapType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TapType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketType", wireType)
			}
			var v PacketType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PacketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vlan = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceIp = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapPort = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCpus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCpus = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemory", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxMemory = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncInterval = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatsInterval = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalPpsThreshold", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalPpsThreshold = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapInterfaceRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TapInterfaceRegex = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Host = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsyslogEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RsyslogEnabled = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputVlan", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputVlan = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mtu = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpbBpsThreshold", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NpbBpsThreshold = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CollectorEnabled = &b
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketHeaderEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PacketHeaderEnabled = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PlatformEnabled = &b
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesApiEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.KubernetesApiEnabled = &b
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTxBandwidthThreshold", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerTxBandwidthThreshold = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthProbeInterval", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BandwidthProbeInterval = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptureSocketType", wireType)
			}
			var v CaptureSocketType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CaptureSocketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CaptureSocketType = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpbVlanMode", wireType)
			}
			var v VlanMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VlanMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NpbVlanMode = &v
		case 23:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.L4LogTapTypes = append(m.L4LogTapTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrident
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrident
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.L4LogTapTypes) == 0 {
					m.L4LogTapTypes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrident
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.L4LogTapTypes = append(m.L4LogTapTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field L4LogTapTypes", wireType)
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpbDedupEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NpbDedupEnabled = &b
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfMacSource", wireType)
			}
			var v IfMacSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IfMacSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfMacSource = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapFlow_1SEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VtapFlow_1SEnabled = &b
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DebugEnabled = &b
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalyzerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AnalyzerIp = &s
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEscapeSeconds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxEscapeSeconds = &v
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyControllerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProxyControllerIp = &s
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegionId = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodClusterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodClusterId = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpcId = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalyzerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AnalyzerPort = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyControllerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProxyControllerPort = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TridentType", wireType)
			}
			var v common.TridentType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= common.TridentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TridentType = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorSocketType", wireType)
			}
			var v SocketType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SocketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectorSocketType = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressorSocketType", wireType)
			}
			var v SocketType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SocketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompressorSocketType = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpbSocketType", wireType)
			}
			var v SocketType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SocketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NpbSocketType = &v
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcapDataRetention", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PcapDataRetention = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapturePacketSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CapturePacketSize = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveServerPortEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.InactiveServerPortEnabled = &b
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptureBpf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CaptureBpf = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveIpEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.InactiveIpEnabled = &b
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibvirtXmlPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LibvirtXmlPath = &s
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogThreshold = &v
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LogLevel = &s
			iNdEx = postIndex
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreadThreshold = &v
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessThreshold = &v
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogRetention", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogRetention = &v
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NtpEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NtpEnabled = &b
		case 204:
			if wireType == 0 {
				var v DecapType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DecapType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DecapType = append(m.DecapType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrident
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrident
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.DecapType) == 0 {
					m.DecapType = make([]DecapType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DecapType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrident
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DecapType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DecapType = append(m.DecapType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DecapType", wireType)
			}
		case 301:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLogProxyClient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HttpLogProxyClient = &s
			iNdEx = postIndex
		case 302:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLogTraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HttpLogTraceId = &s
			iNdEx = postIndex
		case 303:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7LogPacketSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L7LogPacketSize = &v
		case 304:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L4LogCollectNpsThreshold", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L4LogCollectNpsThreshold = &v
		case 305:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7LogCollectNpsThreshold", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L7LogCollectNpsThreshold = &v
		case 306:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLogSpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HttpLogSpanId = &s
			iNdEx = postIndex
		case 307:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLogXRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HttpLogXRequestId = &s
			iNdEx = postIndex
		case 403:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.L7LogStoreTapTypes = append(m.L7LogStoreTapTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrident
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrident
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.L7LogStoreTapTypes) == 0 {
					m.L7LogStoreTapTypes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrident
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.L7LogStoreTapTypes = append(m.L7LogStoreTapTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field L7LogStoreTapTypes", wireType)
			}
		case 404:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L4PerformanceEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.L4PerformanceEnabled = &b
		case 405:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7MetricsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.L7MetricsEnabled = &b
		case 406:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAgentHttpProxyEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ExternalAgentHttpProxyEnabled = &b
		case 407:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAgentHttpProxyPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalAgentHttpProxyPort = &v
		case 410:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSequenceFlag", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketSequenceFlag = &v
		case 501:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysFreeMemoryLimit", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SysFreeMemoryLimit = &v
		case 502:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogFileSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogFileSize = &v
		case 503:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapMode", wireType)
			}
			var v TapMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TapMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapMode = &v
		case 510:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocalConfig = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Segment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Segment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Segment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = append(m.Mac, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InterfaceId = append(m.InterfaceId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrident
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrident
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.InterfaceId) == 0 {
					m.InterfaceId = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrident
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InterfaceId = append(m.InterfaceId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masklen", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masklen = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubnetId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeviceType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeviceId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpcId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LaunchServer = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpResources = append(m.IpResources, &IpResource{})
			if err := m.IpResources[len(m.IpResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchServerId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LaunchServerId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegionId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mac = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNodeId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodNodeId = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AzId = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodGroupId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodGroupId = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNsId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodNsId = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodId = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodClusterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodClusterId = &v
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVipInterface", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsVipInterface = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpcId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v GroupType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= GroupType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpRanges = append(m.IpRanges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BusinessId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpcId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpRanges = append(m.IpRanges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Protocol = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerPorts = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Groups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Groups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Groups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Svcs = append(m.Svcs, &Service{})
			if err := m.Svcs[len(m.Svcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalEpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalEpcId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteEpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemoteEpcId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cidr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cidr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cidr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Prefix = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v CidrType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CidrType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpcId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubnetId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegionId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AzId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TunnelId = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsVip = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerConnections = append(m.PeerConnections, &PeerConnection{})
			if err := m.PeerConnections[len(m.PeerConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidrs = append(m.Cidrs, &Cidr{})
			if err := m.Cidrs[len(m.Cidrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpbAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpbAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpbAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			var v TunnelType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TunnelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TunnelType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TunnelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TunnelIp = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapSide", wireType)
			}
			var v TapSide
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TapSide(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapSide = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSlice", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayloadSlice = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpbAclGroupId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NpbAclGroupId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelIpId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TunnelIpId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowAcl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowAcl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowAcl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Protocol = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcPorts = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DstPorts = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vlan = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpbActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpbActions = append(m.NpbActions, &NpbAction{})
			if err := m.NpbActions[len(m.NpbActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SrcGroupIds = append(m.SrcGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrident
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrident
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SrcGroupIds) == 0 {
					m.SrcGroupIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrident
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SrcGroupIds = append(m.SrcGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcGroupIds", wireType)
			}
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DstGroupIds = append(m.DstGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrident
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrident
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrident
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DstGroupIds) == 0 {
					m.DstGroupIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrident
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DstGroupIds = append(m.DstGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DstGroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowAcls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowAcls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowAcls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowAcl = append(m.FlowAcl, &FlowAcl{})
			if err := m.FlowAcl[len(m.FlowAcl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodIp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodIp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodIp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PodName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpcId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodClusterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodClusterId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VtapIp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VtapIp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VtapIp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpcId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodClusterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodClusterId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkipInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkipInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkipInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mac = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Revision = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfUpdateUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SelfUpdateUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionPlatformData", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionPlatformData = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionAcls", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionAcls = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionGroups", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionGroups = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalSegments = append(m.LocalSegments, &Segment{})
			if err := m.LocalSegments[len(m.LocalSegments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteSegments = append(m.RemoteSegments, &Segment{})
			if err := m.RemoteSegments[len(m.RemoteSegments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformData = append(m.PlatformData[:0], dAtA[iNdEx:postIndex]...)
			if m.PlatformData == nil {
				m.PlatformData = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAcls", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowAcls = append(m.FlowAcls[:0], dAtA[iNdEx:postIndex]...)
			if m.FlowAcls == nil {
				m.FlowAcls = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups[:0], dAtA[iNdEx:postIndex]...)
			if m.Groups == nil {
				m.Groups = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TapTypes = append(m.TapTypes, &TapType{})
			if err := m.TapTypes[len(m.TapTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIps = append(m.PodIps, &PodIp{})
			if err := m.PodIps[len(m.PodIps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VtapIps = append(m.VtapIps, &VtapIp{})
			if err := m.VtapIps[len(m.VtapIps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipInterface = append(m.SkipInterface, &SkipInterface{})
			if err := m.SkipInterface[len(m.SkipInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CtrlIp = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CtrlMac = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Md5 = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLen", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalLen = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PktCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NtpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NtpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NtpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CtrlIp = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NtpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NtpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NtpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response[:0], dAtA[iNdEx:postIndex]...)
			if m.Response == nil {
				m.Response = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisPlatformData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisPlatformData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisPlatformData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, &Ip{})
			if err := m.Ips[len(m.Ips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PlatformEnabled = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RawHostname = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawAllVmXml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RawAllVmXml = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawVmStates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RawVmStates = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawOvsInterfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RawOvsInterfaces = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawOvsPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RawOvsPorts = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawBrctlShow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RawBrctlShow = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawVlanConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RawVlanConfig = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LldpInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LldpInfo = append(m.LldpInfo, &Lldp{})
			if err := m.LldpInfo[len(m.LldpInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawIpAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawIpAddrs = append(m.RawIpAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &InterfaceInfo{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastSeen = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mac = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PortUuid = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lldp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lldp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lldp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ManagementAddress = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PortId = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PortDescription = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mac = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapIndex", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TapIndex = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TridentType", wireType)
			}
			var v common.TridentType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= common.TridentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TridentType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceIp = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KubernetesClusterId = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NatIp = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlatformData == nil {
				m.PlatformData = &GenesisPlatformData{}
			}
			if err := m.PlatformData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesAPISyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesAPISyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesAPISyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClusterId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtapId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VtapId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceIp = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &common.KubernetesAPIInfo{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesAPISyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesAPISyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesAPISyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesClusterIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesClusterIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesClusterIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CaMd5 = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesClusterIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesClusterIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesClusterIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrident
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrident
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClusterId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrident(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrident
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrident(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrident
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrident
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrident
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrident
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrident
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrident        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrident          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrident = fmt.Errorf("proto: unexpected end of group")
)
